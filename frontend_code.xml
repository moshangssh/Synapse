<?xml version="1.0" ?>
<code_package directory="frontend/synapse" generated_at="2025-08-12T17:20:29.099270">
  <file path="index.html" size="390" modified_time="2025-08-07T13:39:00.742382" mime_type="text/html" content_type="text">
    <content>&lt;!doctype html&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="UTF-8" /&gt;
    &lt;link rel="icon" type="image/svg+xml" href="/vite.svg" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1.0" /&gt;
    &lt;title&gt;Tauri + React + Typescript&lt;/title&gt;
  &lt;/head&gt;

  &lt;body&gt;
    &lt;div id="root"&gt;&lt;/div&gt;
    &lt;script type="module" src="/src/main.tsx"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
</content>
  </file>
  <file path="package.json" size="1138" modified_time="2025-08-11T10:23:12.317931" mime_type="application/json" content_type="text">
    <content>{
  "name": "synapse",
  "private": true,
  "version": "0.1.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc &amp;&amp; vite build",
    "preview": "vite preview",
    "tauri": "tauri",
    "test": "vitest"
  },
  "dependencies": {
    "@emotion/react": "^11.14.0",
    "@emotion/styled": "^11.14.1",
    "@mui/icons-material": "^7.2.0",
    "@mui/material": "^7.2.0",
    "@tauri-apps/api": "^2.7.0",
    "@tauri-apps/plugin-opener": "^2",
    "@types/react-window": "^1.8.8",
    "diff": "^5.2.0",
    "lucide-react": "^0.526.0",
    "notistack": "^3.0.2",
    "react": "^18.3.1",
    "react-dom": "^18.3.1",
    "react-virtuoso": "^4.13.0",
    "react-window": "^1.8.11",
    "zustand": "^5.0.6"
  },
  "devDependencies": {
    "@tauri-apps/cli": "^2",
    "@testing-library/jest-dom": "^6.6.3",
    "@testing-library/react": "^16.3.0",
    "@types/diff": "^5.2.0",
    "@types/react": "^18.3.1",
    "@types/react-dom": "^18.3.1",
    "@vitejs/plugin-react": "^4.3.4",
    "jsdom": "^26.1.0",
    "typescript": "~5.6.2",
    "vite": "^6.0.3",
    "vitest": "^1.6.0"
  }
}
</content>
  </file>
  <file path="README.md" size="385" modified_time="2025-08-07T13:39:00.742382" mime_type="text/markdown" content_type="text">
    <content># Tauri + React + Typescript

This template should help get you started developing with Tauri, React and Typescript in Vite.

## Recommended IDE Setup

- [VS Code](https://code.visualstudio.com/) + [Tauri](https://marketplace.visualstudio.com/items?itemName=tauri-apps.tauri-vscode) + [rust-analyzer](https://marketplace.visualstudio.com/items?itemName=rust-lang.rust-analyzer)
</content>
  </file>
  <file path="tsconfig.json" size="664" modified_time="2025-08-11T10:23:12.325930" mime_type="application/json" content_type="text">
    <content>{
  "compilerOptions": {
    "target": "ES2020",
    "useDefineForClassFields": true,
    "lib": ["ES2020", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,
    "types": ["vitest/globals"],

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "resolveJsonModule": true,
    "isolatedModules": true,
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "noFallthroughCasesInSwitch": true
  },
  "include": ["src"],
  "references": [{ "path": "./tsconfig.node.json" }]
}
</content>
  </file>
  <file path="tsconfig.node.json" size="223" modified_time="2025-08-07T13:39:00.772351" mime_type="application/json" content_type="text">
    <content>{
  "compilerOptions": {
    "composite": true,
    "skipLibCheck": true,
    "module": "ESNext",
    "moduleResolution": "bundler",
    "allowSyntheticDefaultImports": true
  },
  "include": ["vite.config.ts"]
}
</content>
  </file>
  <file path="vite.config.ts" size="1087" modified_time="2025-08-07T13:39:00.772851" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>/// &lt;reference types="vitest" /&gt;
import { defineConfig } from "vite";
import react from "@vitejs/plugin-react";

// @ts-expect-error process is a nodejs global
const host = process.env.TAURI_DEV_HOST;

// https://vitejs.dev/config/
export default defineConfig(async () =&gt; ({
  plugins: [react()],
  optimizeDeps: {
    exclude: ['diff'],
  },
  test: {
    globals: true,
    environment: 'jsdom',
    setupFiles: './src/setupTests.ts',
    exclude: ['**/node_modules/**', '**/dist/**'],
  },

  // Vite options tailored for Tauri development and only applied in `tauri dev` or `tauri build`
  //
  // 1. prevent vite from obscuring rust errors
  clearScreen: false,
  // 2. tauri expects a fixed port, fail if that port is not available
  server: {
    port: 1420,
    strictPort: true,
    host: "0.0.0.0",
    hmr: host
      ? {
          protocol: "ws",
          host,
          port: 1421,
        }
      : undefined,
    watch: {
      // 3. tell vite to ignore watching `src-tauri`
      ignored: ["**/src-tauri/**"],
    },
  },
}));
</content>
  </file>
  <file path="public\filler_words.json" size="94" modified_time="2025-08-12T16:27:04.959357" mime_type="application/json" content_type="text">
    <content>{
  "words": [
    "嗯",
    "啊",
    "哦",
    "呢",
    "吧",
    "啦"
  ]
}</content>
  </file>
  <file path="src\App.css" size="1855" modified_time="2025-08-07T13:39:00.756351" mime_type="text/css" content_type="text">
    <content>.logo.vite:hover {
  filter: drop-shadow(0 0 2em #747bff);
}

.logo.react:hover {
  filter: drop-shadow(0 0 2em #61dafb);
}
:root {
  font-family: Inter, Avenir, Helvetica, Arial, sans-serif;
  font-size: 16px;
  line-height: 24px;
  font-weight: 400;

  color: #0f0f0f;
  background-color: #f6f6f6;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
  -webkit-text-size-adjust: 100%;
}

.container {
  margin: 0;
  padding-top: 10vh;
  display: flex;
  flex-direction: column;
  justify-content: center;
  text-align: center;
}

.logo {
  height: 6em;
  padding: 1.5em;
  will-change: filter;
  transition: 0.75s;
}

.logo.tauri:hover {
  filter: drop-shadow(0 0 2em #24c8db);
}

.row {
  display: flex;
  justify-content: center;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

h1 {
  text-align: center;
}

input,
button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  color: #0f0f0f;
  background-color: #ffffff;
  transition: border-color 0.25s;
  box-shadow: 0 2px 2px rgba(0, 0, 0, 0.2);
}

button {
  cursor: pointer;
}

button:hover {
  border-color: #396cd8;
}
button:active {
  border-color: #396cd8;
  background-color: #e8e8e8;
}

input,
button {
  outline: none;
}

#greet-input {
  margin-right: 5px;
}

@media (prefers-color-scheme: dark) {
  :root {
    color: #f6f6f6;
    background-color: #2f2f2f;
  }

  a:hover {
    color: #24c8db;
  }

  input,
  button {
    color: #ffffff;
    background-color: #0f0f0f98;
  }
  button:active {
    background-color: #0f0f0f69;
  }
}
</content>
  </file>
  <file path="src\App.tsx" size="165" modified_time="2025-08-07T13:39:00.756351" mime_type="application/octet-stream" content_type="text">
    <content>import { MainLayout } from "./components/layout/MainLayout";

function App() {
  return (
    &lt;&gt;
      &lt;MainLayout /&gt;
    &lt;/&gt;
  );
}

export default App;
</content>
  </file>
  <file path="src\main.tsx" size="348" modified_time="2025-08-07T13:39:00.767350" mime_type="application/octet-stream" content_type="text">
    <content>import React from "react";
import ReactDOM from "react-dom/client";
import App from "./App";
import { SnackbarProvider } from "notistack";

ReactDOM.createRoot(document.getElementById("root") as HTMLElement).render(
  &lt;React.StrictMode&gt;
    &lt;SnackbarProvider maxSnack={3}&gt;
      &lt;App /&gt;
    &lt;/SnackbarProvider&gt;
  &lt;/React.StrictMode&gt;
);
</content>
  </file>
  <file path="src\setupTests.ts" size="42" modified_time="2025-08-07T13:39:00.768351" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import '@testing-library/jest-dom/vitest';</content>
  </file>
  <file path="src\types.ts" size="1859" modified_time="2025-08-11T14:10:33.692423" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { DiffPart } from "./components/DiffHighlighter";

/**
 * 时间码格式：HH:MM:SS:FF (小时:分钟:秒:帧)
 * 或 SRT格式：HH:MM:SS,mmm (小时:分钟:秒,毫秒)
 */
type Timecode = string;

/**
 * 字幕条目接口
 */
export interface Subtitle {
  /** 字幕ID */
  id: number;
  /** 起始时间码 */
  startTimecode: Timecode;
  /** 结束时间码 */
  endTimecode: Timecode;
  /** 字幕文本内容 */
  text: string;
  /** 原始字幕文本内容 */
  originalText: string;
  /** 文本差异信息 */
  diffs: DiffPart[];
  /** 是否匹配搜索条件 */
  isMatch?: boolean;
  /** 是否被修改过 */
  isModified?: boolean;
}

/**
 * 字幕轨道信息接口
 */
export interface SubtitleTrack {
  /** 轨道索引 */
  trackIndex: number;
  /** 轨道名称 */
  trackName: string;
}

/**
 * 项目信息接口
 */
export interface ProjectInfo {
  /** 项目名称 */
  projectName: string | null;
  /** 时间线名称 */
  timelineName: string | null;
}

/**
 * SRT字幕条目接口
 */
export interface SrtSubtitleEntry {
  /** 字幕ID */
  id: number;
  /** 起始时间码 */
  startTimecode: Timecode;
  /** 结束时间码 */
  endTimecode: Timecode;
  /** 字幕文本内容 */
  text: string;
}

/**
 * 导入的字幕文件接口
 */
export interface ImportedSubtitleFile {
  /** 文件名 */
  fileName: string;
  /** 字幕条目列表 */
  subtitles: SrtSubtitleEntry[];
  /** 文件元数据 */
  metadata: {
    /** 导入时间 */
    importedAt: string;
    /** 文件大小（可选） */
    fileSize?: number;
    /** 文件格式 */
    format: 'srt';
  };
}

/**
 * API错误信息接口
 */
export interface ApiError {
  /** 错误消息 */
  message: string;
  /** 错误码（可选） */
  code?: string;
}</content>
  </file>
  <file path="src\vite-env.d.ts" size="39" modified_time="2025-08-07T13:39:00.771851" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>/// &lt;reference types="vite/client" /&gt;
</content>
  </file>
  <file path="src\components\DiffHighlighter.tsx" size="1216" modified_time="2025-08-07T13:39:00.757852" mime_type="application/octet-stream" content_type="text">
    <content>import React from 'react';
import { styled } from '@mui/material/styles';

const InsertedText = styled('ins')(({ theme }) =&gt; ({
  backgroundColor: theme.palette.success.light,
  color: theme.palette.success.contrastText,
  textDecoration: 'none',
  padding: '2px 4px',
  borderRadius: theme.shape.borderRadius,
}));

const DeletedText = styled('del')(({ theme }) =&gt; ({
  backgroundColor: theme.palette.error.light,
  color: theme.palette.error.contrastText,
  padding: '2px 4px',
  borderRadius: theme.shape.borderRadius,
}));

export interface DiffPart {
  type: 'added' | 'removed' | 'normal';
  value: string;
}

interface DiffHighlighterProps {
  diffs: DiffPart[];
}

const DiffHighlighter: React.FC&lt;DiffHighlighterProps&gt; = ({ diffs }) =&gt; {
  return (
    &lt;p&gt;
      {diffs.map((part, index) =&gt; {
        switch (part.type) {
          case 'added':
            return &lt;InsertedText key={index}&gt;{part.value}&lt;/InsertedText&gt;;
          case 'removed':
            return &lt;DeletedText key={index}&gt;{part.value}&lt;/DeletedText&gt;;
          default:
            return &lt;span key={index}&gt;{part.value}&lt;/span&gt;;
        }
      })}
    &lt;/p&gt;
  );
};

export default DiffHighlighter;</content>
  </file>
  <file path="src\components\EditableSubtitleCell.tsx" size="3953" modified_time="2025-08-07T13:39:00.757852" mime_type="application/octet-stream" content_type="text">
    <content>import React, { useState, useRef, useEffect, memo } from 'react';
import { TableCell, TextField } from '@mui/material';
import DiffHighlighter from './DiffHighlighter';
import { Subtitle } from '../types';
import { textCellStyle, textFieldStyle, textDisplayStyle } from './sharedStyles';

interface EditableSubtitleCellProps {
  row: Subtitle;
  editingId: number | null;
  onSubtitleChange: (id: number, newText: string) =&gt; void;
  setEditingId: (id: number | null) =&gt; void;
}

// 自定义比较函数，避免使用 JSON.stringify 比较 diffs 数组
const areEqual = (prevProps: EditableSubtitleCellProps, nextProps: EditableSubtitleCellProps) =&gt; {
  // 比较基本属性
  if (
    prevProps.editingId !== nextProps.editingId ||
    prevProps.row.id !== nextProps.row.id ||
    prevProps.row.text !== nextProps.row.text ||
    prevProps.row.startTimecode !== nextProps.row.startTimecode ||
    prevProps.row.endTimecode !== nextProps.row.endTimecode ||
    prevProps.row.originalText !== nextProps.row.originalText
  ) {
    return false;
  }

  // 比较 diffs 数组
  const prevDiffs = prevProps.row.diffs;
  const nextDiffs = nextProps.row.diffs;

  if (prevDiffs === nextDiffs) {
    // 包括都为 undefined 或都为 null 的情况
    return true;
  }

  if (!prevDiffs || !nextDiffs) {
    // 其中一个为 falsy 值
    return false;
  }

  if (prevDiffs.length !== nextDiffs.length) {
    return false;
  }

  // 逐个比较 diffs 元素
  for (let i = 0; i &lt; prevDiffs.length; i++) {
    if (
      prevDiffs[i].type !== nextDiffs[i].type ||
      prevDiffs[i].value !== nextDiffs[i].value
    ) {
      return false;
    }
  }

  return true;
};

const EditableSubtitleCell: React.FC&lt;EditableSubtitleCellProps&gt; = ({
  row,
  editingId,
  onSubtitleChange,
  setEditingId,
}) =&gt; {
  const [editText, setEditText] = useState(row.text);
  const textFieldRef = useRef&lt;HTMLInputElement&gt;(null);
  const [escapePressed, setEscapePressed] = useState(false);

  useEffect(() =&gt; {
    // Only update from prop if not currently editing that specific cell
    if (editingId !== row.id) {
      setEditText(row.text);
    }
    
    // 在编辑模式下全选文本
    if (editingId === row.id &amp;&amp; textFieldRef.current) {
      // autoFocus 会处理聚焦，这里用来全选文本
      textFieldRef.current.select();
    }
  }, [row.text, editingId, row.id]);

  const isEditing = editingId === row.id;

  const handleDoubleClick = () =&gt; {
    setEditingId(row.id);
    setEditText(row.text);
    setEscapePressed(false);
  };

  const handleTextChange = (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
    setEditText(event.target.value);
  };

  const handleKeyDown = (event: React.KeyboardEvent) =&gt; {
    if (event.key === 'Enter') {
      onSubtitleChange(row.id, editText);
      setEditingId(null);
    } else if (event.key === 'Escape') {
      setEscapePressed(true);
      setEditingId(null);
      setEditText(row.text);
    }
  };

  const handleBlur = () =&gt; {
    if (escapePressed) {
      setEscapePressed(false);
      return;
    }
    if (editText !== row.text) {
      onSubtitleChange(row.id, editText);
    }
    setEditingId(null);
  };

  return (
    &lt;TableCell component="div" sx={textCellStyle} onDoubleClick={handleDoubleClick}&gt;
      {isEditing ? (
        &lt;TextField
          inputRef={textFieldRef}
          value={editText}
          onChange={handleTextChange}
          onKeyDown={handleKeyDown}
          onBlur={handleBlur}
          autoFocus
          fullWidth
          multiline
          variant="outlined"
          sx={textFieldStyle}
        /&gt;
      ) : (
        &lt;div style={textDisplayStyle}&gt;
          &lt;DiffHighlighter diffs={row.diffs || []} /&gt;
        &lt;/div&gt;
      )}
    &lt;/TableCell&gt;
  );
};

export default memo(EditableSubtitleCell, areEqual);</content>
  </file>
  <file path="src\components\FillerWordRemover.test.tsx" size="4484" modified_time="2025-08-12T15:40:26.512233" mime_type="application/octet-stream" content_type="text">
    <content>import { render, screen, fireEvent } from '@testing-library/react';
import { describe, it, expect, vi, beforeEach } from 'vitest';
import { FillerWordRemover } from './FillerWordRemover';
import { useDataStore } from '../stores/useDataStore';
import { useSettingsStore } from '../stores/useSettingsStore';
import useNotifier from '../hooks/useNotifier';

// Mock stores and hooks
vi.mock('../stores/useDataStore');
vi.mock('../stores/useSettingsStore');
vi.mock('../hooks/useNotifier');

const mockNotify = {
  success: vi.fn(),
  error: vi.fn(),
  warning: vi.fn(),
  info: vi.fn(),
};

const mockSubtitles = [
  { id: 1, text: '那个，我想说，就是，这个很好。', originalText: '那个，我想说，就是，这个很好。', diffs: [] },
  { id: 2, text: '嗯，是的，然后我们继续。', originalText: '嗯，是的，然后我们继续。', diffs: [] },
  { id: 3, text: '这是一个正常的句子。', originalText: '这是一个正常的句子。', diffs: [] },
  { id: 4, text: '你知道吗其实这个东西很棒', originalText: '你知道吗其实这个东西很棒', diffs: [] },
];

describe('FillerWordRemover', () =&gt; {
  beforeEach(() =&gt; {
    vi.clearAllMocks();
    (useNotifier as any).mockReturnValue(mockNotify);
  });

  it('should remove filler words from subtitles', () =&gt; {
    const setSubtitles = vi.fn();
    (useDataStore as any).mockReturnValue({ subtitles: mockSubtitles, setSubtitles });
    (useSettingsStore as any).mockReturnValue({
      fillerWords: ['那个', '就是', '嗯', '然后', '其实', '你知道吗'],
      loadFillerWords: vi.fn(),
    });

    render(&lt;FillerWordRemover /&gt;);

    const button = screen.getByRole('button', { name: /一键去口水词/i });
    fireEvent.click(button);

    expect(setSubtitles).toHaveBeenCalledWith(
      expect.arrayContaining([
        expect.objectContaining({ id: 1, text: '，我想说， 这个很好。', diffs: expect.any(Array) }),
        expect.objectContaining({ id: 2, text: '，是的， 我们继续。', diffs: expect.any(Array) }),
        expect.objectContaining({ id: 3, text: '这是一个正常的句子。' }), // No changes, so diffs might not be there
        expect.objectContaining({ id: 4, text: '这个东西很棒', diffs: expect.any(Array) }),
      ])
    );
    expect(mockNotify.success).toHaveBeenCalledWith('已成功移除所有口水词！');
  });

  it('should not change subtitles if no filler words are present', () =&gt; {
    const setSubtitles = vi.fn();
    const subtitlesWithoutFillers = [{ id: 1, text: '这是一个正常的句子。' }];
    (useDataStore as any).mockReturnValue({ subtitles: subtitlesWithoutFillers, setSubtitles });
    (useSettingsStore as any).mockReturnValue({
      fillerWords: ['啦', '吧'],
      loadFillerWords: vi.fn(),
    });

    render(&lt;FillerWordRemover /&gt;);
    fireEvent.click(screen.getByRole('button'));

    // In the new logic, if no changes are made, setSubtitles is not called.
    // Instead, a notification is shown.
    expect(setSubtitles).not.toHaveBeenCalled();
    expect(mockNotify.info).toHaveBeenCalledWith('未发现可移除的口水词。');
  });

  it('should disable the button if there are no subtitles', () =&gt; {
    (useDataStore as any).mockReturnValue({ subtitles: [], setSubtitles: vi.fn() });
    (useSettingsStore as any).mockReturnValue({
      fillerWords: ['a', 'b'],
      loadFillerWords: vi.fn(),
    });

    render(&lt;FillerWordRemover /&gt;);
    expect(screen.getByRole('button')).toBeDisabled();
  });

  it('should disable the button and show warning if filler words list is empty', () =&gt; {
    const setSubtitles = vi.fn();
    (useDataStore as any).mockReturnValue({ subtitles: mockSubtitles, setSubtitles });
    (useSettingsStore as any).mockReturnValue({
      fillerWords: [],
      loadFillerWords: vi.fn(),
    });

    render(&lt;FillerWordRemover /&gt;);
    const button = screen.getByRole('button');
    
    expect(button).toBeDisabled();
  });

  it('should call loadFillerWords on mount if list is empty', () =&gt; {
    const loadFillerWords = vi.fn();
    (useDataStore as any).mockReturnValue({ subtitles: [], setSubtitles: vi.fn() });
    (useSettingsStore as any).mockReturnValue({
      fillerWords: [],
      loadFillerWords,
    });

    render(&lt;FillerWordRemover /&gt;);
    expect(loadFillerWords).toHaveBeenCalledTimes(1);
  });
});</content>
  </file>
  <file path="src\components\FillerWordRemover.tsx" size="2325" modified_time="2025-08-12T15:39:19.209803" mime_type="application/octet-stream" content_type="text">
    <content>import { useEffect } from 'react';
import { Button } from '@mui/material';
import { Trash2 } from 'lucide-react';
import { useDataStore } from '../stores/useDataStore';
import { useSettingsStore } from '../stores/useSettingsStore';
import useNotifier from '../hooks/useNotifier';
import { calculateDiff } from '../utils/diff';

export function FillerWordRemover() {
  const { subtitles, setSubtitles } = useDataStore();
  const { fillerWords, loadFillerWords } = useSettingsStore();
  const notify = useNotifier();

  useEffect(() =&gt; {
    // Load filler words when the component mounts
    if (fillerWords.length === 0) {
      loadFillerWords();
    }
  }, [loadFillerWords, fillerWords.length]);

  const handleRemoveFillerWords = () =&gt; {
    if (fillerWords.length === 0) {
      notify.warning('口水词列表为空，无法执行操作。');
      return;
    }

    try {
      // For Chinese, word boundaries \b are not effective.
      // We will match the words directly.
      const fillerWordsRegex = new RegExp(fillerWords.join('|'), 'g');
      
      let changesMade = false;
      const updatedSubtitles = subtitles.map(subtitle =&gt; {
        // Replace filler words with an empty string and remove consecutive spaces that might result
        const cleanedText = subtitle.text.replace(fillerWordsRegex, '').replace(/\s+/g, ' ').trim();
        
        if (cleanedText !== subtitle.text) {
          changesMade = true;
          const newDiffs = calculateDiff(subtitle.originalText, cleanedText);
          return { ...subtitle, text: cleanedText, diffs: newDiffs };
        }
        return subtitle;
      });

      if (changesMade) {
        setSubtitles(updatedSubtitles);
        notify.success('已成功移除所有口水词！');
      } else {
        notify.info('未发现可移除的口水词。');
      }
    } catch (error) {
      console.error('Failed to remove filler words:', error);
      notify.error('移除失败，请检查控制台获取更多信息。');
    }
  };

  return (
    &lt;Button
      variant="contained"
      startIcon={&lt;Trash2 size={16} /&gt;}
      onClick={handleRemoveFillerWords}
      disabled={fillerWords.length === 0 || subtitles.length === 0}
    &gt;
      一键去口水词
    &lt;/Button&gt;
  );
}</content>
  </file>
  <file path="src\components\FindReplace.test.tsx" size="4025" modified_time="2025-08-11T10:23:12.320931" mime_type="application/octet-stream" content_type="text">
    <content>import { render, screen, fireEvent } from '@testing-library/react';
import { vi } from 'vitest';
import FindReplace from './FindReplace';
import React from 'react';

const mockProps = {
  searchQuery: '',
  replaceQuery: '',
  showReplace: false,
  matchCase: false,
  matchWholeWord: false,
  useRegex: false,
  onSearchChange: vi.fn(),
  onReplaceChange: vi.fn(),
  onReplaceAll: vi.fn(),
  onToggleShowReplace: vi.fn(),
  onToggleMatchCase: vi.fn(),
  onToggleMatchWholeWord: vi.fn(),
  onToggleUseRegex: vi.fn(),
};

describe('FindReplace Component', () =&gt; {
  it('should render search input and toggle button', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    expect(screen.getByPlaceholderText('在此处搜索字幕...')).toBeInTheDocument();
    expect(screen.getByRole('button')).toBeInTheDocument();
  });

  it('should not show replace input by default', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    expect(screen.queryByPlaceholderText('替换为...')).not.toBeInTheDocument();
  });

  it('should show replace input when toggle is clicked', () =&gt; {
    const props = { ...mockProps, showReplace: true };
    render(&lt;FindReplace {...props} /&gt;);
    expect(screen.getByPlaceholderText('替换为...')).toBeInTheDocument();
  });

  it('should call onToggleShowReplace when toggle button is clicked', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    const toggleButton = screen.getByTitle('显示高级替换');
    fireEvent.click(toggleButton);
    expect(mockProps.onToggleShowReplace).toHaveBeenCalledTimes(1);
  });

  it('should call onSearchChange when typing in search input', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    const searchInput = screen.getByPlaceholderText('在此处搜索字幕...');
    fireEvent.change(searchInput, { target: { value: 'test' } });
    expect(mockProps.onSearchChange).toHaveBeenCalled();
  });

  it('should call onReplaceChange when typing in replace input', () =&gt; {
    const props = { ...mockProps, showReplace: true };
    render(&lt;FindReplace {...props} /&gt;);
    const replaceInput = screen.getByPlaceholderText('替换为...');
    fireEvent.change(replaceInput, { target: { value: 'new' } });
    expect(mockProps.onReplaceChange).toHaveBeenCalled();
  });

  it('should call onToggleMatchCase when "大小写匹配" button is clicked', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    const matchCaseButton = screen.getByTitle('大小写匹配');
    fireEvent.click(matchCaseButton);
    expect(mockProps.onToggleMatchCase).toHaveBeenCalledTimes(1);
  });

  it('should call onToggleMatchWholeWord when "全词匹配" button is clicked', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    const matchWholeWordButton = screen.getByTitle('全词匹配');
    fireEvent.click(matchWholeWordButton);
    expect(mockProps.onToggleMatchWholeWord).toHaveBeenCalledTimes(1);
  });

  it('should call onToggleUseRegex when "使用正则表达式" button is clicked', () =&gt; {
    render(&lt;FindReplace {...mockProps} /&gt;);
    const useRegexButton = screen.getByTitle('使用正则表达式');
    fireEvent.click(useRegexButton);
    expect(mockProps.onToggleUseRegex).toHaveBeenCalledTimes(1);
  });

  it('should call onReplaceAll when "全部替换" button is clicked', () =&gt; {
    const props = { ...mockProps, showReplace: true };
    render(&lt;FindReplace {...props} /&gt;);
    const replaceAllButton = screen.getByTitle('全部替换');
    fireEvent.click(replaceAllButton);
    expect(mockProps.onReplaceAll).toHaveBeenCalledTimes(1);
  });

  it('should call onReplaceAll when Enter is pressed in replace input', () =&gt; {
    const props = { ...mockProps, showReplace: true };
    render(&lt;FindReplace {...props} /&gt;);
    const replaceInput = screen.getByPlaceholderText('替换为...');
    fireEvent.keyDown(replaceInput, { key: 'Enter', code: 'Enter' });
    expect(mockProps.onReplaceAll).toHaveBeenCalledTimes(1);
  });
});</content>
  </file>
  <file path="src\components\FindReplace.tsx" size="5982" modified_time="2025-08-07T13:39:00.759853" mime_type="application/octet-stream" content_type="text">
    <content>import React, { memo } from 'react';
import { TextField, Box, IconButton, InputAdornment, Tooltip } from '@mui/material';
import {
  ChevronDown,
  ChevronRight,
  CaseSensitive,
  WholeWord,
  Regex,
  ReplaceAll,
} from 'lucide-react';

interface FindReplaceProps {
  searchQuery: string;
  replaceQuery: string;
  showReplace: boolean;
  matchCase: boolean;
  matchWholeWord: boolean;
  useRegex: boolean;
  onSearchChange: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void;
  onReplaceChange: (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; void;
  onReplaceAll: () =&gt; void;
  onToggleShowReplace: () =&gt; void;
  onToggleMatchCase: () =&gt; void;
  onToggleMatchWholeWord: () =&gt; void;
  onToggleUseRegex: () =&gt; void;
}

const FindReplace: React.FC&lt;FindReplaceProps&gt; = ({
  searchQuery,
  replaceQuery,
  showReplace,
  matchCase,
  matchWholeWord,
  useRegex,
  onSearchChange,
  onReplaceChange,
  onReplaceAll,
  onToggleShowReplace,
  onToggleMatchCase,
  onToggleMatchWholeWord,
  onToggleUseRegex,
}) =&gt; {
  const handleReplaceKeyDown = (e: React.KeyboardEvent) =&gt; {
    if (e.key === 'Enter') {
      onReplaceAll();
    }
  };

  const commonInputStyles = {
    '&amp; .MuiOutlinedInput-root': {
      backgroundColor: '#3c3c3c',
      color: '#cccccc',
      fontSize: '0.8rem',
      height: '28px',
      '&amp; fieldset': {
        borderColor: '#464647',
      },
      '&amp;:hover fieldset': {
        borderColor: '#464647',
      },
      '&amp;.Mui-focused fieldset': {
        borderColor: '#007acc',
      },
    },
    '&amp; .MuiOutlinedInput-input': {
      '&amp;::placeholder': {
        color: '#969696',
        opacity: 1,
      },
    },
  };

  const iconButtonStyles = (isActive: boolean) =&gt; ({
    width: 24,
    height: 24,
    borderRadius: '4px',
    color: '#cccccc',
    backgroundColor: isActive ? '#094771' : 'transparent',
    '&amp;:hover': {
      backgroundColor: isActive ? '#094771' : '#464647',
    },
  });

  return (
    &lt;Box sx={{ display: 'flex', flexDirection: 'column', gap: 0.25, position: 'relative' }}&gt;
      {/* Toggle Button - Positioned absolutely */}
      &lt;Tooltip title={showReplace ? "隐藏替换" : "显示替换"}&gt;
        &lt;IconButton
          onClick={onToggleShowReplace}
          size="small"
          sx={{
            color: '#cccccc',
            padding: '1px',
            width: '18px',
            height: '18px',
            position: 'absolute',
            left: 0,
            top: showReplace ? 'calc(26px + 0.125rem - 9px)' : '4px', // Center align with the search input when collapsed
            zIndex: 1, // Ensure it's above other elements
            transition: 'top 0.2s ease-in-out', // Smooth transition when expanding/collapsing
          }}
        &gt;
          {showReplace ? &lt;ChevronDown size={14} /&gt; : &lt;ChevronRight size={14} /&gt;}
        &lt;/IconButton&gt;
      &lt;/Tooltip&gt;

      {/* Search Input */}
      &lt;Box sx={{ display: 'flex', alignItems: 'center', gap: 0.25, paddingLeft: '22px' /* Space for the button */ }}&gt;
        &lt;TextField
          placeholder="搜索"
          variant="outlined"
          size="small"
          value={searchQuery}
          onChange={onSearchChange}
          fullWidth
          sx={{
            ...commonInputStyles,
            '&amp; .MuiOutlinedInput-root': {
              ...commonInputStyles['&amp; .MuiOutlinedInput-root'],
              width: '100%',
              height: '26px',
            }
          }}
          InputProps={{
            sx: { height: '26px', minHeight: '26px' },
            endAdornment: (
              &lt;InputAdornment position="end" sx={{ gap: 0.25 }}&gt;
                &lt;Tooltip title="大小写匹配"&gt;
                  &lt;IconButton sx={{...iconButtonStyles(matchCase), width: 24, height: 24, padding: '2px'}} onClick={onToggleMatchCase}&gt;
                    &lt;CaseSensitive size={16} /&gt;
                  &lt;/IconButton&gt;
                &lt;/Tooltip&gt;
                &lt;Tooltip title="全词匹配"&gt;
                  &lt;IconButton sx={{...iconButtonStyles(matchWholeWord), width: 24, height: 24, padding: '2px'}} onClick={onToggleMatchWholeWord}&gt;
                    &lt;WholeWord size={16} /&gt;
                  &lt;/IconButton&gt;
                &lt;/Tooltip&gt;
                &lt;Tooltip title="使用正则表达式"&gt;
                  &lt;IconButton sx={{...iconButtonStyles(useRegex), width: 24, height: 24, padding: '2px'}} onClick={onToggleUseRegex}&gt;
                    &lt;Regex size={16} /&gt;
                  &lt;/IconButton&gt;
                &lt;/Tooltip&gt;
              &lt;/InputAdornment&gt;
            ),
          }}
        /&gt;
      &lt;/Box&gt;

      {/* Replace Input */}
      {showReplace &amp;&amp; (
        &lt;Box sx={{ display: 'flex', alignItems: 'center', paddingLeft: '22px' /* Space for the button */ }}&gt;
          &lt;TextField
            placeholder="替换"
            variant="outlined"
            size="small"
            value={replaceQuery}
            onChange={onReplaceChange}
            onKeyDown={handleReplaceKeyDown}
            fullWidth
            sx={{
              ...commonInputStyles,
              '&amp; .MuiOutlinedInput-root': {
                ...commonInputStyles['&amp; .MuiOutlinedInput-root'],
                height: '26px',
              }
            }}
            InputProps={{
              sx: { height: '26px', minHeight: '26px' },
              endAdornment: (
                &lt;InputAdornment position="end"&gt;
                  &lt;Tooltip title="全部替换"&gt;
                    &lt;IconButton sx={{...iconButtonStyles(false), width: 24, height: 24, padding: '2px'}} onClick={onReplaceAll}&gt;
                      &lt;ReplaceAll size={16} /&gt;
                    &lt;/IconButton&gt;
                  &lt;/Tooltip&gt;
                &lt;/InputAdornment&gt;
              ),
            }}
          /&gt;
        &lt;/Box&gt;
      )}
    &lt;/Box&gt;
  );
};

export default memo(FindReplace);
</content>
  </file>
  <file path="src\components\SearchResults.tsx" size="1625" modified_time="2025-08-07T13:39:00.759853" mime_type="application/octet-stream" content_type="text">
    <content>import React from 'react';
import { Typography, List, ListItem, ListItemText, Paper, ListItemButton } from '@mui/material';
import { Subtitle } from '../types';
import { scrollbarStyle } from './sharedStyles';

interface SearchResultsProps {
  subtitles: Subtitle[];
  onResultClick: (subtitle: Subtitle) =&gt; void;
}

const SearchResults: React.FC&lt;SearchResultsProps&gt; = ({ subtitles, onResultClick }) =&gt; {
  return (
    &lt;Paper elevation={0} sx={{ mt: 2, backgroundColor: 'transparent' }}&gt;
      &lt;Typography variant="body2" sx={{ color: '#cccccc', mb: 1 }}&gt;
        {subtitles.length} results
      &lt;/Typography&gt;
      &lt;List dense sx={{ p: 0, maxHeight: 'calc(100vh - 200px)', overflowY: 'auto', ...scrollbarStyle }}&gt;
        {subtitles.map((subtitle) =&gt; (
          &lt;ListItem key={subtitle.id} disablePadding&gt;
            &lt;ListItemButton
              onClick={() =&gt; onResultClick(subtitle)}
              sx={{
                '&amp;:hover': {
                  backgroundColor: '#37373d',
                },
              }}
            &gt;
              &lt;ListItemText
                primary={subtitle.text}
                primaryTypographyProps={{
                  style: {
                    color: '#cccccc',
                    fontSize: '0.8rem',
                    whiteSpace: 'nowrap',
                    overflow: 'hidden',
                    textOverflow: 'ellipsis',
                  },
                }}
              /&gt;
            &lt;/ListItemButton&gt;
          &lt;/ListItem&gt;
        ))}
      &lt;/List&gt;
    &lt;/Paper&gt;
  );
};

export default React.memo(SearchResults);</content>
  </file>
  <file path="src\components\sharedStyles.ts" size="1984" modified_time="2025-08-07T13:39:00.764850" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { SxProps, Theme } from '@mui/material/styles';

export const tableRowStyle: SxProps&lt;Theme&gt; = {
  cursor: "pointer",
  "&amp;:hover": {
    backgroundColor: "action.hover",
  },
  display: 'flex',
  width: '100%',
};

export const idCellStyle: SxProps&lt;Theme&gt; = { width: '80px', flexShrink: 0 };
export const timecodeCellStyle: SxProps&lt;Theme&gt; = { width: '150px', flexShrink: 0 };
export const textCellStyle: SxProps&lt;Theme&gt; = {
  flexGrow: 1,
  padding: 0,
  whiteSpace: 'normal',
  wordBreak: 'break-word',
};

export const textFieldStyle: SxProps&lt;Theme&gt; = {
  height: '100%',
  '&amp; .MuiOutlinedInput-root': {
    height: '100%',
    padding: 0,
    boxSizing: 'border-box',
    '&amp; .MuiOutlinedInput-notchedOutline': {
      border: '1px solid #1976d2',
    },
    '&amp;.Mui-focused .MuiOutlinedInput-notchedOutline': {
      borderWidth: '1px',
    },
  },
  '&amp; .MuiInputBase-input': {
    padding: '4px',
    height: '100%',
    boxSizing: 'border-box',
  },
};

export const textDisplayStyle: React.CSSProperties = {
  padding: '4px',
  height: 'auto', // Allow height to grow with content
  minHeight: '36px', // Maintain a minimum height
  boxSizing: 'border-box',
  display: 'flex',
  alignItems: 'center',
  whiteSpace: 'normal',
  wordBreak: 'break-word',
};

// VSCode 风格的滚动条样式
export const scrollbarStyle: SxProps&lt;Theme&gt; = {
  // Firefox
  scrollbarWidth: 'thin',
  scrollbarColor: '#424242 transparent',
  
  // Webkit browsers (Chrome, Safari, Edge)
  '&amp;::-webkit-scrollbar': {
    width: '10px',
    height: '10px',
  },
  '&amp;::-webkit-scrollbar-track': {
    backgroundColor: 'transparent',
  },
  '&amp;::-webkit-scrollbar-thumb': {
    backgroundColor: '#424242',
    border: '2px solid transparent',
    backgroundClip: 'content-box',
    
    '&amp;:hover': {
      backgroundColor: '#616161',
    },
  },
  '&amp;::-webkit-scrollbar-corner': {
    backgroundColor: 'transparent',
  },
};</content>
  </file>
  <file path="src\components\SubtitleRow.tsx" size="2986" modified_time="2025-08-11T14:10:33.688423" mime_type="application/octet-stream" content_type="text">
    <content>import { memo, forwardRef } from 'react';
import { Box } from '@mui/material';
import { Subtitle } from '../types';
import {
  idCellStyle,
  timecodeCellStyle,
} from './sharedStyles';
import EditableSubtitleCell from './EditableSubtitleCell';

interface SubtitleRowProps {
  row: Subtitle;
  selectedRow: number | null;
  editingId: number | null;
  handleRowClick: (startTimecode: string, endTimecode: string, id: number) =&gt; void;
  onSubtitleChange: (id: number, newText: string) =&gt; void;
  setEditingId: (id: number | null) =&gt; void;
}

// 自定义比较函数，避免比较函数引用
const areEqual = (prevProps: SubtitleRowProps, nextProps: SubtitleRowProps) =&gt; {
  // 比较非函数属性
  return (
    prevProps.row.id === nextProps.row.id &amp;&amp;
    prevProps.row.startTimecode === nextProps.row.startTimecode &amp;&amp;
    prevProps.row.endTimecode === nextProps.row.endTimecode &amp;&amp;
    prevProps.row.text === nextProps.row.text &amp;&amp;
    prevProps.row.originalText === nextProps.row.originalText &amp;&amp;
    // 比较 diffs 数组
    prevProps.row.diffs === nextProps.row.diffs &amp;&amp; // 在 JavaScript 中，对象引用比较是合理的，因为 diffs 应该是不可变的
    prevProps.selectedRow === nextProps.selectedRow &amp;&amp;
    prevProps.editingId === nextProps.editingId
  );
};

const SubtitleRow = memo(forwardRef&lt;HTMLDivElement, SubtitleRowProps&gt;(({
  row,
  selectedRow,
  editingId,
  handleRowClick,
  onSubtitleChange,
  setEditingId,
}, ref) =&gt; {
  // 直接使用从父组件传递过来的row数据
  const currentSubtitle = row;

  // 处理整行双击编辑
  const handleRowDoubleClick = () =&gt; {
    setEditingId(row.id);
  };

  return (
    &lt;Box
      ref={ref}
      key={currentSubtitle.id}
      onClick={() =&gt; handleRowClick(currentSubtitle.startTimecode, currentSubtitle.endTimecode, currentSubtitle.id)}
      onDoubleClick={handleRowDoubleClick}
      sx={{
        display: 'flex',
        alignItems: 'center',
        height: '50px',
        borderBottom: 1,
        borderColor: 'divider',
        cursor: 'pointer',
        '&amp;:hover': {
          backgroundColor: 'action.hover',
        },
        ...(selectedRow === currentSubtitle.id &amp;&amp; {
          backgroundColor: 'action.selected',
        }),
      }}
    &gt;
      &lt;Box component="div" sx={{ ...idCellStyle, textAlign: 'center', py: 0.25 }}&gt;
        {currentSubtitle.id}
      &lt;/Box&gt;
      &lt;Box component="div" sx={{ ...timecodeCellStyle, textAlign: 'center', py: 0.25 }}&gt;
        {currentSubtitle.startTimecode}
      &lt;/Box&gt;
      &lt;Box component="div" sx={{ ...timecodeCellStyle, textAlign: 'center', py: 0.25 }}&gt;
        {currentSubtitle.endTimecode}
      &lt;/Box&gt;
      &lt;EditableSubtitleCell
        row={currentSubtitle}
        editingId={editingId}
        onSubtitleChange={onSubtitleChange}
        setEditingId={setEditingId}
      /&gt;
    &lt;/Box&gt;
  );
}));

export default memo(SubtitleRow, areEqual);</content>
  </file>
  <file path="src\components\SubtitleTable.test.tsx" size="6121" modified_time="2025-08-11T10:23:12.321431" mime_type="application/octet-stream" content_type="text">
    <content>import React from 'react';
import { render, screen, fireEvent } from '@testing-library/react';
import { vi } from 'vitest';
import '@testing-library/jest-dom';
import SubtitleTable from './SubtitleTable';
import { Subtitle } from '../types';

// Mock the useNotifier hook
vi.mock('../hooks/useNotifier', () =&gt; ({
  __esModule: true,
  default: () =&gt; ({
    error: vi.fn(),
    success: vi.fn(),
  }),
}));

interface MockListProps {
  children: React.ComponentType&lt;{ data: any; index: number; style: React.CSSProperties; key: number }&gt;;
  itemData: {
    subtitles: { id: number }[];
  };
  height: number;
  width: string;
}

// Mock react-window
vi.mock('react-window', () =&gt; ({
  __esModule: true,
  FixedSizeList: ({ children: RowComponent, itemData, height, width }: MockListProps) =&gt; {
    return (
      &lt;div style={{ height, width }}&gt;
        {itemData.subtitles.map((subtitle, index) =&gt; (
          &lt;RowComponent data={itemData} index={index} style={{}} key={subtitle.id} /&gt;
        ))}
      &lt;/div&gt;
    );
  },
}));


describe('SubtitleTable', () =&gt; {
  const mockSubtitles: Subtitle[] = [
    { id: 1, startTimecode: '00:00:01,000', endTimecode: '00:00:03,000', text: 'Hello world', originalText: 'Hello world', diffs: [{ type: 'normal', value: 'Hello world' }] },
    { id: 2, startTimecode: '00:00:04,000', endTimecode: '00:00:06,000', text: 'This is a test', originalText: 'This is a test', diffs: [{ type: 'normal', value: 'This is a test' }] },
  ];

  const mockOnSubtitleChange = vi.fn();

  beforeEach(() =&gt; {
    vi.clearAllMocks();
    // Mock fetch
    globalThis.fetch = vi.fn(() =&gt;
      Promise.resolve({
        ok: true,
        json: () =&gt; Promise.resolve({}),
      })
    ) as any;
  });

  it('renders subtitles correctly', () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    expect(screen.getByText('Hello world')).toBeInTheDocument();
    expect(screen.getByText('This is a test')).toBeInTheDocument();
  });

  it('renders a filtered list of subtitles correctly', () =&gt; {
    const filteredSubtitles = [mockSubtitles[0]]; // Only "Hello world"
    render(&lt;SubtitleTable subtitles={filteredSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    
    expect(screen.getByText('Hello world')).toBeInTheDocument();
    expect(screen.queryByText('This is a test')).not.toBeInTheDocument();
  });

  it('enters edit mode on double click', async () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    const textElement = screen.getByText('Hello world');
    fireEvent.doubleClick(textElement);
    const input = await screen.findByDisplayValue('Hello world');
    expect(input).toBeInTheDocument();
  });

  it('allows text to be changed in edit mode', async () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    fireEvent.doubleClick(screen.getByText('Hello world'));
    const input: HTMLInputElement = await screen.findByDisplayValue('Hello world');
    fireEvent.change(input, { target: { value: 'Updated text' } });
    expect(input.value).toBe('Updated text');
  });

  it('calls onSubtitleChange and exits edit mode on Enter key', async () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    fireEvent.doubleClick(screen.getByText('Hello world'));
    const input = await screen.findByDisplayValue('Hello world');
    fireEvent.change(input, { target: { value: 'Updated text' } });
    fireEvent.keyDown(input, { key: 'Enter', code: 'Enter' });

    expect(mockOnSubtitleChange).toHaveBeenCalledWith(1, 'Updated text');
    expect(screen.queryByDisplayValue('Updated text')).not.toBeInTheDocument();
  });

  it('calls onSubtitleChange and exits edit mode on blur', async () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    fireEvent.doubleClick(screen.getByText('Hello world'));
    const input = await screen.findByDisplayValue('Hello world');
    fireEvent.change(input, { target: { value: 'Updated on blur' } });
    fireEvent.blur(input);

    expect(mockOnSubtitleChange).toHaveBeenCalledWith(1, 'Updated on blur');
    expect(screen.queryByDisplayValue('Updated on blur')).not.toBeInTheDocument();
  });

  it('does not call onSubtitleChange and exits edit mode on Escape key', async () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    fireEvent.doubleClick(screen.getByText('Hello world'));
    const input = await screen.findByDisplayValue('Hello world');
    fireEvent.change(input, { target: { value: 'This should not be saved' } });
    fireEvent.keyDown(input, { key: 'Escape', code: 'Escape' });

    expect(mockOnSubtitleChange).not.toHaveBeenCalled();
    expect(screen.queryByDisplayValue('This should not be saved')).not.toBeInTheDocument();
    // The original text should be back
    expect(screen.getByText('Hello world')).toBeInTheDocument();
  });

  it('does not call onSubtitleChange on blur after Escape key is pressed', async () =&gt; {
    render(&lt;SubtitleTable subtitles={mockSubtitles} jumpTo="start" onSubtitleChange={mockOnSubtitleChange} /&gt;);
    fireEvent.doubleClick(screen.getByText('Hello world'));
    const input = await screen.findByDisplayValue('Hello world');
    fireEvent.change(input, { target: { value: 'This should also not be saved' } });

    // Press Escape
    fireEvent.keyDown(input, { key: 'Escape', code: 'Escape' });
    
    // Then blur the input
    fireEvent.blur(input);

    // The change should NOT have been saved
    expect(mockOnSubtitleChange).not.toHaveBeenCalled();
    expect(screen.queryByDisplayValue('This should also not be saved')).not.toBeInTheDocument();
    expect(screen.getByText('Hello world')).toBeInTheDocument();
  });
});</content>
  </file>
  <file path="src\components\SubtitleTable.tsx" size="5027" modified_time="2025-08-11T10:23:12.321933" mime_type="application/octet-stream" content_type="text">
    <content>import React, { useCallback, memo, useState, useRef, useEffect, useMemo } from 'react';
import { Box, styled } from '@mui/material';
import { Virtuoso, VirtuosoHandle } from 'react-virtuoso';
import SubtitleRow from './SubtitleRow';
import { idCellStyle, timecodeCellStyle, textCellStyle, scrollbarStyle } from './sharedStyles';
import { useTimelineNavigation } from '../hooks/useTimelineNavigation';
import { useDataStore } from '../stores/useDataStore';
import { useUIStore } from '../stores/useUIStore';

interface SubtitleTableProps {
  jumpToSubtitleId: number | null;
  onRowClick: (id: number) =&gt; void;
}

// 自定义标记层组件，用于在滚动条上显示修改过的行
const ModifiedLinesOverlay = styled('div')({
  position: 'absolute',
  top: 0,
  right: 0,
  width: '10px', // 滚动条宽度
  height: '100%',
  pointerEvents: 'none', // 不拦截鼠标事件
  zIndex: 1000, // 确保在滚动条上方
});

// 修改标记组件
const ModifiedLineMarker = styled('div')(() =&gt; ({
  position: 'absolute',
  right: '2px', // 距离右边 2px
  width: '6px', // 宽度 6px
  height: '2px', // 高度 2px
  backgroundColor: '#FFCC00', // VSCode 中修改行的黄色标记
  borderRadius: '1px', // 轻微圆角
}));

const SubtitleTable: React.FC&lt;SubtitleTableProps&gt; = ({ jumpToSubtitleId, onRowClick }) =&gt; {
  const virtuosoRef = useRef&lt;VirtuosoHandle&gt;(null);
  const { setTimecode } = useTimelineNavigation();
  const [selectedRow, setSelectedRow] = useState&lt;number | null&gt;(null);
  const [editingId, setEditingId] = useState&lt;number | null&gt;(null);
  const subtitles = useDataStore((state) =&gt; state.subtitles);
  const updateSubtitleText = useDataStore((state) =&gt; state.updateSubtitleText);
  const modifiedIndices = useDataStore((state) =&gt; state.getModifiedSubtitleIndices());
  const jumpTo = useUIStore((state) =&gt; state.jumpTo);

  // 使用 useCallback 包装回调函数以稳定它们的引用
  const handleRowClick = useCallback(async (inPoint: string, outPoint: string, id: number) =&gt; {
    setSelectedRow(id);
    onRowClick(id);
    await setTimecode(inPoint, outPoint, jumpTo);
  }, [jumpTo, setTimecode, onRowClick]);

  const handleSubtitleChange = useCallback((id: number, newText: string) =&gt; {
    updateSubtitleText(id, newText);
  }, [updateSubtitleText]);

  const handleSetEditingId = useCallback((id: number | null) =&gt; {
    setEditingId(id);
  }, []);

  useEffect(() =&gt; {
    if (jumpToSubtitleId !== null) {
      const index = subtitles.findIndex(s =&gt; s.id === jumpToSubtitleId);
      if (index !== -1 &amp;&amp; virtuosoRef.current) {
        virtuosoRef.current.scrollToIndex({
          index,
          align: 'center',
          behavior: 'smooth',
        });
        const sub = subtitles[index];
        handleRowClick(sub.startTimecode, sub.endTimecode, sub.id);
      }
    }
  }, [jumpToSubtitleId, subtitles, handleRowClick]);

  const rowContent = useCallback((_index: number, subtitle: (typeof subtitles)[number]) =&gt; {
    return (
      &lt;div key={subtitle.id}&gt;
        &lt;SubtitleRow
          row={subtitle}
          selectedRow={selectedRow}
          editingId={editingId}
          handleRowClick={handleRowClick}
          onSubtitleChange={handleSubtitleChange}
          setEditingId={handleSetEditingId}
        /&gt;
      &lt;/div&gt;
    );
  }, [subtitles, selectedRow, editingId, handleRowClick, handleSubtitleChange, handleSetEditingId]);

  return (
    &lt;Box sx={{ display: 'flex', flexDirection: 'column', height: '100%' }}&gt;
      {/* Header */}
      &lt;Box sx={{ display: 'flex', flexShrink: 0, borderBottom: 1, borderColor: 'divider' }}&gt;
        &lt;Box sx={{ ...idCellStyle, textAlign: 'center', py: 1 }}&gt;序号&lt;/Box&gt;
        &lt;Box sx={{ ...timecodeCellStyle, textAlign: 'center', py: 1 }}&gt;起始时间码&lt;/Box&gt;
        &lt;Box sx={{ ...timecodeCellStyle, textAlign: 'center', py: 1 }}&gt;结束时间码&lt;/Box&gt;
        &lt;Box sx={{ ...textCellStyle, py: 1, pl: 2 }}&gt;字幕内容&lt;/Box&gt;
      &lt;/Box&gt;

      {/* Body */}
      &lt;Box sx={{ flex: 1, ...scrollbarStyle, position: 'relative' }}&gt;
        &lt;Virtuoso
          ref={virtuosoRef}
          style={{ height: '100%' }}
          data={subtitles}
          itemContent={rowContent}
        /&gt;
        {/* 修改过的行标记层 */}
        &lt;ModifiedLinesOverlay&gt;
          {useMemo(() =&gt; {
            const totalLines = subtitles.length;
            if (totalLines === 0) return null;

            return modifiedIndices.map((index) =&gt; {
              const position = (index / totalLines) * 100;
              return (
                &lt;ModifiedLineMarker
                  key={subtitles[index].id}
                  style={{
                    top: `${position}%`,
                  }}
                /&gt;
              );
            });
          }, [modifiedIndices, subtitles.length])}
        &lt;/ModifiedLinesOverlay&gt;
      &lt;/Box&gt;
    &lt;/Box&gt;
  );
};

export default memo(SubtitleTable);</content>
  </file>
  <file path="src\components\layout\ActivityBar.tsx" size="2019" modified_time="2025-08-12T12:44:24.634706" mime_type="application/octet-stream" content_type="text">
    <content>import { Box, IconButton, Tooltip, Paper } from '@mui/material';
import { Files, Search, Upload, Wand2 } from 'lucide-react';
import { useUIStore } from '../../stores/useUIStore';

export function ActivityBar() {
  const { activeView, setActiveView, isSidebarOpen, toggleSidebar } = useUIStore();

  const items = [
    { id: 'explorer', icon: Files, label: 'Explorer' },
    { id: 'search', icon: Search, label: 'Search' },
    { id: 'optimizer', icon: Wand2, label: 'Optimizer' },
    { id: 'git', icon: Upload, label: 'Export' },
  ];

  const handleViewChange = (viewId: string) =&gt; {
    if (activeView === viewId) {
      // 点击相同图标：切换 Sidebar 的收纳/展示状态
      toggleSidebar();
    } else {
      // 点击不同图标：切换视图并确保 Sidebar 展开
      setActiveView(viewId);
      if (!isSidebarOpen) {
        toggleSidebar();
      }
    }
  };

  return (
    &lt;Paper
      sx={{
        width: 48,
        height: '100%',
        backgroundColor: '#2c2c2c',
        borderRadius: 0,
        display: 'flex',
        flexDirection: 'column',
        borderRight: '1px solid #3c3c3c',
      }}
    &gt;
      &lt;Box sx={{ display: 'flex', flexDirection: 'column' }}&gt;
        {items.map((item) =&gt; (
          &lt;Tooltip key={item.id} title={item.label} placement="right"&gt;
            &lt;IconButton
              onClick={() =&gt; handleViewChange(item.id)}
              sx={{
                height: 48,
                width: 48,
                borderRadius: 0,
                color: '#cccccc',
                backgroundColor: activeView === item.id ? '#37373d' : 'transparent',
                borderRight: activeView === item.id ? '2px solid #007acc' : 'none',
                '&amp;:hover': {
                  backgroundColor: '#37373d',
                },
              }}
            &gt;
              &lt;item.icon size={20} /&gt;
            &lt;/IconButton&gt;
          &lt;/Tooltip&gt;
        ))}
      &lt;/Box&gt;
    &lt;/Paper&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\FileExplorer.tsx" size="7459" modified_time="2025-08-07T13:39:00.762351" mime_type="application/octet-stream" content_type="text">
    <content>import {
  Box,
  Typography,
  List,
  ListItemButton,
  ListItemIcon,
  ListItemText,
  Paper,
  IconButton,
  Snackbar,
  Alert
} from '@mui/material';
import { InsertDriveFile, Description } from '@mui/icons-material';
import { RefreshCcw, Import } from 'lucide-react';
import { useDataStore } from '../../stores/useDataStore';
import { useSrtImporter } from '../../hooks/useSrtImporter';
import { useState } from 'react';
import { Subtitle } from '../../types';
import { convertSrtToSubtitles } from '../../utils/converter';

// 定义选择状态类型
type SelectionType = 'track' | 'importedFile' | null;

interface SelectionState {
  type: SelectionType;
  id: string | number; // 对于 track 是 trackIndex，对于 importedFile 是 fileName
}

interface FileExplorerProps {
  fetchSubtitleTracks: () =&gt; Promise&lt;void&gt;;
  loading: boolean;
  onTrackSelect: (trackIndex: number) =&gt; void;
}

export function FileExplorer({
  fetchSubtitleTracks,
  loading,
  onTrackSelect,
}: FileExplorerProps) {
  const subtitleTracks = useDataStore((state) =&gt; state.subtitleTracks);
  const setSubtitles = useDataStore((state) =&gt; state.setSubtitles);
  const importedSubtitleFiles = useDataStore((state) =&gt; state.importedSubtitleFiles);
  const [selection, setSelection] = useState&lt;SelectionState&gt;({ type: null, id: 0 });
  
  // 判断是否选中的逻辑
  const isSelected = (type: SelectionType, id: string | number) =&gt; {
    return selection.type === type &amp;&amp; selection.id === id;
  };
  
  // 使用自定义Hook处理SRT文件导入
  const {
    handleFileChange,
    isImporting,
    triggerFileSelect,
    fileInputRef,
    snackbarOpen,
    snackbarMessage,
    snackbarSeverity,
    handleSnackbarClose,
  } = useSrtImporter();

  return (
    &lt;Paper
      sx={{
        height: '100%',
        backgroundColor: '#252526',
        borderRadius: 0,
        borderRight: '1px solid #3c3c3c',
      }}
    &gt;
      &lt;Box sx={{ p: 1.5, borderBottom: '1px solid #3c3c3c', display: 'flex', justifyContent: 'space-between', alignItems: 'center' }}&gt;
        &lt;Typography variant="h6" sx={{ color: '#cccccc' }}&gt;
          字幕源
        &lt;/Typography&gt;
        &lt;Box sx={{ display: 'flex', gap: 0.5 }}&gt;
          &lt;IconButton onClick={fetchSubtitleTracks} disabled={loading} size="small"&gt;
            &lt;RefreshCcw size={16} color={loading ? "#666" : "#ccc"} /&gt;
          &lt;/IconButton&gt;
          &lt;IconButton onClick={triggerFileSelect} disabled={isImporting} size="small" title="导入SRT文件"&gt;
            &lt;Import size={16} color={isImporting ? "#666" : "#ccc"} /&gt;
          &lt;/IconButton&gt;
        &lt;/Box&gt;
      &lt;/Box&gt;
      
      {/* 隐藏的文件输入元素 */}
      &lt;input
        type="file"
        ref={fileInputRef}
        onChange={handleFileChange}
        accept=".srt"
        style={{ display: 'none' }}
      /&gt;
      &lt;List dense sx={{ py: 1 }}&gt;
        {/* 显示导入的SRT文件 */}
        {importedSubtitleFiles.length &gt; 0 &amp;&amp; (
          &lt;&gt;
            &lt;Box sx={{ px: 2, py: 0.5 }}&gt;
              &lt;Typography variant="caption" sx={{ color: '#888888' }}&gt;
                导入的文件
              &lt;/Typography&gt;
            &lt;/Box&gt;
            {importedSubtitleFiles.map((file) =&gt; (
              &lt;ListItemButton
                key={`imported-${file.fileName}`}
                onClick={() =&gt; {
                  // 当点击导入的文件时，将其字幕数据设置为当前显示的字幕
                  const convertedSubtitles: Subtitle[] = convertSrtToSubtitles(file.subtitles);
                  setSubtitles(convertedSubtitles);
                  setSelection({ type: 'importedFile', id: file.fileName });
                }}
                selected={isSelected('importedFile', file.fileName)}
                sx={{
                  paddingLeft: `16px`,
                  paddingY: 0.25,
                  minHeight: 28,
                  color: '#cccccc',
                  '&amp;:hover': {
                    backgroundColor: '#37373d',
                  },
                  '&amp;.Mui-selected': {
                    backgroundColor: '#37373d',
                    '&amp;:hover': {
                      backgroundColor: '#37373d',
                    },
                  },
                }}
              &gt;
                &lt;ListItemIcon sx={{ minWidth: 24, color: '#4ec9b0' }}&gt;
                  &lt;Description sx={{ fontSize: 16 }} /&gt;
                &lt;/ListItemIcon&gt;
                &lt;ListItemText
                  primary={`[导入] ${file.fileName}`}
                  primaryTypographyProps={{ fontSize: '0.75rem' }}
                /&gt;
              &lt;/ListItemButton&gt;
            ))}
          &lt;/&gt;
        )}
        
        {/* 显示时间线轨道 */}
        {subtitleTracks.length &gt; 0 &amp;&amp; (
          &lt;&gt;
            &lt;Box sx={{ px: 2, py: 0.5, mt: importedSubtitleFiles.length &gt; 0 ? 1 : 0 }}&gt;
              &lt;Typography variant="caption" sx={{ color: '#888888' }}&gt;
                时间线轨道
              &lt;/Typography&gt;
            &lt;/Box&gt;
        
            {subtitleTracks.map(track =&gt; (
              &lt;ListItemButton
                key={track.trackIndex}
                onClick={() =&gt; {
                  onTrackSelect(track.trackIndex);
                  setSelection({ type: 'track', id: track.trackIndex });
                }}
                selected={isSelected('track', track.trackIndex)}
                sx={{
                  paddingLeft: `16px`,
                  paddingY: 0.25,
                  minHeight: 28,
                  color: '#cccccc',
                  '&amp;:hover': {
                    backgroundColor: '#37373d',
                  },
                  '&amp;.Mui-selected': {
                    backgroundColor: '#37373d',
                    '&amp;:hover': {
                      backgroundColor: '#37373d',
                    },
                  },
                }}
              &gt;
                &lt;ListItemIcon sx={{ minWidth: 24, color: '#519aba' }}&gt;
                  &lt;InsertDriveFile sx={{ fontSize: 16 }} /&gt;
                &lt;/ListItemIcon&gt;
                &lt;ListItemText
                  primary={`[轨道] ${track.trackName}`}
                  primaryTypographyProps={{ fontSize: '0.75rem' }}
                /&gt;
              &lt;/ListItemButton&gt;
            ))}
          &lt;/&gt;
        )}
      &lt;/List&gt;
      
      {/* 当没有字幕源时显示提示信息 */}
      {importedSubtitleFiles.length === 0 &amp;&amp; subtitleTracks.length === 0 &amp;&amp; (
        &lt;Box sx={{ p: 2, textAlign: 'center', color: '#888888' }}&gt;
          &lt;Typography variant="body2"&gt;
            暂无字幕源
          &lt;/Typography&gt;
          &lt;Typography variant="caption" sx={{ mt: 1, display: 'block' }}&gt;
            点击上方按钮导入SRT文件或刷新时间线轨道
          &lt;/Typography&gt;
        &lt;/Box&gt;
      )}
      
      {/* 导入结果提示 */}
      &lt;Snackbar
        open={snackbarOpen}
        autoHideDuration={6000}
        onClose={handleSnackbarClose}
        anchorOrigin={{ vertical: 'bottom', horizontal: 'center' }}
      &gt;
        &lt;Alert
          onClose={handleSnackbarClose}
          severity={snackbarSeverity}
          variant="filled"
          sx={{ width: '100%' }}
        &gt;
          {snackbarMessage}
        &lt;/Alert&gt;
      &lt;/Snackbar&gt;
    &lt;/Paper&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\JumpModeSelector.tsx" size="3778" modified_time="2025-08-07T13:39:00.762850" mime_type="application/octet-stream" content_type="text">
    <content>import { useState } from 'react';
import { Box, Typography, Menu, MenuItem } from '@mui/material';
import { KeyboardArrowDown } from '@mui/icons-material';
import { useUIStore } from '../../stores/useUIStore';
import type { JumpTo } from '../../stores/useUIStore';

const JUMP_MODE_MAP: Record&lt;JumpTo, string&gt; = {
  start: '入点',
  middle: '中点',
  end: '出点',
};

const JUMP_MODE_COLOR_MAP: Record&lt;JumpTo, string&gt; = {
  start: '#4ade80', // Green
  middle: '#facc15', // Yellow
  end: '#f87171',   // Red
};

const JUMP_MODE_ORDER: JumpTo[] = ['start', 'middle', 'end'];

export function JumpModeSelector() {
  const jumpTo = useUIStore((state) =&gt; state.jumpTo);
  const setJumpTo = useUIStore((state) =&gt; state.setJumpTo);
  const [anchorEl, setAnchorEl] = useState&lt;null | HTMLElement&gt;(null);
  const open = Boolean(anchorEl);

  const handleClick = (event: React.MouseEvent&lt;HTMLElement&gt;) =&gt; {
    setAnchorEl(event.currentTarget);
  };

  const handleClose = () =&gt; {
    setAnchorEl(null);
  };

  const handleMenuItemClick = (mode: JumpTo) =&gt; {
    setJumpTo(mode);
    handleClose();
  };

  return (
    &lt;div&gt;
      &lt;Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}&gt;
        &lt;Typography
          variant="caption"
          sx={{ fontSize: '0.6rem', color: '#9ca3af' }}
        &gt;
          播放头跳转:
        &lt;/Typography&gt;
        &lt;Box
          id="jump-mode-button"
          aria-controls={open ? 'jump-mode-menu' : undefined}
          aria-haspopup="true"
          aria-expanded={open ? 'true' : undefined}
          onClick={handleClick}
          sx={{
            display: 'flex',
            alignItems: 'center',
            gap: 0.5,
            cursor: 'pointer',
            backgroundColor: '#313131',
            border: '1px solid #242424',
            paddingX: 1,
            paddingY: 0,
            borderRadius: 1,
            transition: 'background-color 0.2s',
            '&amp;:hover': {
              backgroundColor: '#424242',
            },
          }}
        &gt;
          &lt;Typography
            variant="caption"
            sx={{
              fontSize: '0.6rem',
              fontWeight: 'medium',
              color: JUMP_MODE_COLOR_MAP[jumpTo],
            }}
          &gt;
            {JUMP_MODE_MAP[jumpTo]}
          &lt;/Typography&gt;
          &lt;KeyboardArrowDown sx={{ fontSize: 12, color: '#9ca3af' }} /&gt;
        &lt;/Box&gt;
      &lt;/Box&gt;
      &lt;Menu
        id="jump-mode-menu"
        anchorEl={anchorEl}
        open={open}
        onClose={handleClose}
        MenuListProps={{
          'aria-labelledby': 'jump-mode-button',
        }}
        PaperProps={{
          sx: {
            backgroundColor: '#3c3c3c',
            color: '#cccccc',
            border: '1px solid #555',
          },
        }}
      &gt;
        {JUMP_MODE_ORDER.map((mode) =&gt; (
          &lt;MenuItem
            key={mode}
            selected={mode === jumpTo}
            onClick={() =&gt; handleMenuItemClick(mode)}
            sx={{
              fontSize: '0.8rem',
              minWidth: 60,
              display: 'flex',
              justifyContent: 'center',
              color: JUMP_MODE_COLOR_MAP[mode],
              '&amp;.Mui-selected': {
                fontWeight: 'bold',
                backgroundColor: 'rgba(255, 255, 255, 0.1)',
                '&amp;:hover': {
                  backgroundColor: 'rgba(255, 255, 255, 0.15)',
                },
              },
              '&amp;:hover': {
                backgroundColor: 'rgba(255, 255, 255, 0.08)',
              },
            }}
          &gt;
            {JUMP_MODE_MAP[mode]}
          &lt;/MenuItem&gt;
        ))}
      &lt;/Menu&gt;
    &lt;/div&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\MainLayout.tsx" size="13551" modified_time="2025-08-12T12:45:15.216050" mime_type="application/octet-stream" content_type="text">
    <content>import { useState, useCallback, useRef, useEffect } from 'react';
import { Box, Paper, Typography, Button } from '@mui/material';
import { Download, Send } from 'lucide-react';
import { ThemeProvider } from './ThemeProvider';
import { ActivityBar } from './ActivityBar';
import { FileExplorer } from './FileExplorer';
import { OptimizerSidebar } from './OptimizerSidebar';
import { SubtitleEditorPage } from '../../pages/SubtitleEditorPage';
import { StatusBar } from './StatusBar';
import { TitleBar } from './TitleBar';
import FindReplace from '../FindReplace';
import SearchResults from '../SearchResults';
import { useFindReplace } from '../../hooks/useFindReplace';
import { Subtitle } from '../../types';
import { useUIStore } from '../../stores/useUIStore';
import { useDataStore } from '../../stores/useDataStore';
import useNotifier from '../../hooks/useNotifier';

export function MainLayout() {
  const notify = useNotifier();
  const {
    activeView,
    setActiveView,
    sidebarWidth,
    isSidebarOpen,
    setSidebarWidth,
    activeTrackIndex,
    setActiveTrackIndex,
    setSelectedSubtitleId,
  } = useUIStore();
  const {
    setSubtitles,
    setFrameRate,
    setConnectionStatus,
    setErrorMessage,
    setProjectInfo,
    setSubtitleTracks,
    handleExport,
    handleExportToDavinci,
    subtitles,
    errorMessage: currentErrorMessage,
  } = useDataStore();

  const [loading, setLoading] = useState(false);
  const [jumpToSubtitleId, setJumpToSubtitleId] = useState&lt;number | null&gt;(null);
  const abortControllerRef = useRef&lt;AbortController | null&gt;(null);

  const fetchSubtitles = useCallback(async (trackIndex: number = 1) =&gt; {
    if (abortControllerRef.current) {
      abortControllerRef.current.abort();
    }
    abortControllerRef.current = new AbortController();
    const signal = abortControllerRef.current.signal;

    setLoading(true);
    setConnectionStatus("connecting");
    setErrorMessage(null);
    try {
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/v1/subtitles?track_index=${trackIndex}`, { signal });
      const data = await response.json();

      if (response.ok &amp;&amp; data.status === "success") {
        const subtitlesWithDiffs = data.data.map((sub: any) =&gt; ({
          ...sub,
          originalText: sub.text,
          diffs: [{ type: "normal", value: sub.text }],
        }));
        setSubtitles(subtitlesWithDiffs);
        setFrameRate(data.frameRate);
        setConnectionStatus("connected");
      } else {
        const errorPayload = {
          message: data.message || "获取字幕失败",
          code: data.code,
        };
        setErrorMessage(errorPayload);
        throw new Error(errorPayload.message);
      }
    } catch (error: any) {
      if (error.name === 'AbortError') {
        console.log('Fetch aborted');
        return;
      }
      setConnectionStatus("error");
      if (!currentErrorMessage) {
        setErrorMessage({
          message: error.message || "无法连接到后端服务，请检查服务是否正在运行。",
        });
      }
      setSubtitles([]);
    } finally {
      setLoading(false);
    }
  }, [setSubtitles, setFrameRate, setConnectionStatus, setErrorMessage]);

  const fetchProjectInfo = useCallback(async () =&gt; {
    try {
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/v1/project-info`);
      const result = await response.json();

      if (response.ok &amp;&amp; result.status === 'success') {
        setProjectInfo(result.data);
      } else {
        // Don't throw an error, just log it, as this is non-critical info
        console.error(result.message || '获取项目信息失败');
        setProjectInfo({ projectName: 'N/A', timelineName: 'N/A' });
      }
    } catch (error) {
      console.error('Failed to fetch project info:', error);
      setProjectInfo({ projectName: 'N/A', timelineName: 'N/A' });
    }
  }, [setProjectInfo]);

  const fetchSubtitleTracks = useCallback(async () =&gt; {
    setLoading(true);
    setErrorMessage(null);
    setConnectionStatus("connecting");
    try {
      const response = await fetch(`${import.meta.env.VITE_API_BASE_URL}/api/v1/timeline/subtitle_tracks`);
      const data = await response.json();
      if (response.ok &amp;&amp; data.status === "success") {
        setSubtitleTracks(data.data);
        if (data.data.length &gt; 0) {
          const firstTrackIndex = data.data[0].track_index;
          setActiveTrackIndex(firstTrackIndex);
          // The useEffect hook will trigger fetchSubtitles when activeTrackIndex is set.
          // We only need to fetch non-critical project info here.
          await fetchProjectInfo();
        } else {
          // No tracks, but still connected
          setConnectionStatus("connected");
          setSubtitles([]);
          setActiveTrackIndex(null);
        }
      } else {
        const errorPayload = {
          message: data.message || "获取字幕轨道失败",
          code: data.code,
        };
        setErrorMessage(errorPayload);
        throw new Error(errorPayload.message);
      }
    } catch (error: any) {
      if (!currentErrorMessage) {
        setErrorMessage({ message: error.message || "无法获取字幕轨道" });
      }
      setConnectionStatus("error");
      setSubtitles([]);
    } finally {
      setLoading(false);
    }
  }, [setErrorMessage, setConnectionStatus, setSubtitleTracks, setActiveTrackIndex, fetchProjectInfo, setSubtitles, currentErrorMessage]);

  useEffect(() =&gt; {
    if (activeTrackIndex !== null) {
      fetchSubtitles(activeTrackIndex);
    }
    // We don't include fetchSubtitles in the dependency array because
    // it's a stable function from useCallback, but including it
    // satisfies the exhaustive-deps lint rule and is good practice.
  }, [activeTrackIndex, fetchSubtitles]);

  const handleTrackSelect = useCallback((trackIndex: number) =&gt; {
    setActiveTrackIndex(trackIndex);
  }, []);

  const handleResultClick = (subtitle: Subtitle) =&gt; {
    setJumpToSubtitleId(subtitle.id);
    // Reset after a short delay to allow for re-clicking the same item
    setTimeout(() =&gt; setJumpToSubtitleId(null), 50);
  };

  const handleRowClick = useCallback((id: number) =&gt; {
    setSelectedSubtitleId(id);
  }, [setSelectedSubtitleId]);

  const {
    searchQuery,
    replaceQuery,
    showReplace,
    matchCase,
    matchWholeWord,
    useRegex,
    handleSearchChange,
    handleReplaceChange,
    toggleShowReplace,
    toggleMatchCase,
    toggleMatchWholeWord,
    toggleUseRegex,
    handleReplaceAll,
    filteredSubtitles,
  } = useFindReplace();
  const isResizing = useRef(false);
  const dragStartInfo = useRef&lt;{ startX: number; startWidth: number } | null&gt;(null);

  const handleMouseDown = useCallback((e: React.MouseEvent) =&gt; {
    e.preventDefault();
    isResizing.current = true;
    dragStartInfo.current = {
      startX: e.clientX,
      startWidth: sidebarWidth,
    };
  }, [sidebarWidth]);

  const handleMouseUp = useCallback(() =&gt; {
    isResizing.current = false;
    dragStartInfo.current = null;
  }, []);

  const handleMouseMove = useCallback((e: MouseEvent) =&gt; {
    if (isResizing.current &amp;&amp; dragStartInfo.current) {
      const deltaX = e.clientX - dragStartInfo.current.startX;
      const newWidth = dragStartInfo.current.startWidth + deltaX;

      if (newWidth &gt; 200 &amp;&amp; newWidth &lt; 600) {
        setSidebarWidth(newWidth);
      }
    }
  }, []);

  useEffect(() =&gt; {
    window.addEventListener('mousemove', handleMouseMove);
    window.addEventListener('mouseup', handleMouseUp);

    return () =&gt; {
      window.removeEventListener('mousemove', handleMouseMove);
      window.removeEventListener('mouseup', handleMouseUp);
    };
  }, [handleMouseMove, handleMouseUp]);

  const onExportSRT = async () =&gt; {
    try {
      const srtContent = await handleExport();
      const blob = new Blob([srtContent], {
        type: "text/plain;charset=utf-8",
      });
      const url = URL.createObjectURL(blob);
      const a = document.createElement("a");
      a.href = url;
      a.download = "subtitles.srt";
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      notify.success('SRT导出成功！');
    } catch (error: any) {
      notify.error(error.message || '导出SRT时发生未知错误');
    }
  };

  const onExportToDavinci = async () =&gt; {
    const result = await handleExportToDavinci();
    if (result.success) {
      notify.success(result.message);
    } else {
      notify.error(result.message);
    }
  };

  const renderSidebar = () =&gt; {
    const commonPaperStyles = {
      width: '100%',
      height: '100%',
      backgroundColor: '#252526',
      borderRadius: 0,
      borderRight: '1px solid #3c3c3c',
    };

    switch (activeView) {
      case 'explorer':
        return (
          &lt;FileExplorer
            fetchSubtitleTracks={fetchSubtitleTracks}
            loading={loading}
            onTrackSelect={handleTrackSelect}
          /&gt;
        );
      case 'search':
        return (
          &lt;Paper sx={commonPaperStyles}&gt;
            &lt;Box sx={{ p: 1.5, borderBottom: '1px solid #3c3c3c' }}&gt;
              &lt;Typography variant="h6" sx={{ color: '#cccccc' }}&gt;
                Search
              &lt;/Typography&gt;
            &lt;/Box&gt;
            &lt;Box sx={{ p: 1.5 }}&gt;
              &lt;FindReplace
                searchQuery={searchQuery}
                replaceQuery={replaceQuery}
                showReplace={showReplace}
                matchCase={matchCase}
                matchWholeWord={matchWholeWord}
                useRegex={useRegex}
                onSearchChange={handleSearchChange}
                onReplaceChange={handleReplaceChange}
                onReplaceAll={handleReplaceAll}
                onToggleShowReplace={toggleShowReplace}
                onToggleMatchCase={toggleMatchCase}
                onToggleMatchWholeWord={toggleMatchWholeWord}
                onToggleUseRegex={toggleUseRegex}
              /&gt;
              {searchQuery &amp;&amp; (
                &lt;SearchResults
                  subtitles={filteredSubtitles}
                  onResultClick={handleResultClick}
                /&gt;
              )}
            &lt;/Box&gt;
          &lt;/Paper&gt;
        );
      case 'optimizer':
        return &lt;OptimizerSidebar /&gt;;
      case 'git':
        return (
          &lt;Paper sx={commonPaperStyles}&gt;
            &lt;Box sx={{ p: 1.5, borderBottom: '1px solid #3c3c3c' }}&gt;
              &lt;Typography variant="h6" sx={{ color: '#cccccc' }}&gt;
                Source Control
              &lt;/Typography&gt;
            &lt;/Box&gt;
            &lt;Box sx={{ p: 1.5, display: 'flex', flexDirection: 'column', gap: 2 }}&gt;
              &lt;Button
                variant="contained"
                color="primary"
                onClick={onExportSRT}
                disabled={subtitles.length === 0}
                startIcon={&lt;Download size={16} /&gt;}
              &gt;
                导出SRT
              &lt;/Button&gt;
              &lt;Button
                variant="contained"
                color="primary"
                onClick={onExportToDavinci}
                disabled={subtitles.length === 0}
                startIcon={&lt;Send size={16} /&gt;}
              &gt;
                导出至达芬奇
              &lt;/Button&gt;
            &lt;/Box&gt;
          &lt;/Paper&gt;
        );
      default:
        return null;
    }
  };

  return (
    &lt;ThemeProvider&gt;
      &lt;Box
        sx={{
          height: '100vh',
          display: 'flex',
          flexDirection: 'column',
          backgroundColor: '#1e1e1e',
          color: '#cccccc',
        }}
      &gt;
        {/* Title Bar */}
        &lt;TitleBar /&gt;
        {/* Main Content Area */}
        &lt;Box sx={{ flex: 1, display: 'flex', minHeight: 0 }}&gt;
          {/* Activity Bar */}
          &lt;ActivityBar /&gt;
          
          {/* Sidebar */}
          &lt;Box
            sx={{
              width: isSidebarOpen ? sidebarWidth : 0,
              height: '100%',
              transition: 'width 0.3s ease-in-out',
              overflow: 'hidden',
            }}
          &gt;
            {renderSidebar()}
          &lt;/Box&gt;

          {/* Resizer */}
          {isSidebarOpen &amp;&amp; (
            &lt;Box
              onMouseDown={handleMouseDown}
              sx={{
                width: '1px',
                cursor: 'col-resize',
                backgroundColor: 'transparent',
                height: '100%',
                transition: 'background-color 0.2s ease-in-out, width 0.2s ease-in-out',
                '&amp;:hover': {
                  backgroundColor: '#007acc',
                  width: '3px',
                  transform: 'translateX(-1px)'
                },
              }}
            /&gt;
          )}
          
          {/* Editor Area */}
          &lt;Box sx={{ flex: 1, display: 'flex', flexDirection: 'column' }}&gt;
            &lt;SubtitleEditorPage
              jumpToSubtitleId={jumpToSubtitleId}
              onRowClick={handleRowClick}
            /&gt;
          &lt;/Box&gt;
        &lt;/Box&gt;

        {/* Status Bar */}
        &lt;StatusBar /&gt;
      &lt;/Box&gt;
    &lt;/ThemeProvider&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\OptimizerSidebar.tsx" size="1061" modified_time="2025-08-12T12:47:49.522285" mime_type="application/octet-stream" content_type="text">
    <content>import {
  Box,
  Typography,
  Accordion,
  AccordionSummary,
  AccordionDetails,
} from '@mui/material';
import { ChevronDown } from 'lucide-react';
import { FillerWordRemover } from '../FillerWordRemover';

export function OptimizerSidebar() {
  return (
    &lt;Box sx={{ p: 1, height: '100%', color: '#cccccc', backgroundColor: '#252526' }}&gt;
      &lt;Box sx={{ p: 1.5, borderBottom: '1px solid #3c3c3c', mb: 1 }}&gt;
        &lt;Typography variant="h6" sx={{ color: '#cccccc' }}&gt;
          Optimizer
        &lt;/Typography&gt;
      &lt;/Box&gt;
      &lt;Accordion defaultExpanded sx={{ backgroundColor: '#2c2c2c', color: '#cccccc' }}&gt;
        &lt;AccordionSummary
          expandIcon={&lt;ChevronDown size={18} /&gt;}
          sx={{
            '&amp; .MuiAccordionSummary-content': {
              fontWeight: 'bold',
            },
          }}
        &gt;
          &lt;Typography&gt;Simple Mode&lt;/Typography&gt;
        &lt;/AccordionSummary&gt;
        &lt;AccordionDetails&gt;
          &lt;FillerWordRemover /&gt;
        &lt;/AccordionDetails&gt;
      &lt;/Accordion&gt;
    &lt;/Box&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\StatusBar.tsx" size="3109" modified_time="2025-08-07T13:39:00.763850" mime_type="application/octet-stream" content_type="text">
    <content>import { Box, Typography, Paper } from '@mui/material';
import { Circle } from 'lucide-react';
import { useMemo } from 'react';

import { useDataStore } from '../../stores/useDataStore';
import { useUIStore } from '../../stores/useUIStore';
import { JumpModeSelector } from './JumpModeSelector';

export function StatusBar() {
  const selectedSubtitleId = useUIStore((state) =&gt; state.selectedSubtitleId);
  const {
    connectionStatus,
    errorMessage,
    subtitles,
    projectInfo,
  } = useDataStore();

  const statusConfig = {
    connected: { label: '已连接', color: 'success', iconColor: '#4ade80' },
    connecting: { label: '连接中...', color: 'warning', iconColor: '#fde047' },
    error: { label: `错误: ${errorMessage}`, color: 'error', iconColor: '#f87171' },
    disconnected: { label: '等待连接...', color: 'default', iconColor: '#9ca3af' },
  } as const;

  const { label, iconColor } = statusConfig[connectionStatus];
  const [totalChars, originalChars] = useMemo(() =&gt; {
    const total = subtitles.reduce((acc, s) =&gt; acc + s.text.length, 0);
    const original = subtitles.reduce((acc, s) =&gt; acc + s.originalText.length, 0);
    return [total, original];
  }, [subtitles]);
  const selectedStartTimecode = useMemo(() =&gt; {
    return subtitles.find(s =&gt; s.id === selectedSubtitleId)?.startTimecode ?? 'N/A';
  }, [subtitles, selectedSubtitleId]);

  return (
    &lt;Paper
      sx={{
        height: 24,
        backgroundColor: '#252526',
        color: '#cccccc',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingX: 1.5,
        borderRadius: 0,
        borderTop: '1px solid #3c3c3c',
      }}
    &gt;
      &lt;Box sx={{ display: 'flex', alignItems: 'center', gap: 2, flex: 1 }}&gt;
        &lt;Box sx={{ display: 'flex', alignItems: 'center', gap: 0.5 }}&gt;
          &lt;Circle size={8} color={iconColor} /&gt;
          &lt;Typography variant="caption" sx={{ fontSize: '0.6rem' }}&gt;
            {label}
          &lt;/Typography&gt;
        &lt;/Box&gt;
        &lt;Typography variant="caption" sx={{ fontSize: '0.6rem' }}&gt;
          Project: {projectInfo?.projectName || 'N/A'}
        &lt;/Typography&gt;
        &lt;Typography variant="caption" sx={{ fontSize: '0.6rem' }}&gt;
          Timeline: {projectInfo?.timelineName || 'N/A'}
        &lt;/Typography&gt;
      &lt;/Box&gt;

      &lt;Box
        sx={{
          display: 'flex',
          justifyContent: 'center',
        }}
      &gt;
        &lt;JumpModeSelector /&gt;
      &lt;/Box&gt;

      &lt;Box sx={{ display: 'flex', alignItems: 'center', justifyContent: 'flex-end', gap: 2, flex: 1 }}&gt;
        &lt;Typography variant="caption" sx={{ fontSize: '0.6rem' }}&gt;
          Total Chars: {totalChars} ({originalChars})
        &lt;/Typography&gt;
        &lt;Typography variant="caption" sx={{ fontSize: '0.6rem' }}&gt;
          Selected: {selectedSubtitleId ?? 'N/A'}
        &lt;/Typography&gt;
        &lt;Typography variant="caption" sx={{ fontSize: '0.6rem' }}&gt;
          Timecode: {selectedStartTimecode}
        &lt;/Typography&gt;
      &lt;/Box&gt;
    &lt;/Paper&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\ThemeProvider.tsx" size="1653" modified_time="2025-08-07T13:39:00.764351" mime_type="application/octet-stream" content_type="text">
    <content>import { createTheme, ThemeProvider as MuiThemeProvider } from '@mui/material/styles';
import { CssBaseline } from '@mui/material';
import { ReactNode } from 'react';

const theme = createTheme({
  palette: {
    mode: 'dark',
    background: {
      default: '#1e1e1e',
      paper: '#252526',
    },
    text: {
      primary: '#cccccc',
      secondary: '#969696',
    },
    primary: {
      main: '#007acc',
      contrastText: '#ffffff',
    },
    secondary: {
      main: '#37373d',
    },
    divider: '#3c3c3c',
    action: {
      hover: '#37373d',
      selected: '#37373d',
    },
  },
  typography: {
    fontSize: 12,
    fontFamily: '"Segoe UI", Tahoma, Geneva, Verdana, sans-serif',
    h6: {
      fontSize: '0.75rem',
      textTransform: 'uppercase',
      letterSpacing: '0.05em',
      fontWeight: 400,
    },
  },
  components: {
    MuiCssBaseline: {
      styleOverrides: {
        body: {
          backgroundColor: '#1e1e1e',
          color: '#cccccc',
          fontSize: '12px',
        },
      },
    },
    MuiButton: {
      styleOverrides: {
        root: {
          textTransform: 'none',
          minWidth: 'auto',
          padding: '8px',
        },
      },
    },
    MuiPaper: {
      styleOverrides: {
        root: {
          backgroundImage: 'none',
        },
      },
    },
  },
});

interface ThemeProviderProps {
  children: ReactNode;
}

export function ThemeProvider({ children }: ThemeProviderProps) {
  return (
    &lt;MuiThemeProvider theme={theme}&gt;
      &lt;CssBaseline /&gt;
      {children}
    &lt;/MuiThemeProvider&gt;
  );
}</content>
  </file>
  <file path="src\components\layout\TitleBar.tsx" size="4790" modified_time="2025-08-07T13:39:00.764850" mime_type="application/octet-stream" content_type="text">
    <content>import { Box, IconButton } from '@mui/material';
import {
  PushPin,
  PushPinOutlined,
  Minimize,
  CropSquare,
  Close,
  FilterNone,
} from '@mui/icons-material';
import { useState, useCallback, useEffect } from 'react';
import { getCurrentWindow } from '@tauri-apps/api/window';

export function TitleBar() {
  const [isAlwaysOnTop, setIsAlwaysOnTop] = useState(false);
  const [isMaximized, setIsMaximized] = useState(false);

  useEffect(() =&gt; {
    const updateMaximizeState = async () =&gt; {
      try {
        const window = getCurrentWindow();
        const maximized = await window.isMaximized();
        setIsMaximized(maximized);
      } catch (error) {
        console.error('Failed to update maximize state:', error);
      }
    };

    updateMaximizeState();

    const unlistenPromise = getCurrentWindow().onResized(() =&gt; {
      updateMaximizeState();
    });

    return () =&gt; {
      unlistenPromise.then((f: () =&gt; void) =&gt; {
        f();
      }).catch((error: any) =&gt; {
        console.error('Failed to setup resize listener:', error);
      });
    };
  }, []);

  const toggleAlwaysOnTop = useCallback(async () =&gt; {
    try {
      const window = getCurrentWindow();
      const newIsAlwaysOnTop = !isAlwaysOnTop;
      await window.setAlwaysOnTop(newIsAlwaysOnTop);
      setIsAlwaysOnTop(newIsAlwaysOnTop);
    } catch (error) {
      console.error('Failed to toggle always on top:', error);
    }
  }, [isAlwaysOnTop]);

  const minimizeWindow = useCallback(() =&gt; {
    try {
      const window = getCurrentWindow();
      window.minimize().catch((err: any) =&gt; console.error('Failed to minimize window:', err));
    } catch (error) {
      console.error('Failed to get window for minimize:', error);
    }
  }, []);

  const toggleMaximize = useCallback(async () =&gt; {
    try {
      const window = getCurrentWindow();
      const isMaximized = await window.isMaximized();
      if (isMaximized) {
        await window.unmaximize();
      } else {
        await window.maximize();
      }
    } catch (error) {
      console.error('Failed to toggle maximize:', error);
    }
  }, []);

  const closeWindow = useCallback(() =&gt; {
    try {
      const window = getCurrentWindow();
      window.close().catch((err: any) =&gt; console.error('Failed to close window:', err));
    } catch (error) {
      console.error('Failed to get window for close:', error);
    }
  }, []);

  return (
    &lt;Box
      sx={{
        height: 30,
        backgroundColor: '#252526',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'space-between',
        paddingLeft: 1,
        userSelect: 'none',
        borderBottom: '1px solid #3c3c3c',
      }}
    &gt;
      &lt;Box data-tauri-drag-region sx={{ flexGrow: 1, height: '100%' }} /&gt;
      &lt;Box sx={{ display: 'flex', alignItems: 'center' }}&gt;
        &lt;IconButton
          size="small"
          onClick={toggleAlwaysOnTop}
          sx={{
            color: '#cccccc',
            width: 46,
            height: 30,
            borderRadius: 0,
            '&amp;:hover': {
              backgroundColor: 'rgba(255, 255, 255, 0.1)'
            },
          }}
        &gt;
          {isAlwaysOnTop ? &lt;PushPin sx={{ fontSize: '1rem', transform: 'rotate(45deg)', transition: 'transform 0.2s ease' }} /&gt; : &lt;PushPinOutlined sx={{ fontSize: '1rem', transition: 'transform 0.2s ease' }} /&gt;}
        &lt;/IconButton&gt;
        &lt;IconButton
          size="small"
          onClick={minimizeWindow}
          sx={{
            color: '#cccccc',
            width: 46,
            height: 30,
            borderRadius: 0,
            '&amp;:hover': {
              backgroundColor: 'rgba(255, 255, 255, 0.1)'
            },
          }}
        &gt;
          &lt;Minimize sx={{ fontSize: '1rem' }} /&gt;
        &lt;/IconButton&gt;
        &lt;IconButton
          size="small"
          onClick={toggleMaximize}
          sx={{
            color: '#cccccc',
            width: 46,
            height: 30,
            borderRadius: 0,
            '&amp;:hover': {
              backgroundColor: 'rgba(255, 255, 255, 0.1)'
            },
          }}
        &gt;
          {isMaximized ? &lt;FilterNone sx={{ fontSize: '1rem' }} /&gt; : &lt;CropSquare sx={{ fontSize: '1rem' }} /&gt;}
        &lt;/IconButton&gt;
        &lt;IconButton
          size="small"
          onClick={closeWindow}
          sx={{
            color: '#cccccc',
            width: 46,
            height: 30,
            borderRadius: 0,
            '&amp;:hover': {
              backgroundColor: '#E81123'
            },
          }}
        &gt;
          &lt;Close sx={{ fontSize: '1rem' }} /&gt;
        &lt;/IconButton&gt;
      &lt;/Box&gt;
    &lt;/Box&gt;
  );
}</content>
  </file>
  <file path="src\hooks\useFindReplace.test.tsx" size="7742" modified_time="2025-08-07T13:39:00.765351" mime_type="application/octet-stream" content_type="text">
    <content>import { renderHook, act } from '@testing-library/react';
import { useFindReplace } from './useFindReplace';
import { Subtitle } from '../types';
import { vi } from 'vitest';
import { render, screen, fireEvent, waitFor } from '@testing-library/react';
import App from '../App';
import React from 'react';

const mockInitialSubtitles: Subtitle[] = [
  { id: 1, startTimecode: '00:00:00,000', endTimecode: '00:00:01,000', text: 'Hello world, this is a test.', originalText: 'Hello world, this is a test.', diffs: [] },
  { id: 2, startTimecode: '00:00:01,000', endTimecode: '00:00:02,000', text: 'Another TEST subtitle.', originalText: 'Another TEST subtitle.', diffs: [] },
  { id: 3, startTimecode: '00:00:02,000', endTimecode: '00:00:03,000', text: 'And a third one for testing.', originalText: 'And a third one for testing.', diffs: [] },
  { id: 4, startTimecode: '00:00:03,000', endTimecode: '00:00:04,000', text: 'The word test should be found.', originalText: 'The word test should be found.', diffs: [] },
];

const mockAppSubtitles: Subtitle[] = [
  { id: 1, startTimecode: '00:00:00,000', endTimecode: '00:00:01,000', text: 'Hello world, this is a original.', originalText: 'Hello world, this is a original.', diffs: [] },
  { id: 2, startTimecode: '00:00:01,000', endTimecode: '00:00:02,000', text: 'Another ORIGINAL subtitle.', originalText: 'Another ORIGINAL subtitle.', diffs: [] },
  { id: 3, startTimecode: '00:00:02,000', endTimecode: '00:00:03,000', text: 'And a third one for testing.', originalText: 'And a third one for testing.', diffs: [] },
  { id: 4, startTimecode: '00:00:03,000', endTimecode: '00:00:04,000', text: 'The word original should be found.', originalText: 'The word original should be found.', diffs: [] },
];


// Mock fetch for App integration test
vi.stubGlobal('fetch', vi.fn(() =&gt;
  Promise.resolve({
    ok: true,
    json: () =&gt; Promise.resolve({
      status: 'success',
      data: mockAppSubtitles,
      frameRate: 24,
    }),
  } as Response)
));


describe('useFindReplace Hook and App Integration', () =&gt; {
  it('should return all subtitles when search query is empty', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    expect(result.current.filteredSubtitles).toEqual(mockInitialSubtitles);
  });

  it('should filter subtitles based on search query (case-insensitive)', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    act(() =&gt; {
      result.current.handleSearchChange({ target: { value: 'test' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
    });

    // Case-insensitive search for 'test' should find "test", "TEST", and "testing".
    expect(result.current.filteredSubtitles).toHaveLength(4);
    expect(result.current.filteredSubtitles.map(s =&gt; s.id)).toEqual();
  });

  it('should filter subtitles with match case enabled', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    act(() =&gt; {
      result.current.handleSearchChange({ target: { value: 'test' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
    });
    
    act(() =&gt; {
      result.current.toggleMatchCase();
    });
    
    // Case-sensitive search for 'test' should find "test" and "testing", but not "TEST".
    expect(result.current.filteredSubtitles).toHaveLength(3);
    expect(result.current.filteredSubtitles.map(s =&gt; s.id)).toEqual();
  });

  it('should filter subtitles with match whole word enabled', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    act(() =&gt; {
      result.current.handleSearchChange({ target: { value: 'TEST' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
    });

    act(() =&gt; {
      result.current.toggleMatchWholeWord();
    });

    // Case-insensitive, whole-word search for 'TEST' should find "test" and "TEST" but not "testing".
    expect(result.current.filteredSubtitles).toHaveLength(3);
    expect(result.current.filteredSubtitles.map(s =&gt; s.id)).toEqual();
  });

  it('should filter subtitles with regex enabled', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    act(() =&gt; {
      result.current.toggleUseRegex();
      // This regex should find "test" or "third"
      result.current.handleSearchChange({ target: { value: 'test|third' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
    });

    expect(result.current.filteredSubtitles).toHaveLength(4);
    expect(result.current.filteredSubtitles.map(s =&gt; s.id)).toEqual();
  });

  it('should handle invalid regex gracefully', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    act(() =&gt; {
      result.current.toggleUseRegex();
      // Invalid regex with an unclosed parenthesis
      result.current.handleSearchChange({ target: { value: 'test(' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
    });

    // Should not crash and should return the original array
    expect(result.current.filteredSubtitles).toEqual(mockInitialSubtitles);
  });

  it('should replace all occurrences when handleReplaceAll is called', () =&gt; {
    const setSubtitles = vi.fn();
    const { result } = renderHook(() =&gt; useFindReplace({ subtitles: mockInitialSubtitles, setSubtitles }));

    act(() =&gt; {
      result.current.handleSearchChange({ target: { value: 'test' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
      result.current.handleReplaceChange({ target: { value: 'REPLACED' } } as React.ChangeEvent&lt;HTMLInputElement&gt;);
    });

    act(() =&gt; {
      result.current.handleReplaceAll();
    });

    expect(setSubtitles).toHaveBeenCalledTimes(1);
    expect(setSubtitles).toHaveBeenCalledWith(expect.any(Function));
  });

  it('should update the UI correctly when handleReplaceAll is called', async () =&gt; {
    render(&lt;App /&gt;);

    // 1. Wait for subtitles to be loaded
    await waitFor(() =&gt; {
      expect(screen.getByText('Hello world, this is a original.')).toBeInTheDocument();
    });

    // 2. Show the find/replace inputs
    const findReplaceButton = screen.getByRole('button', { name: /find/i });
    fireEvent.click(findReplaceButton);
    
    // 3. Simulate user input for find and replace
    const findInput = screen.getByPlaceholderText('Find');
    const replaceInput = screen.getByPlaceholderText('Replace');
    
    act(() =&gt; {
      fireEvent.change(findInput, { target: { value: 'original' } });
      fireEvent.change(replaceInput, { target: { value: 'replaced' } });
    });

    // 4. Simulate clicking the "Replace All" button
    const replaceAllButton = screen.getByRole('button', { name: 'Replace All' });
    act(() =&gt; {
      fireEvent.click(replaceAllButton);
    });

    // 5. Assert that the subtitles in the UI have been updated
    await waitFor(() =&gt; {
      expect(screen.getByText('Hello world, this is a replaced.')).toBeInTheDocument();
      expect(screen.getByText('Another ORIGINAL subtitle.')).toBeInTheDocument(); // This should not be replaced due to case
      expect(screen.getByText('The word replaced should be found.')).toBeInTheDocument();
      // This one should not change
      expect(screen.getByText('And a third one for testing.')).toBeInTheDocument();
    });
  });
});</content>
  </file>
  <file path="src\hooks\useFindReplace.ts" size="3471" modified_time="2025-08-07T13:39:00.765851" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { useState, useCallback, useMemo } from 'react';
import { calculateDiff } from '../utils/diff';
import { useDataStore } from '../stores/useDataStore';

export const useFindReplace = () =&gt; {
  const subtitles = useDataStore((state) =&gt; state.subtitles);
  const setSubtitles = useDataStore((state) =&gt; state.setSubtitles);
  const [searchQuery, setSearchQuery] = useState('');
  const [replaceQuery, setReplaceQuery] = useState('');
  const [showReplace, setShowReplace] = useState(false);
  const [matchCase, setMatchCase] = useState(false);
  const [matchWholeWord, setMatchWholeWord] = useState(false);
  const [useRegex, setUseRegex] = useState(false);

const buildRegex = (searchQuery: string, useRegex: boolean, matchCase: boolean, matchWholeWord: boolean): RegExp | null =&gt; {
 if (!searchQuery) return null;

 try {
   const pattern = useRegex ? searchQuery : searchQuery.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&amp;');
   const flags = matchCase ? 'g' : 'gi';
   const finalPattern = matchWholeWord ? `\\b${pattern}\\b` : pattern;
   return new RegExp(finalPattern, flags);
 } catch (error) {
   console.error("Invalid Regex:", error);
   return null;
 }
};

  const handleSearchChange = useCallback((event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
    setSearchQuery(event.target.value);
  }, []);

  const handleReplaceChange = useCallback((event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
    setReplaceQuery(event.target.value);
  }, []);

  const toggleShowReplace = useCallback(() =&gt; {
    setShowReplace(prev =&gt; !prev);
  }, []);

  const toggleMatchCase = useCallback(() =&gt; setMatchCase(prev =&gt; !prev), []);
  const toggleMatchWholeWord = useCallback(() =&gt; setMatchWholeWord(prev =&gt; !prev), []);
  const toggleUseRegex = useCallback(() =&gt; setUseRegex(prev =&gt; !prev), []);

  const filteredSubtitles = useMemo(() =&gt; {
    const regex = buildRegex(searchQuery, useRegex, matchCase, matchWholeWord);
    if (!regex) {
      return subtitles;
    }

    return subtitles.filter(sub =&gt; {
      regex.lastIndex = 0; // Reset for stateful global regex
      return regex.test(sub.text);
    });
  }, [subtitles, searchQuery, matchCase, matchWholeWord, useRegex]);

  const handleReplaceAll = useCallback(() =&gt; {
    const regex = buildRegex(searchQuery, useRegex, matchCase, matchWholeWord);
    if (!regex) return;

    const currentSubtitles = subtitles;
    const updatedSubtitles = currentSubtitles.map(sub =&gt; {
      const currentText = sub.diffs
        .filter(p =&gt; p.type !== 'removed')
        .map(p =&gt; p.value)
        .join('');
      
      regex.lastIndex = 0;
      if (!regex.test(currentText)) {
        return sub;
      }

      const newText = currentText.replace(regex, replaceQuery);
      const finalDiffs = calculateDiff(sub.originalText, newText);

      return {
        ...sub,
        text: newText,
        diffs: finalDiffs,
      };
    });
    setSubtitles(updatedSubtitles);

    setSearchQuery('');
    setReplaceQuery('');
  }, [setSubtitles, searchQuery, replaceQuery, matchCase, matchWholeWord, useRegex, subtitles]);

  return {
    searchQuery,
    replaceQuery,
    showReplace,
    matchCase,
    matchWholeWord,
    useRegex,
    handleSearchChange,
    handleReplaceChange,
    toggleShowReplace,
    toggleMatchCase,
    toggleMatchWholeWord,
    toggleUseRegex,
    handleReplaceAll,
    filteredSubtitles,
  };
};</content>
  </file>
  <file path="src\hooks\useNotifier.ts" size="662" modified_time="2025-08-07T13:39:00.766351" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { useSnackbar } from 'notistack';

const useNotifier = () =&gt; {
    const { enqueueSnackbar } = useSnackbar();

    const notify = {
        success: (message: string) =&gt; {
            enqueueSnackbar(message, { variant: 'success' });
        },
        error: (message: string) =&gt; {
            enqueueSnackbar(message, { variant: 'error' });
        },
        warning: (message: string) =&gt; {
            enqueueSnackbar(message, { variant: 'warning' });
        },
        info: (message: string) =&gt; {
            enqueueSnackbar(message, { variant: 'info' });
        },
    };

    return notify;
};

export default useNotifier;</content>
  </file>
  <file path="src\hooks\useSrtImporter.ts" size="3915" modified_time="2025-08-07T13:39:00.766850" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { useState, useCallback, useRef } from 'react';
import { useDataStore } from '../stores/useDataStore';
import { parseSRTFile, validateSRTContent } from '../utils/srtParser';
import { convertSrtToSubtitles } from '../utils/converter';

/**
 * 自定义Hook，用于封装SRT文件导入逻辑
 * @returns 包含文件导入处理函数、状态和错误处理的对象
 */
export const useSrtImporter = () =&gt; {
  const [isImporting, setIsImporting] = useState(false);
  const [importError, setImportError] = useState&lt;string | null&gt;(null);
  const [snackbarOpen, setSnackbarOpen] = useState(false);
  const [snackbarMessage, setSnackbarMessage] = useState('');
  const [snackbarSeverity, setSnackbarSeverity] = useState&lt;'success' | 'error'&gt;('success');
  
  const fileInputRef = useRef&lt;HTMLInputElement&gt;(null);
  
  // 从状态管理中获取所需的函数
  const setSubtitles = useDataStore((state) =&gt; state.setSubtitles);
  const addImportedSubtitleFile = useDataStore((state) =&gt; state.addImportedSubtitleFile);

  /**
   * 处理文件导入的函数
   * @param event 文件输入变化事件
   */
  const handleFileChange = useCallback(async (event: React.ChangeEvent&lt;HTMLInputElement&gt;) =&gt; {
    const file = event.target.files?.[0];
    if (!file) return;

    setIsImporting(true);
    setImportError(null);

    try {
      // 检查文件类型
      if (!file.name.toLowerCase().endsWith('.srt')) {
        const errorMessage = '请选择SRT格式的文件';
        setImportError(errorMessage);
        setSnackbarMessage(errorMessage);
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
        return;
      }

      const content = await file.text();
      
      // 验证SRT文件内容
      const validation = validateSRTContent(content);
      if (!validation.isValid) {
        const errorMessage = `SRT文件格式错误: ${validation.errors.join(', ')}`;
        setImportError(errorMessage);
        setSnackbarMessage(errorMessage);
        setSnackbarSeverity('error');
        setSnackbarOpen(true);
        return;
      }

      // 解析SRT文件
      const parsedFile = parseSRTFile(content, file.name);
      
      // 将解析后的数据添加到状态管理中
      addImportedSubtitleFile(parsedFile);
      
      // 将SRT字幕条目转换为Subtitle格式并设置到状态中
      const convertedSubtitles = convertSrtToSubtitles(parsedFile.subtitles);
      setSubtitles(convertedSubtitles);
      
      setSnackbarMessage(`成功导入 ${parsedFile.subtitles.length} 条字幕`);
      setSnackbarSeverity('success');
      setSnackbarOpen(true);
    } catch (error) {
      console.error('导入SRT文件时发生错误:', error);
      const errorMessage = '导入SRT文件时发生错误';
      setImportError(errorMessage);
      setSnackbarMessage(errorMessage);
      setSnackbarSeverity('error');
      setSnackbarOpen(true);
    } finally {
      setIsImporting(false);
      
      // 重置文件输入，允许重复选择同一文件
      if (fileInputRef.current) {
        fileInputRef.current.value = '';
      }
    }
  }, [setSubtitles, addImportedSubtitleFile]);

  /**
   * 触发文件选择对话框
   */
  const triggerFileSelect = useCallback(() =&gt; {
    if (fileInputRef.current) {
      fileInputRef.current.click();
    }
  }, []);

  /**
   * 关闭提示消息
   */
  const handleSnackbarClose = useCallback(() =&gt; {
    setSnackbarOpen(false);
  }, []);

  /**
   * 清除错误状态
   */
  const clearError = useCallback(() =&gt; {
    setImportError(null);
  }, []);

  return {
    handleFileChange,
    isImporting,
    importError,
    clearError,
    triggerFileSelect,
    fileInputRef,
    snackbarOpen,
    snackbarMessage,
    snackbarSeverity,
    handleSnackbarClose,
  };
};</content>
  </file>
  <file path="src\hooks\useTimelineNavigation.ts" size="1116" modified_time="2025-08-07T13:39:00.766850" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { useCallback } from 'react';
import useNotifier from './useNotifier';

type JumpTo = "start" | "end" | "middle";

export const useTimelineNavigation = () =&gt; {
  const notify = useNotifier();

  const setTimecode = useCallback(async (
    inPoint: string,
    outPoint: string,
    jumpTo: JumpTo
  ) =&gt; {
    try {
      const response = await fetch(
        `${import.meta.env.VITE_API_URL}/api/v1/timeline/timecode`,
        {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            in_point: inPoint,
            out_point: outPoint,
            jump_to: jumpTo,
          }),
        }
      );

      if (!response.ok) {
        throw new Error('API call failed');
      }

      console.log(
        `Successfully set timecode. In: ${inPoint}, Out: ${outPoint}, Jump: ${jumpTo}`
      );
    } catch (error) {
      console.error("Error setting timecode:", error);
      notify.error(`跳转失败: ${error}`);
    }
  }, [notify]);

  return { setTimecode };
};</content>
  </file>
  <file path="src\pages\SubtitleEditorPage.tsx" size="784" modified_time="2025-08-11T17:11:48.909767" mime_type="application/octet-stream" content_type="text">
    <content>import { useCallback } from "react";
import { Box } from "@mui/material";
import SubtitleTable from "../components/SubtitleTable";
import { useDataStore } from "../stores/useDataStore";

interface SubtitleEditorPageProps {
  jumpToSubtitleId: number | null;
  onRowClick: (id: number) =&gt; void;
}

export function SubtitleEditorPage({
  jumpToSubtitleId,
  onRowClick: onRowClickProp,
}: SubtitleEditorPageProps) {
  const onRowClick = useCallback(onRowClickProp, [onRowClickProp]);
  useDataStore();

  return (
    &lt;Box
      sx={{
        height: '100%',
        display: 'flex',
        flexDirection: 'column',
      }}
    &gt;
      &lt;SubtitleTable
        jumpToSubtitleId={jumpToSubtitleId}
        onRowClick={onRowClick}
      /&gt;
    &lt;/Box&gt;
  );
}</content>
  </file>
  <file path="src\stores\useDataStore.ts" size="11218" modified_time="2025-08-11T17:11:48.911765" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { create } from 'zustand';
import { Subtitle, SubtitleTrack, ProjectInfo, ImportedSubtitleFile, ApiError } from '../types';
import { calculateDiff } from '../utils/diff';

// 创建一个WeakMap来缓存diff计算结果
const diffCache = new WeakMap&lt;Subtitle, Map&lt;string, any&gt;&gt;();

type Status = 'connected' | 'connecting' | 'error' | 'disconnected';

interface UserInfo {
  name: string;
  email: string;
  avatar: string;
}

interface DataState {
  subtitles: Subtitle[];
  subtitleTracks: SubtitleTrack[];
  projectInfo: ProjectInfo | null;
  frameRate: number;
  connectionStatus: Status;
  errorMessage: ApiError | null;
  userInfo: UserInfo | null;
  importedSubtitleFiles: ImportedSubtitleFile[];
  setSubtitles: (subtitles: Subtitle[]) =&gt; void;
  setSubtitleTracks: (tracks: SubtitleTrack[]) =&gt; void;
  setProjectInfo: (info: ProjectInfo | null) =&gt; void;
  setFrameRate: (rate: number) =&gt; void;
  setConnectionStatus: (status: Status) =&gt; void;
  setErrorMessage: (error: ApiError | null) =&gt; void;
  updateSubtitleText: (id: number, newText: string) =&gt; void;
  setUserInfo: (userInfo: UserInfo | null) =&gt; void;
  setImportedSubtitleFiles: (files: ImportedSubtitleFile[]) =&gt; void;
  addImportedSubtitleFile: (file: ImportedSubtitleFile) =&gt; void;
  removeImportedSubtitleFile: (fileName: string) =&gt; void;
  updateImportedSubtitleFile: (fileName: string, updatedFile: ImportedSubtitleFile) =&gt; void;
  clearImportedSubtitleFiles: () =&gt; void;
  handleExport: () =&gt; Promise&lt;string&gt;;
  handleExportToDavinci: () =&gt; Promise&lt;{ success: boolean; message: string; }&gt;;
  getModifiedSubtitleIndices: () =&gt; number[];
}

export const useDataStore = create&lt;DataState&gt;((set, get) =&gt; {
  // 提取公共逻辑到私有函数
  const prepareExportData = () =&gt; {
    const { subtitles, frameRate } = get();
    const subtitlesToExport = subtitles.map(({ id, startTimecode, endTimecode, diffs }) =&gt; ({
      id,
      startTimecode,
      endTimecode,
      diffs,
    }));

    return {
      frameRate: frameRate,
      subtitles: subtitlesToExport,
    };
  };

  return {
    subtitles: [],
    subtitleTracks: [],
    projectInfo: null,
    frameRate: 24,
    connectionStatus: 'disconnected',
    errorMessage: null,
    userInfo: null,
    importedSubtitleFiles: [],
    setSubtitles: (subtitles) =&gt; set({ subtitles }),
    setSubtitleTracks: (tracks) =&gt; {
        const formattedTracks = tracks.map((track: any) =&gt; ({
            trackIndex: track.track_index,
            trackName: track.track_name,
        }));
        set({ subtitleTracks: formattedTracks });
    },
    setProjectInfo: (info) =&gt; set({ projectInfo: info }),
    setFrameRate: (rate) =&gt; set({ frameRate: rate }),
    setConnectionStatus: (status) =&gt; set({ connectionStatus: status }),
    setErrorMessage: (error) =&gt; set({ errorMessage: error }),
    setImportedSubtitleFiles: (files) =&gt; set({ importedSubtitleFiles: files }),
    addImportedSubtitleFile: (file) =&gt; set((state) =&gt; {
        const existingFileIndex = state.importedSubtitleFiles.findIndex(f =&gt; f.fileName === file.fileName);
        const newFiles = [...state.importedSubtitleFiles];
        if (existingFileIndex !== -1) {
            newFiles[existingFileIndex] = file;
        } else {
            newFiles.push(file);
        }
        return { importedSubtitleFiles: newFiles };
    }),
    removeImportedSubtitleFile: (fileName) =&gt; set((state) =&gt; ({
        importedSubtitleFiles: state.importedSubtitleFiles.filter(file =&gt; file.fileName !== fileName)
    })),
    updateImportedSubtitleFile: (fileName, updatedFile) =&gt; set((state) =&gt; ({
        importedSubtitleFiles: state.importedSubtitleFiles.map(file =&gt;
            file.fileName === fileName ? updatedFile : file
        )
    })),
    clearImportedSubtitleFiles: () =&gt; set({ importedSubtitleFiles: [] }),
    updateSubtitleText: (id, newText) =&gt;
        set((state) =&gt; {
            const newSubtitles = state.subtitles.map((sub) =&gt; {
                if (sub.id === id) {
                    const originalText = sub.originalText ?? sub.text;
                    const isModified = originalText !== newText;

                    if (!isModified &amp;&amp; sub.text === newText) {
                        return sub;
                    }
                    
                    let diffs = sub.diffs;
                    if (isModified) {
                        if (!diffCache.has(sub)) {
                            diffCache.set(sub, new Map());
                        }
                        const subCache = diffCache.get(sub)!;
                        const cacheKey = `${originalText}__${newText}`;
                        if (subCache.has(cacheKey)) {
                            diffs = subCache.get(cacheKey);
                        } else {
                            diffs = calculateDiff(originalText, newText);
                            subCache.set(cacheKey, diffs);
                        }
                    }

                    return {
                        ...sub,
                        text: newText,
                        originalText: originalText,
                        diffs: diffs,
                        isModified: isModified,
                    };
                }
                return sub;
            });

            if (state.subtitles !== newSubtitles) {
                return { subtitles: newSubtitles };
            }
            return {};
        }),
    setUserInfo: (userInfo) =&gt; set({ userInfo }),
    handleExport: async (): Promise&lt;string&gt; =&gt; {
        try {
            const requestBody = prepareExportData();

            const response = await fetch(
                `${import.meta.env.VITE_API_BASE_URL}/api/v1/export/srt`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(requestBody),
                }
            );

            if (!response.ok) {
                const errorText = await response.text();
                let errorMessage = "导出失败";
                
                switch (response.status) {
                    case 400:
                        errorMessage = `请求参数错误: ${errorText || "请检查字幕数据格式"}`;
                        break;
                    case 404:
                        errorMessage = "导出接口未找到，请检查后端服务是否正常运行";
                        break;
                    case 500:
                        errorMessage = `服务器内部错误: ${errorText || "请联系开发者"}`;
                        break;
                    default:
                        errorMessage = errorText || `导出失败 (HTTP ${response.status})`;
                }
                
                throw new Error(errorMessage);
            }

            return await response.text();
        } catch (error: any) {
            console.error('导出SRT文件时发生错误:', error);
            
            let errorMessage = '导出SRT文件时发生未知错误';
            if (error instanceof TypeError &amp;&amp; error.message.includes('fetch')) {
                errorMessage = '网络连接失败，请检查后端服务是否正常运行';
            } else if (error.message) {
                errorMessage = error.message;
            }
            
            throw new Error(errorMessage);
        }
    },
    handleExportToDavinci: async () =&gt; {
        const requestBody = prepareExportData();

        try {
            const response = await fetch(
                `${import.meta.env.VITE_API_BASE_URL}/api/v1/export/davinci`,
                {
                    method: "POST",
                    headers: { "Content-Type": "application/json" },
                    body: JSON.stringify(requestBody),
                }
            );

            if (!response.ok) {
                try {
                    const errorData = await response.json();
                    let errorMessage = "导出至达芬奇失败";
                    
                    switch (response.status) {
                        case 400:
                            errorMessage = `请求参数错误: ${errorData.message || "请检查字幕数据格式"}`;
                            break;
                        case 404:
                            errorMessage = "导出至达芬奇接口未找到，请检查后端服务是否正常运行";
                            break;
                        case 500:
                            errorMessage = `服务器内部错误: ${errorData.message || "请联系开发者"}`;
                            break;
                        default:
                            errorMessage = errorData.message || `导出至达芬奇失败 (HTTP ${response.status})`;
                    }
                    
                    throw new Error(errorMessage);
                } catch (parseError) {
                    let errorMessage = "导出至达芬奇失败";
                    
                    switch (response.status) {
                        case 404:
                            errorMessage = "导出至达芬奇接口未找到，请检查后端服务是否正常运行";
                            break;
                        case 500:
                            errorMessage = `服务器内部错误: ${response.statusText || "请联系开发者"}`;
                            break;
                        default:
                            errorMessage = response.statusText || `导出至达芬奇失败 (HTTP ${response.status})`;
                    }
                    
                    throw new Error(errorMessage);
                }
            }

            return { success: true, message: '成功导出至达芬奇！' };
        } catch (error: any) {
            console.error('导出至达芬奇时发生错误:', error);
            
            let errorMessage = '导出至达芬奇时发生未知错误';
            if (error instanceof TypeError &amp;&amp; error.message.includes('fetch')) {
                errorMessage = '网络连接失败，请检查后端服务是否正常运行';
            } else if (error.message) {
                errorMessage = error.message;
            }
            
            return { success: false, message: errorMessage };
        }
    },
    getModifiedSubtitleIndices: (() =&gt; {
        let lastResult: number[] = [];
        return () =&gt; {
            const { subtitles } = get();
            const modifiedIndices: number[] = [];
            subtitles.forEach((subtitle, index) =&gt; {
                if (subtitle.isModified) {
                    modifiedIndices.push(index);
                }
            });

            if (JSON.stringify(lastResult) !== JSON.stringify(modifiedIndices)) {
                lastResult = modifiedIndices;
            }
            
            return lastResult;
        };
    })(),
}});</content>
  </file>
  <file path="src\stores\useSettingsStore.ts" size="1040" modified_time="2025-08-12T16:27:04.960854" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { create } from 'zustand';

interface SettingsState {
  fillerWords: string[];
  loadFillerWords: () =&gt; Promise&lt;void&gt;;
}

export const useSettingsStore = create&lt;SettingsState&gt;((set) =&gt; ({
  fillerWords: [],
  loadFillerWords: async () =&gt; {
    try {
      // Note: In a real app, you might want to fetch this from a static asset endpoint
      // or handle it differently depending on your build process.
      // Using a direct fetch assumes the file is in the public directory or accessible via a route.
      // For this project, we'll assume it's in the root of the `public` folder.
      const response = await fetch('/filler_words.json');
      if (!response.ok) {
        throw new Error('Failed to load filler words');
      }
      const data = await response.json();
      set({ fillerWords: data.words || [] });
    } catch (error) {
      console.error('Error loading filler words:', error);
      // Keep fillerWords as an empty array on failure
      set({ fillerWords: [] });
    }
  },
}));</content>
  </file>
  <file path="src\stores\useUIStore.ts" size="2464" modified_time="2025-08-07T13:39:00.769850" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { create } from 'zustand';
import { persist } from 'zustand/middleware';

export type JumpTo = "start" | "end" | "middle";

interface UIState {
  activeView: string;
  selectedFile: string;
  sidebarWidth: number;
  isSidebarOpen: boolean;
  previousSidebarWidth: number;
  activeTrackIndex: number | null;
  selectedSubtitleId: number | null;
  theme: 'light' | 'dark';
  jumpTo: JumpTo;
  setActiveView: (view: string) =&gt; void;
  setSelectedFile: (file: string) =&gt; void;
  setSidebarWidth: (width: number) =&gt; void;
  toggleSidebar: () =&gt; void;
  setActiveTrackIndex: (index: number | null) =&gt; void;
  setSelectedSubtitleId: (id: number | null) =&gt; void;
  toggleTheme: () =&gt; void;
  setJumpTo: (jumpTo: JumpTo) =&gt; void;
}

export const useUIStore = create&lt;UIState&gt;()(
  persist(
    (set) =&gt; ({
      activeView: 'explorer', // or 'search'
      selectedFile: '',
      sidebarWidth: 250,
      isSidebarOpen: true,
      previousSidebarWidth: 250,
      activeTrackIndex: null,
      selectedSubtitleId: null,
      theme: 'dark', // 默认主题
      jumpTo: 'start',
      setActiveView: (view) =&gt; set({ activeView: view }),
      setSelectedFile: (file) =&gt; set({ selectedFile: file }),
      setSidebarWidth: (width) =&gt; set({ sidebarWidth: width }),
      toggleSidebar: () =&gt;
        set((state) =&gt; {
          if (state.isSidebarOpen) {
            // 如果当前是打开状态，记录当前宽度并关闭
            return {
              isSidebarOpen: false,
              previousSidebarWidth: state.sidebarWidth,
              sidebarWidth: 0,
            };
          } else {
            // 如果当前是关闭状态，恢复之前的宽度并打开
            return {
              isSidebarOpen: true,
              sidebarWidth: state.previousSidebarWidth,
            };
          }
        }),
      setActiveTrackIndex: (index) =&gt; set({ activeTrackIndex: index }),
      setSelectedSubtitleId: (id) =&gt; set({ selectedSubtitleId: id }),
      setJumpTo: (jumpTo) =&gt; set({ jumpTo }),
      toggleTheme: () =&gt;
        set((state) =&gt; ({
          theme: state.theme === 'light' ? 'dark' : 'light',
        })),
    }),
    {
      name: 'ui-storage', // 存储在 localStorage 中的键名
      partialize: (state) =&gt; ({
        isSidebarOpen: state.isSidebarOpen,
        sidebarWidth: state.sidebarWidth,
        theme: state.theme,
      }),
    }
  )
);</content>
  </file>
  <file path="src\utils\converter.ts" size="583" modified_time="2025-08-07T13:39:00.770351" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { SrtSubtitleEntry, Subtitle } from '../types';
import { calculateDiff } from './diff';

/**
 * 将 SRT 字幕条目转换为标准字幕格式
 * @param srtEntries SRT 字幕条目数组
 * @returns 转换后的字幕数组
 */
export const convertSrtToSubtitles = (srtEntries: SrtSubtitleEntry[]): Subtitle[] =&gt; {
  return srtEntries.map((entry) =&gt; ({
    id: entry.id,
    startTimecode: entry.startTimecode,
    endTimecode: entry.endTimecode,
    text: entry.text,
    originalText: entry.text,
    diffs: calculateDiff(entry.text, entry.text),
  }));
};</content>
  </file>
  <file path="src\utils\diff.ts" size="382" modified_time="2025-08-07T13:39:00.770850" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { diffChars } from 'diff';
import { DiffPart } from '../components/DiffHighlighter';

export const calculateDiff = (originalText: string, newText: string): DiffPart[] =&gt; {
  const diffResult = diffChars(originalText, newText);
  return diffResult.map((part) =&gt; ({
    type: part.added ? "added" : part.removed ? "removed" : "normal",
    value: part.value,
  }));
};</content>
  </file>
  <file path="src\utils\srtParser.test.ts" size="3584" modified_time="2025-08-07T13:39:00.771350" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { parseSRTFile, validateSRTContent } from './srtParser';
import { ImportedSubtitleFile } from '../types';

describe('srtParser', () =&gt; {
  describe('parseSRTFile', () =&gt; {
    it('should parse a valid SRT file correctly', () =&gt; {
      const srtContent = `1
00:00:01,000 --&gt; 00:00:04,000
Hello, world!

2
00:00:05,000 --&gt; 00:00:08,000
This is a test subtitle.

3
00:00:09,000 --&gt; 00:00:12,000
Multiple line subtitle
with multiple lines
`;

      const result = parseSRTFile(srtContent, 'test.srt');
      
      expect(result).toEqual({
        fileName: 'test.srt',
        subtitles: [
          {
            id: 1,
            startTimecode: '00:00:01.000',
            endTimecode: '00:00:04.000',
            text: 'Hello, world!'
          },
          {
            id: 2,
            startTimecode: '00:00:05.000',
            endTimecode: '00:00:08.000',
            text: 'This is a test subtitle.'
          },
          {
            id: 3,
            startTimecode: '00:00:09.000',
            endTimecode: '00:00:12.000',
            text: 'Multiple line subtitle\nwith multiple lines'
          }
        ],
        metadata: {
          importedAt: expect.any(String),
          format: 'srt'
        }
      });
    });

    it('should handle SRT files with BOM', () =&gt; {
      const srtContent = `\uFEFF1
00:00:01,000 --&gt; 00:00:04,000
Subtitle with BOM
`;

      const result = parseSRTFile(srtContent, 'bom_test.srt');
      
      expect(result.subtitles).toHaveLength(1);
      expect(result.subtitles[0].text).toBe('Subtitle with BOM');
    });

    it('should handle empty or invalid SRT content gracefully', () =&gt; {
      const emptyResult = parseSRTFile('', 'empty.srt');
      expect(emptyResult.subtitles).toHaveLength(0);
      
      const invalidResult = parseSRTFile('invalid content', 'invalid.srt');
      expect(invalidResult.subtitles).toHaveLength(0);
    });

    it('should handle SRT files with missing sequence numbers', () =&gt; {
      const srtContent = `00:00:01,000 --&gt; 00:00:04,000
Subtitle without sequence number

00:00:05,000 --&gt; 00:00:08,000
Another subtitle
`;

      const result = parseSRTFile(srtContent, 'no_seq.srt');
      
      expect(result.subtitles).toHaveLength(2);
      expect(result.subtitles[0].id).toBe(1);
      expect(result.subtitles[1].id).toBe(2);
    });
  });

  describe('validateSRTContent', () =&gt; {
    it('should validate correct SRT content', () =&gt; {
      const srtContent = `1
00:00:01,000 --&gt; 00:00:04,000
Valid subtitle
`;

      const result = validateSRTContent(srtContent);
      expect(result.isValid).toBe(true);
      expect(result.errors).toHaveLength(0);
    });

    it('should detect invalid SRT content', () =&gt; {
      const result = validateSRTContent('invalid content');
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('文件不包含SRT时间码标记 "--&gt;"');
    });

    it('should detect empty content', () =&gt; {
      const result = validateSRTContent('');
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('文件内容为空');
    });

    it('should detect incorrect timecode format', () =&gt; {
      const srtContent = `1
00:00:01 --&gt; 00:00:04
Invalid timecode format
`;

      const result = validateSRTContent(srtContent);
      expect(result.isValid).toBe(false);
      expect(result.errors).toContain('字幕块 1 时间码格式不正确: "00:00:01 --&gt; 00:00:04"');
    });
  });
});</content>
  </file>
  <file path="src\utils\srtParser.ts" size="4418" modified_time="2025-08-07T13:39:00.771851" mime_type="video/vnd.dlna.mpeg-tts" content_type="text">
    <content>import { ImportedSubtitleFile, SrtSubtitleEntry } from '../types';

/**
 * 解析SRT文件内容
 * @param content SRT文件的文本内容
 * @param fileName 文件名（可选）
 * @returns 解析后的字幕文件对象
 */
export const parseSRTFile = (content: string, fileName: string = 'imported_file.srt'): ImportedSubtitleFile =&gt; {
  // 移除BOM标记（如果存在）
  const cleanContent = content.replace(/^\uFEFF/, '');
  
  // 按双换行符分割字幕块
  const blocks = cleanContent.split(/\n\s*\n/).filter(block =&gt; block.trim() !== '');
  
  const subtitles: SrtSubtitleEntry[] = [];
  
  for (const block of blocks) {
    // 解析每个字幕块
    const lines = block.trim().split('\n');
    
    if (lines.length &lt; 2) {
      // 不完整的字幕块，跳过
      continue;
    }
    
    // 查找时间码行的索引
    let timeCodeLineIndex = -1;
    let textStartLineIndex = -1;
    
    // 遍历行查找时间码
    for (let i = 0; i &lt; lines.length; i++) {
      const line = lines[i].trim();
      if (line.match(/^(\d{2}:\d{2}:\d{2}[,.]\d{3})\s*--&gt;\s*(\d{2}:\d{2}:\d{2}[,.]\d{3})$/)) {
        timeCodeLineIndex = i;
        textStartLineIndex = i + 1;
        break;
      }
    }
    
    // 如果没有找到时间码，跳过这个块
    if (timeCodeLineIndex === -1) {
      continue;
    }
    
    // 解析时间码
    const timeLine = lines[timeCodeLineIndex].trim();
    const timeMatch = timeLine.match(/^(\d{2}:\d{2}:\d{2}[,.]\d{3})\s*--&gt;\s*(\d{2}:\d{2}:\d{2}[,.]\d{3})$/);
    
    if (!timeMatch) {
      // 时间码格式不正确，跳过这个块
      continue;
    }
    
    // 提取时间码（将逗号替换为点号以符合SRT标准）
    const startTimecode = timeMatch[1].replace(',', '.');
    const endTimecode = timeMatch[2].replace(',', '.');
    
    // 剩余的行是字幕文本
    const text = lines.slice(textStartLineIndex).join('\n');
    
    // 生成ID
    const id = subtitles.length + 1;
    
    subtitles.push({
      id,
      startTimecode,
      endTimecode,
      text
    });
  }
  
  // 返回解析后的字幕文件对象
  return {
    fileName,
    subtitles,
    metadata: {
      importedAt: new Date().toISOString(),
      format: 'srt'
    }
  };
};

/**
 * 验证SRT文件内容是否有效
 * @param content SRT文件的文本内容
 * @returns 验证结果
 */
export const validateSRTContent = (content: string): { isValid: boolean; errors: string[] } =&gt; {
  const errors: string[] = [];
  
  // 检查是否为空
  if (!content || content.trim() === '') {
    errors.push('文件内容为空');
    return { isValid: false, errors };
  }
  
  // 移除BOM标记（如果存在）
  const cleanContent = content.replace(/^\uFEFF/, '');
  
  // 检查基本的SRT格式特征
  if (!cleanContent.includes('--&gt;')) {
    errors.push('文件不包含SRT时间码标记 "--&gt;"');
    return { isValid: false, errors };
  }
  
  // 按双换行符分割字幕块
  const blocks = cleanContent.split(/\n\s*\n/).filter(block =&gt; block.trim() !== '');
  
  if (blocks.length === 0) {
    errors.push('文件不包含有效的字幕块');
    return { isValid: false, errors };
  }
  
  // 检查每个块的基本结构
  for (let i = 0; i &lt; blocks.length; i++) {
    const lines = blocks[i].trim().split('\n');
    
    if (lines.length &lt; 2) {
      errors.push(`字幕块 ${i + 1} 结构不完整，至少需要2行`);
      continue;
    }
    
    // 查找时间码行
    let timeLine = '';
    let hasTimecodeFormat = false;
    
    for (const line of lines) {
      const trimmedLine = line.trim();
      // 检查是否包含时间码标记
      if (trimmedLine.includes('--&gt;')) {
        timeLine = trimmedLine;
        // 检查是否符合标准SRT时间码格式（包含毫秒）
        if (trimmedLine.match(/^(\d{2}:\d{2}:\d{2}[,.]\d{3})\s*--&gt;\s*(\d{2}:\d{2}:\d{2}[,.]\d{3})$/)) {
          hasTimecodeFormat = true;
        }
        break;
      }
    }
    
    if (!timeLine) {
      errors.push(`字幕块 ${i + 1} 未找到时间码`);
      continue;
    }
    
    if (!hasTimecodeFormat) {
      errors.push(`字幕块 ${i + 1} 时间码格式不正确: "${timeLine}"`);
    }
  }
  
  return { isValid: errors.length === 0, errors };
};</content>
  </file>
  <file path="src-tauri\build.rs" size="42" modified_time="2025-08-07T13:39:00.747352" mime_type="application/octet-stream" content_type="text">
    <content>fn main() {
    tauri_build::build()
}
</content>
  </file>
  <file path="src-tauri\Cargo.toml" size="724" modified_time="2025-08-12T13:02:50.837620" mime_type="application/octet-stream" content_type="text">
    <content>[package]
name = "synapse"
version = "0.1.0"
description = "A Tauri App"
authors = ["you"]
edition = "2021"

# See more keys and their definitions at https://doc.rust-lang.org/cargo/reference/manifest.html

[lib]
# The `_lib` suffix may seem redundant but it is necessary
# to make the lib name unique and wouldn't conflict with the bin name.
# This seems to be only an issue on Windows, see https://github.com/rust-lang/cargo/issues/8519
name = "synapse_lib"
crate-type = ["staticlib", "cdylib", "rlib"]

[build-dependencies]
tauri-build = { version = "2", features = [] }

[dependencies]
tauri = { version = "2", features = [] }
tauri-plugin-opener = "2"
serde = { version = "1", features = ["derive"] }
serde_json = "1"

</content>
  </file>
  <file path="src-tauri\tauri.conf.json" size="1038" modified_time="2025-08-07T13:39:00.755851" mime_type="application/json" content_type="text">
    <content>{
  "$schema": "https://schema.tauri.app/config/2",
  "productName": "synapse",
  "version": "0.1.0",
  "identifier": "com.synapse.app",
  "build": {
    "beforeDevCommand": "npm run dev",
    "devUrl": "http://localhost:1420",
    "beforeBuildCommand": "npm run build",
    "frontendDist": "../dist"
  },
  "plugins": {
    "sidecar": {
      "allowed": true,
      "script": [
        "python",
        "-m",
        "uvicorn",
        "main:app",
        "--host",
        "127.0.0.1",
        "--port",
        "8000"
      ],
      "cwd": "../../../backend"
    }
  },
  "app": {
    "windows": [
      {
        "title": "synapse",
        "width": 800,
        "height": 600,
        "decorations": false
      }
    ],
    "security": {
      "csp": null
    }
  },
  "bundle": {
    "active": true,
    "targets": "all",
    "icon": [
      "icons/32x32.png",
      "icons/128x128.png",
      "icons/128x128@2x.png",
      "icons/icon.icns",
      "icons/icon.ico"
    ]
  }
}
</content>
  </file>
  <file path="src-tauri\capabilities\default.json" size="493" modified_time="2025-08-07T13:39:00.747851" mime_type="application/json" content_type="text">
    <content>{
  "$schema": "../gen/schemas/desktop-schema.json",
  "identifier": "default",
  "description": "Capability for the main window",
  "windows": ["main"],
  "permissions": [
    "core:default",
    "opener:default",
    "core:window:allow-minimize",
    "core:window:allow-maximize",
    "core:window:allow-unmaximize",
    "core:window:allow-close",
    "core:window:allow-set-always-on-top",
    "core:window:allow-start-dragging",
    "core:window:allow-is-maximized"
  ]
}
</content>
  </file>
  <file path="src-tauri\gen\schemas\acl-manifests.json" size="65958" modified_time="2025-08-07T14:04:33.571799" mime_type="application/json" content_type="text">
    <content>{"core":{"default_permission":{"identifier":"default","description":"Default core plugins set.","permissions":["core:path:default","core:event:default","core:window:default","core:webview:default","core:app:default","core:image:default","core:resources:default","core:menu:default","core:tray:default"]},"permissions":{},"permission_sets":{},"global_scope_schema":null},"core:app":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin.","permissions":["allow-version","allow-name","allow-tauri-version","allow-identifier","allow-bundle-type"]},"permissions":{"allow-app-hide":{"identifier":"allow-app-hide","description":"Enables the app_hide command without any pre-configured scope.","commands":{"allow":["app_hide"],"deny":[]}},"allow-app-show":{"identifier":"allow-app-show","description":"Enables the app_show command without any pre-configured scope.","commands":{"allow":["app_show"],"deny":[]}},"allow-bundle-type":{"identifier":"allow-bundle-type","description":"Enables the bundle_type command without any pre-configured scope.","commands":{"allow":["bundle_type"],"deny":[]}},"allow-default-window-icon":{"identifier":"allow-default-window-icon","description":"Enables the default_window_icon command without any pre-configured scope.","commands":{"allow":["default_window_icon"],"deny":[]}},"allow-fetch-data-store-identifiers":{"identifier":"allow-fetch-data-store-identifiers","description":"Enables the fetch_data_store_identifiers command without any pre-configured scope.","commands":{"allow":["fetch_data_store_identifiers"],"deny":[]}},"allow-identifier":{"identifier":"allow-identifier","description":"Enables the identifier command without any pre-configured scope.","commands":{"allow":["identifier"],"deny":[]}},"allow-name":{"identifier":"allow-name","description":"Enables the name command without any pre-configured scope.","commands":{"allow":["name"],"deny":[]}},"allow-remove-data-store":{"identifier":"allow-remove-data-store","description":"Enables the remove_data_store command without any pre-configured scope.","commands":{"allow":["remove_data_store"],"deny":[]}},"allow-set-app-theme":{"identifier":"allow-set-app-theme","description":"Enables the set_app_theme command without any pre-configured scope.","commands":{"allow":["set_app_theme"],"deny":[]}},"allow-set-dock-visibility":{"identifier":"allow-set-dock-visibility","description":"Enables the set_dock_visibility command without any pre-configured scope.","commands":{"allow":["set_dock_visibility"],"deny":[]}},"allow-tauri-version":{"identifier":"allow-tauri-version","description":"Enables the tauri_version command without any pre-configured scope.","commands":{"allow":["tauri_version"],"deny":[]}},"allow-version":{"identifier":"allow-version","description":"Enables the version command without any pre-configured scope.","commands":{"allow":["version"],"deny":[]}},"deny-app-hide":{"identifier":"deny-app-hide","description":"Denies the app_hide command without any pre-configured scope.","commands":{"allow":[],"deny":["app_hide"]}},"deny-app-show":{"identifier":"deny-app-show","description":"Denies the app_show command without any pre-configured scope.","commands":{"allow":[],"deny":["app_show"]}},"deny-bundle-type":{"identifier":"deny-bundle-type","description":"Denies the bundle_type command without any pre-configured scope.","commands":{"allow":[],"deny":["bundle_type"]}},"deny-default-window-icon":{"identifier":"deny-default-window-icon","description":"Denies the default_window_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["default_window_icon"]}},"deny-fetch-data-store-identifiers":{"identifier":"deny-fetch-data-store-identifiers","description":"Denies the fetch_data_store_identifiers command without any pre-configured scope.","commands":{"allow":[],"deny":["fetch_data_store_identifiers"]}},"deny-identifier":{"identifier":"deny-identifier","description":"Denies the identifier command without any pre-configured scope.","commands":{"allow":[],"deny":["identifier"]}},"deny-name":{"identifier":"deny-name","description":"Denies the name command without any pre-configured scope.","commands":{"allow":[],"deny":["name"]}},"deny-remove-data-store":{"identifier":"deny-remove-data-store","description":"Denies the remove_data_store command without any pre-configured scope.","commands":{"allow":[],"deny":["remove_data_store"]}},"deny-set-app-theme":{"identifier":"deny-set-app-theme","description":"Denies the set_app_theme command without any pre-configured scope.","commands":{"allow":[],"deny":["set_app_theme"]}},"deny-set-dock-visibility":{"identifier":"deny-set-dock-visibility","description":"Denies the set_dock_visibility command without any pre-configured scope.","commands":{"allow":[],"deny":["set_dock_visibility"]}},"deny-tauri-version":{"identifier":"deny-tauri-version","description":"Denies the tauri_version command without any pre-configured scope.","commands":{"allow":[],"deny":["tauri_version"]}},"deny-version":{"identifier":"deny-version","description":"Denies the version command without any pre-configured scope.","commands":{"allow":[],"deny":["version"]}}},"permission_sets":{},"global_scope_schema":null},"core:event":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-listen","allow-unlisten","allow-emit","allow-emit-to"]},"permissions":{"allow-emit":{"identifier":"allow-emit","description":"Enables the emit command without any pre-configured scope.","commands":{"allow":["emit"],"deny":[]}},"allow-emit-to":{"identifier":"allow-emit-to","description":"Enables the emit_to command without any pre-configured scope.","commands":{"allow":["emit_to"],"deny":[]}},"allow-listen":{"identifier":"allow-listen","description":"Enables the listen command without any pre-configured scope.","commands":{"allow":["listen"],"deny":[]}},"allow-unlisten":{"identifier":"allow-unlisten","description":"Enables the unlisten command without any pre-configured scope.","commands":{"allow":["unlisten"],"deny":[]}},"deny-emit":{"identifier":"deny-emit","description":"Denies the emit command without any pre-configured scope.","commands":{"allow":[],"deny":["emit"]}},"deny-emit-to":{"identifier":"deny-emit-to","description":"Denies the emit_to command without any pre-configured scope.","commands":{"allow":[],"deny":["emit_to"]}},"deny-listen":{"identifier":"deny-listen","description":"Denies the listen command without any pre-configured scope.","commands":{"allow":[],"deny":["listen"]}},"deny-unlisten":{"identifier":"deny-unlisten","description":"Denies the unlisten command without any pre-configured scope.","commands":{"allow":[],"deny":["unlisten"]}}},"permission_sets":{},"global_scope_schema":null},"core:image":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-new","allow-from-bytes","allow-from-path","allow-rgba","allow-size"]},"permissions":{"allow-from-bytes":{"identifier":"allow-from-bytes","description":"Enables the from_bytes command without any pre-configured scope.","commands":{"allow":["from_bytes"],"deny":[]}},"allow-from-path":{"identifier":"allow-from-path","description":"Enables the from_path command without any pre-configured scope.","commands":{"allow":["from_path"],"deny":[]}},"allow-new":{"identifier":"allow-new","description":"Enables the new command without any pre-configured scope.","commands":{"allow":["new"],"deny":[]}},"allow-rgba":{"identifier":"allow-rgba","description":"Enables the rgba command without any pre-configured scope.","commands":{"allow":["rgba"],"deny":[]}},"allow-size":{"identifier":"allow-size","description":"Enables the size command without any pre-configured scope.","commands":{"allow":["size"],"deny":[]}},"deny-from-bytes":{"identifier":"deny-from-bytes","description":"Denies the from_bytes command without any pre-configured scope.","commands":{"allow":[],"deny":["from_bytes"]}},"deny-from-path":{"identifier":"deny-from-path","description":"Denies the from_path command without any pre-configured scope.","commands":{"allow":[],"deny":["from_path"]}},"deny-new":{"identifier":"deny-new","description":"Denies the new command without any pre-configured scope.","commands":{"allow":[],"deny":["new"]}},"deny-rgba":{"identifier":"deny-rgba","description":"Denies the rgba command without any pre-configured scope.","commands":{"allow":[],"deny":["rgba"]}},"deny-size":{"identifier":"deny-size","description":"Denies the size command without any pre-configured scope.","commands":{"allow":[],"deny":["size"]}}},"permission_sets":{},"global_scope_schema":null},"core:menu":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-new","allow-append","allow-prepend","allow-insert","allow-remove","allow-remove-at","allow-items","allow-get","allow-popup","allow-create-default","allow-set-as-app-menu","allow-set-as-window-menu","allow-text","allow-set-text","allow-is-enabled","allow-set-enabled","allow-set-accelerator","allow-set-as-windows-menu-for-nsapp","allow-set-as-help-menu-for-nsapp","allow-is-checked","allow-set-checked","allow-set-icon"]},"permissions":{"allow-append":{"identifier":"allow-append","description":"Enables the append command without any pre-configured scope.","commands":{"allow":["append"],"deny":[]}},"allow-create-default":{"identifier":"allow-create-default","description":"Enables the create_default command without any pre-configured scope.","commands":{"allow":["create_default"],"deny":[]}},"allow-get":{"identifier":"allow-get","description":"Enables the get command without any pre-configured scope.","commands":{"allow":["get"],"deny":[]}},"allow-insert":{"identifier":"allow-insert","description":"Enables the insert command without any pre-configured scope.","commands":{"allow":["insert"],"deny":[]}},"allow-is-checked":{"identifier":"allow-is-checked","description":"Enables the is_checked command without any pre-configured scope.","commands":{"allow":["is_checked"],"deny":[]}},"allow-is-enabled":{"identifier":"allow-is-enabled","description":"Enables the is_enabled command without any pre-configured scope.","commands":{"allow":["is_enabled"],"deny":[]}},"allow-items":{"identifier":"allow-items","description":"Enables the items command without any pre-configured scope.","commands":{"allow":["items"],"deny":[]}},"allow-new":{"identifier":"allow-new","description":"Enables the new command without any pre-configured scope.","commands":{"allow":["new"],"deny":[]}},"allow-popup":{"identifier":"allow-popup","description":"Enables the popup command without any pre-configured scope.","commands":{"allow":["popup"],"deny":[]}},"allow-prepend":{"identifier":"allow-prepend","description":"Enables the prepend command without any pre-configured scope.","commands":{"allow":["prepend"],"deny":[]}},"allow-remove":{"identifier":"allow-remove","description":"Enables the remove command without any pre-configured scope.","commands":{"allow":["remove"],"deny":[]}},"allow-remove-at":{"identifier":"allow-remove-at","description":"Enables the remove_at command without any pre-configured scope.","commands":{"allow":["remove_at"],"deny":[]}},"allow-set-accelerator":{"identifier":"allow-set-accelerator","description":"Enables the set_accelerator command without any pre-configured scope.","commands":{"allow":["set_accelerator"],"deny":[]}},"allow-set-as-app-menu":{"identifier":"allow-set-as-app-menu","description":"Enables the set_as_app_menu command without any pre-configured scope.","commands":{"allow":["set_as_app_menu"],"deny":[]}},"allow-set-as-help-menu-for-nsapp":{"identifier":"allow-set-as-help-menu-for-nsapp","description":"Enables the set_as_help_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":["set_as_help_menu_for_nsapp"],"deny":[]}},"allow-set-as-window-menu":{"identifier":"allow-set-as-window-menu","description":"Enables the set_as_window_menu command without any pre-configured scope.","commands":{"allow":["set_as_window_menu"],"deny":[]}},"allow-set-as-windows-menu-for-nsapp":{"identifier":"allow-set-as-windows-menu-for-nsapp","description":"Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":["set_as_windows_menu_for_nsapp"],"deny":[]}},"allow-set-checked":{"identifier":"allow-set-checked","description":"Enables the set_checked command without any pre-configured scope.","commands":{"allow":["set_checked"],"deny":[]}},"allow-set-enabled":{"identifier":"allow-set-enabled","description":"Enables the set_enabled command without any pre-configured scope.","commands":{"allow":["set_enabled"],"deny":[]}},"allow-set-icon":{"identifier":"allow-set-icon","description":"Enables the set_icon command without any pre-configured scope.","commands":{"allow":["set_icon"],"deny":[]}},"allow-set-text":{"identifier":"allow-set-text","description":"Enables the set_text command without any pre-configured scope.","commands":{"allow":["set_text"],"deny":[]}},"allow-text":{"identifier":"allow-text","description":"Enables the text command without any pre-configured scope.","commands":{"allow":["text"],"deny":[]}},"deny-append":{"identifier":"deny-append","description":"Denies the append command without any pre-configured scope.","commands":{"allow":[],"deny":["append"]}},"deny-create-default":{"identifier":"deny-create-default","description":"Denies the create_default command without any pre-configured scope.","commands":{"allow":[],"deny":["create_default"]}},"deny-get":{"identifier":"deny-get","description":"Denies the get command without any pre-configured scope.","commands":{"allow":[],"deny":["get"]}},"deny-insert":{"identifier":"deny-insert","description":"Denies the insert command without any pre-configured scope.","commands":{"allow":[],"deny":["insert"]}},"deny-is-checked":{"identifier":"deny-is-checked","description":"Denies the is_checked command without any pre-configured scope.","commands":{"allow":[],"deny":["is_checked"]}},"deny-is-enabled":{"identifier":"deny-is-enabled","description":"Denies the is_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["is_enabled"]}},"deny-items":{"identifier":"deny-items","description":"Denies the items command without any pre-configured scope.","commands":{"allow":[],"deny":["items"]}},"deny-new":{"identifier":"deny-new","description":"Denies the new command without any pre-configured scope.","commands":{"allow":[],"deny":["new"]}},"deny-popup":{"identifier":"deny-popup","description":"Denies the popup command without any pre-configured scope.","commands":{"allow":[],"deny":["popup"]}},"deny-prepend":{"identifier":"deny-prepend","description":"Denies the prepend command without any pre-configured scope.","commands":{"allow":[],"deny":["prepend"]}},"deny-remove":{"identifier":"deny-remove","description":"Denies the remove command without any pre-configured scope.","commands":{"allow":[],"deny":["remove"]}},"deny-remove-at":{"identifier":"deny-remove-at","description":"Denies the remove_at command without any pre-configured scope.","commands":{"allow":[],"deny":["remove_at"]}},"deny-set-accelerator":{"identifier":"deny-set-accelerator","description":"Denies the set_accelerator command without any pre-configured scope.","commands":{"allow":[],"deny":["set_accelerator"]}},"deny-set-as-app-menu":{"identifier":"deny-set-as-app-menu","description":"Denies the set_as_app_menu command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_app_menu"]}},"deny-set-as-help-menu-for-nsapp":{"identifier":"deny-set-as-help-menu-for-nsapp","description":"Denies the set_as_help_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_help_menu_for_nsapp"]}},"deny-set-as-window-menu":{"identifier":"deny-set-as-window-menu","description":"Denies the set_as_window_menu command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_window_menu"]}},"deny-set-as-windows-menu-for-nsapp":{"identifier":"deny-set-as-windows-menu-for-nsapp","description":"Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope.","commands":{"allow":[],"deny":["set_as_windows_menu_for_nsapp"]}},"deny-set-checked":{"identifier":"deny-set-checked","description":"Denies the set_checked command without any pre-configured scope.","commands":{"allow":[],"deny":["set_checked"]}},"deny-set-enabled":{"identifier":"deny-set-enabled","description":"Denies the set_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["set_enabled"]}},"deny-set-icon":{"identifier":"deny-set-icon","description":"Denies the set_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon"]}},"deny-set-text":{"identifier":"deny-set-text","description":"Denies the set_text command without any pre-configured scope.","commands":{"allow":[],"deny":["set_text"]}},"deny-text":{"identifier":"deny-text","description":"Denies the text command without any pre-configured scope.","commands":{"allow":[],"deny":["text"]}}},"permission_sets":{},"global_scope_schema":null},"core:path":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-resolve-directory","allow-resolve","allow-normalize","allow-join","allow-dirname","allow-extname","allow-basename","allow-is-absolute"]},"permissions":{"allow-basename":{"identifier":"allow-basename","description":"Enables the basename command without any pre-configured scope.","commands":{"allow":["basename"],"deny":[]}},"allow-dirname":{"identifier":"allow-dirname","description":"Enables the dirname command without any pre-configured scope.","commands":{"allow":["dirname"],"deny":[]}},"allow-extname":{"identifier":"allow-extname","description":"Enables the extname command without any pre-configured scope.","commands":{"allow":["extname"],"deny":[]}},"allow-is-absolute":{"identifier":"allow-is-absolute","description":"Enables the is_absolute command without any pre-configured scope.","commands":{"allow":["is_absolute"],"deny":[]}},"allow-join":{"identifier":"allow-join","description":"Enables the join command without any pre-configured scope.","commands":{"allow":["join"],"deny":[]}},"allow-normalize":{"identifier":"allow-normalize","description":"Enables the normalize command without any pre-configured scope.","commands":{"allow":["normalize"],"deny":[]}},"allow-resolve":{"identifier":"allow-resolve","description":"Enables the resolve command without any pre-configured scope.","commands":{"allow":["resolve"],"deny":[]}},"allow-resolve-directory":{"identifier":"allow-resolve-directory","description":"Enables the resolve_directory command without any pre-configured scope.","commands":{"allow":["resolve_directory"],"deny":[]}},"deny-basename":{"identifier":"deny-basename","description":"Denies the basename command without any pre-configured scope.","commands":{"allow":[],"deny":["basename"]}},"deny-dirname":{"identifier":"deny-dirname","description":"Denies the dirname command without any pre-configured scope.","commands":{"allow":[],"deny":["dirname"]}},"deny-extname":{"identifier":"deny-extname","description":"Denies the extname command without any pre-configured scope.","commands":{"allow":[],"deny":["extname"]}},"deny-is-absolute":{"identifier":"deny-is-absolute","description":"Denies the is_absolute command without any pre-configured scope.","commands":{"allow":[],"deny":["is_absolute"]}},"deny-join":{"identifier":"deny-join","description":"Denies the join command without any pre-configured scope.","commands":{"allow":[],"deny":["join"]}},"deny-normalize":{"identifier":"deny-normalize","description":"Denies the normalize command without any pre-configured scope.","commands":{"allow":[],"deny":["normalize"]}},"deny-resolve":{"identifier":"deny-resolve","description":"Denies the resolve command without any pre-configured scope.","commands":{"allow":[],"deny":["resolve"]}},"deny-resolve-directory":{"identifier":"deny-resolve-directory","description":"Denies the resolve_directory command without any pre-configured scope.","commands":{"allow":[],"deny":["resolve_directory"]}}},"permission_sets":{},"global_scope_schema":null},"core:resources":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-close"]},"permissions":{"allow-close":{"identifier":"allow-close","description":"Enables the close command without any pre-configured scope.","commands":{"allow":["close"],"deny":[]}},"deny-close":{"identifier":"deny-close","description":"Denies the close command without any pre-configured scope.","commands":{"allow":[],"deny":["close"]}}},"permission_sets":{},"global_scope_schema":null},"core:tray":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin, which enables all commands.","permissions":["allow-new","allow-get-by-id","allow-remove-by-id","allow-set-icon","allow-set-menu","allow-set-tooltip","allow-set-title","allow-set-visible","allow-set-temp-dir-path","allow-set-icon-as-template","allow-set-show-menu-on-left-click"]},"permissions":{"allow-get-by-id":{"identifier":"allow-get-by-id","description":"Enables the get_by_id command without any pre-configured scope.","commands":{"allow":["get_by_id"],"deny":[]}},"allow-new":{"identifier":"allow-new","description":"Enables the new command without any pre-configured scope.","commands":{"allow":["new"],"deny":[]}},"allow-remove-by-id":{"identifier":"allow-remove-by-id","description":"Enables the remove_by_id command without any pre-configured scope.","commands":{"allow":["remove_by_id"],"deny":[]}},"allow-set-icon":{"identifier":"allow-set-icon","description":"Enables the set_icon command without any pre-configured scope.","commands":{"allow":["set_icon"],"deny":[]}},"allow-set-icon-as-template":{"identifier":"allow-set-icon-as-template","description":"Enables the set_icon_as_template command without any pre-configured scope.","commands":{"allow":["set_icon_as_template"],"deny":[]}},"allow-set-menu":{"identifier":"allow-set-menu","description":"Enables the set_menu command without any pre-configured scope.","commands":{"allow":["set_menu"],"deny":[]}},"allow-set-show-menu-on-left-click":{"identifier":"allow-set-show-menu-on-left-click","description":"Enables the set_show_menu_on_left_click command without any pre-configured scope.","commands":{"allow":["set_show_menu_on_left_click"],"deny":[]}},"allow-set-temp-dir-path":{"identifier":"allow-set-temp-dir-path","description":"Enables the set_temp_dir_path command without any pre-configured scope.","commands":{"allow":["set_temp_dir_path"],"deny":[]}},"allow-set-title":{"identifier":"allow-set-title","description":"Enables the set_title command without any pre-configured scope.","commands":{"allow":["set_title"],"deny":[]}},"allow-set-tooltip":{"identifier":"allow-set-tooltip","description":"Enables the set_tooltip command without any pre-configured scope.","commands":{"allow":["set_tooltip"],"deny":[]}},"allow-set-visible":{"identifier":"allow-set-visible","description":"Enables the set_visible command without any pre-configured scope.","commands":{"allow":["set_visible"],"deny":[]}},"deny-get-by-id":{"identifier":"deny-get-by-id","description":"Denies the get_by_id command without any pre-configured scope.","commands":{"allow":[],"deny":["get_by_id"]}},"deny-new":{"identifier":"deny-new","description":"Denies the new command without any pre-configured scope.","commands":{"allow":[],"deny":["new"]}},"deny-remove-by-id":{"identifier":"deny-remove-by-id","description":"Denies the remove_by_id command without any pre-configured scope.","commands":{"allow":[],"deny":["remove_by_id"]}},"deny-set-icon":{"identifier":"deny-set-icon","description":"Denies the set_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon"]}},"deny-set-icon-as-template":{"identifier":"deny-set-icon-as-template","description":"Denies the set_icon_as_template command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon_as_template"]}},"deny-set-menu":{"identifier":"deny-set-menu","description":"Denies the set_menu command without any pre-configured scope.","commands":{"allow":[],"deny":["set_menu"]}},"deny-set-show-menu-on-left-click":{"identifier":"deny-set-show-menu-on-left-click","description":"Denies the set_show_menu_on_left_click command without any pre-configured scope.","commands":{"allow":[],"deny":["set_show_menu_on_left_click"]}},"deny-set-temp-dir-path":{"identifier":"deny-set-temp-dir-path","description":"Denies the set_temp_dir_path command without any pre-configured scope.","commands":{"allow":[],"deny":["set_temp_dir_path"]}},"deny-set-title":{"identifier":"deny-set-title","description":"Denies the set_title command without any pre-configured scope.","commands":{"allow":[],"deny":["set_title"]}},"deny-set-tooltip":{"identifier":"deny-set-tooltip","description":"Denies the set_tooltip command without any pre-configured scope.","commands":{"allow":[],"deny":["set_tooltip"]}},"deny-set-visible":{"identifier":"deny-set-visible","description":"Denies the set_visible command without any pre-configured scope.","commands":{"allow":[],"deny":["set_visible"]}}},"permission_sets":{},"global_scope_schema":null},"core:webview":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin.","permissions":["allow-get-all-webviews","allow-webview-position","allow-webview-size","allow-internal-toggle-devtools"]},"permissions":{"allow-clear-all-browsing-data":{"identifier":"allow-clear-all-browsing-data","description":"Enables the clear_all_browsing_data command without any pre-configured scope.","commands":{"allow":["clear_all_browsing_data"],"deny":[]}},"allow-create-webview":{"identifier":"allow-create-webview","description":"Enables the create_webview command without any pre-configured scope.","commands":{"allow":["create_webview"],"deny":[]}},"allow-create-webview-window":{"identifier":"allow-create-webview-window","description":"Enables the create_webview_window command without any pre-configured scope.","commands":{"allow":["create_webview_window"],"deny":[]}},"allow-get-all-webviews":{"identifier":"allow-get-all-webviews","description":"Enables the get_all_webviews command without any pre-configured scope.","commands":{"allow":["get_all_webviews"],"deny":[]}},"allow-internal-toggle-devtools":{"identifier":"allow-internal-toggle-devtools","description":"Enables the internal_toggle_devtools command without any pre-configured scope.","commands":{"allow":["internal_toggle_devtools"],"deny":[]}},"allow-print":{"identifier":"allow-print","description":"Enables the print command without any pre-configured scope.","commands":{"allow":["print"],"deny":[]}},"allow-reparent":{"identifier":"allow-reparent","description":"Enables the reparent command without any pre-configured scope.","commands":{"allow":["reparent"],"deny":[]}},"allow-set-webview-auto-resize":{"identifier":"allow-set-webview-auto-resize","description":"Enables the set_webview_auto_resize command without any pre-configured scope.","commands":{"allow":["set_webview_auto_resize"],"deny":[]}},"allow-set-webview-background-color":{"identifier":"allow-set-webview-background-color","description":"Enables the set_webview_background_color command without any pre-configured scope.","commands":{"allow":["set_webview_background_color"],"deny":[]}},"allow-set-webview-focus":{"identifier":"allow-set-webview-focus","description":"Enables the set_webview_focus command without any pre-configured scope.","commands":{"allow":["set_webview_focus"],"deny":[]}},"allow-set-webview-position":{"identifier":"allow-set-webview-position","description":"Enables the set_webview_position command without any pre-configured scope.","commands":{"allow":["set_webview_position"],"deny":[]}},"allow-set-webview-size":{"identifier":"allow-set-webview-size","description":"Enables the set_webview_size command without any pre-configured scope.","commands":{"allow":["set_webview_size"],"deny":[]}},"allow-set-webview-zoom":{"identifier":"allow-set-webview-zoom","description":"Enables the set_webview_zoom command without any pre-configured scope.","commands":{"allow":["set_webview_zoom"],"deny":[]}},"allow-webview-close":{"identifier":"allow-webview-close","description":"Enables the webview_close command without any pre-configured scope.","commands":{"allow":["webview_close"],"deny":[]}},"allow-webview-hide":{"identifier":"allow-webview-hide","description":"Enables the webview_hide command without any pre-configured scope.","commands":{"allow":["webview_hide"],"deny":[]}},"allow-webview-position":{"identifier":"allow-webview-position","description":"Enables the webview_position command without any pre-configured scope.","commands":{"allow":["webview_position"],"deny":[]}},"allow-webview-show":{"identifier":"allow-webview-show","description":"Enables the webview_show command without any pre-configured scope.","commands":{"allow":["webview_show"],"deny":[]}},"allow-webview-size":{"identifier":"allow-webview-size","description":"Enables the webview_size command without any pre-configured scope.","commands":{"allow":["webview_size"],"deny":[]}},"deny-clear-all-browsing-data":{"identifier":"deny-clear-all-browsing-data","description":"Denies the clear_all_browsing_data command without any pre-configured scope.","commands":{"allow":[],"deny":["clear_all_browsing_data"]}},"deny-create-webview":{"identifier":"deny-create-webview","description":"Denies the create_webview command without any pre-configured scope.","commands":{"allow":[],"deny":["create_webview"]}},"deny-create-webview-window":{"identifier":"deny-create-webview-window","description":"Denies the create_webview_window command without any pre-configured scope.","commands":{"allow":[],"deny":["create_webview_window"]}},"deny-get-all-webviews":{"identifier":"deny-get-all-webviews","description":"Denies the get_all_webviews command without any pre-configured scope.","commands":{"allow":[],"deny":["get_all_webviews"]}},"deny-internal-toggle-devtools":{"identifier":"deny-internal-toggle-devtools","description":"Denies the internal_toggle_devtools command without any pre-configured scope.","commands":{"allow":[],"deny":["internal_toggle_devtools"]}},"deny-print":{"identifier":"deny-print","description":"Denies the print command without any pre-configured scope.","commands":{"allow":[],"deny":["print"]}},"deny-reparent":{"identifier":"deny-reparent","description":"Denies the reparent command without any pre-configured scope.","commands":{"allow":[],"deny":["reparent"]}},"deny-set-webview-auto-resize":{"identifier":"deny-set-webview-auto-resize","description":"Denies the set_webview_auto_resize command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_auto_resize"]}},"deny-set-webview-background-color":{"identifier":"deny-set-webview-background-color","description":"Denies the set_webview_background_color command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_background_color"]}},"deny-set-webview-focus":{"identifier":"deny-set-webview-focus","description":"Denies the set_webview_focus command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_focus"]}},"deny-set-webview-position":{"identifier":"deny-set-webview-position","description":"Denies the set_webview_position command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_position"]}},"deny-set-webview-size":{"identifier":"deny-set-webview-size","description":"Denies the set_webview_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_size"]}},"deny-set-webview-zoom":{"identifier":"deny-set-webview-zoom","description":"Denies the set_webview_zoom command without any pre-configured scope.","commands":{"allow":[],"deny":["set_webview_zoom"]}},"deny-webview-close":{"identifier":"deny-webview-close","description":"Denies the webview_close command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_close"]}},"deny-webview-hide":{"identifier":"deny-webview-hide","description":"Denies the webview_hide command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_hide"]}},"deny-webview-position":{"identifier":"deny-webview-position","description":"Denies the webview_position command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_position"]}},"deny-webview-show":{"identifier":"deny-webview-show","description":"Denies the webview_show command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_show"]}},"deny-webview-size":{"identifier":"deny-webview-size","description":"Denies the webview_size command without any pre-configured scope.","commands":{"allow":[],"deny":["webview_size"]}}},"permission_sets":{},"global_scope_schema":null},"core:window":{"default_permission":{"identifier":"default","description":"Default permissions for the plugin.","permissions":["allow-get-all-windows","allow-scale-factor","allow-inner-position","allow-outer-position","allow-inner-size","allow-outer-size","allow-is-fullscreen","allow-is-minimized","allow-is-maximized","allow-is-focused","allow-is-decorated","allow-is-resizable","allow-is-maximizable","allow-is-minimizable","allow-is-closable","allow-is-visible","allow-is-enabled","allow-title","allow-current-monitor","allow-primary-monitor","allow-monitor-from-point","allow-available-monitors","allow-cursor-position","allow-theme","allow-is-always-on-top","allow-internal-toggle-maximize"]},"permissions":{"allow-available-monitors":{"identifier":"allow-available-monitors","description":"Enables the available_monitors command without any pre-configured scope.","commands":{"allow":["available_monitors"],"deny":[]}},"allow-center":{"identifier":"allow-center","description":"Enables the center command without any pre-configured scope.","commands":{"allow":["center"],"deny":[]}},"allow-close":{"identifier":"allow-close","description":"Enables the close command without any pre-configured scope.","commands":{"allow":["close"],"deny":[]}},"allow-create":{"identifier":"allow-create","description":"Enables the create command without any pre-configured scope.","commands":{"allow":["create"],"deny":[]}},"allow-current-monitor":{"identifier":"allow-current-monitor","description":"Enables the current_monitor command without any pre-configured scope.","commands":{"allow":["current_monitor"],"deny":[]}},"allow-cursor-position":{"identifier":"allow-cursor-position","description":"Enables the cursor_position command without any pre-configured scope.","commands":{"allow":["cursor_position"],"deny":[]}},"allow-destroy":{"identifier":"allow-destroy","description":"Enables the destroy command without any pre-configured scope.","commands":{"allow":["destroy"],"deny":[]}},"allow-get-all-windows":{"identifier":"allow-get-all-windows","description":"Enables the get_all_windows command without any pre-configured scope.","commands":{"allow":["get_all_windows"],"deny":[]}},"allow-hide":{"identifier":"allow-hide","description":"Enables the hide command without any pre-configured scope.","commands":{"allow":["hide"],"deny":[]}},"allow-inner-position":{"identifier":"allow-inner-position","description":"Enables the inner_position command without any pre-configured scope.","commands":{"allow":["inner_position"],"deny":[]}},"allow-inner-size":{"identifier":"allow-inner-size","description":"Enables the inner_size command without any pre-configured scope.","commands":{"allow":["inner_size"],"deny":[]}},"allow-internal-toggle-maximize":{"identifier":"allow-internal-toggle-maximize","description":"Enables the internal_toggle_maximize command without any pre-configured scope.","commands":{"allow":["internal_toggle_maximize"],"deny":[]}},"allow-is-always-on-top":{"identifier":"allow-is-always-on-top","description":"Enables the is_always_on_top command without any pre-configured scope.","commands":{"allow":["is_always_on_top"],"deny":[]}},"allow-is-closable":{"identifier":"allow-is-closable","description":"Enables the is_closable command without any pre-configured scope.","commands":{"allow":["is_closable"],"deny":[]}},"allow-is-decorated":{"identifier":"allow-is-decorated","description":"Enables the is_decorated command without any pre-configured scope.","commands":{"allow":["is_decorated"],"deny":[]}},"allow-is-enabled":{"identifier":"allow-is-enabled","description":"Enables the is_enabled command without any pre-configured scope.","commands":{"allow":["is_enabled"],"deny":[]}},"allow-is-focused":{"identifier":"allow-is-focused","description":"Enables the is_focused command without any pre-configured scope.","commands":{"allow":["is_focused"],"deny":[]}},"allow-is-fullscreen":{"identifier":"allow-is-fullscreen","description":"Enables the is_fullscreen command without any pre-configured scope.","commands":{"allow":["is_fullscreen"],"deny":[]}},"allow-is-maximizable":{"identifier":"allow-is-maximizable","description":"Enables the is_maximizable command without any pre-configured scope.","commands":{"allow":["is_maximizable"],"deny":[]}},"allow-is-maximized":{"identifier":"allow-is-maximized","description":"Enables the is_maximized command without any pre-configured scope.","commands":{"allow":["is_maximized"],"deny":[]}},"allow-is-minimizable":{"identifier":"allow-is-minimizable","description":"Enables the is_minimizable command without any pre-configured scope.","commands":{"allow":["is_minimizable"],"deny":[]}},"allow-is-minimized":{"identifier":"allow-is-minimized","description":"Enables the is_minimized command without any pre-configured scope.","commands":{"allow":["is_minimized"],"deny":[]}},"allow-is-resizable":{"identifier":"allow-is-resizable","description":"Enables the is_resizable command without any pre-configured scope.","commands":{"allow":["is_resizable"],"deny":[]}},"allow-is-visible":{"identifier":"allow-is-visible","description":"Enables the is_visible command without any pre-configured scope.","commands":{"allow":["is_visible"],"deny":[]}},"allow-maximize":{"identifier":"allow-maximize","description":"Enables the maximize command without any pre-configured scope.","commands":{"allow":["maximize"],"deny":[]}},"allow-minimize":{"identifier":"allow-minimize","description":"Enables the minimize command without any pre-configured scope.","commands":{"allow":["minimize"],"deny":[]}},"allow-monitor-from-point":{"identifier":"allow-monitor-from-point","description":"Enables the monitor_from_point command without any pre-configured scope.","commands":{"allow":["monitor_from_point"],"deny":[]}},"allow-outer-position":{"identifier":"allow-outer-position","description":"Enables the outer_position command without any pre-configured scope.","commands":{"allow":["outer_position"],"deny":[]}},"allow-outer-size":{"identifier":"allow-outer-size","description":"Enables the outer_size command without any pre-configured scope.","commands":{"allow":["outer_size"],"deny":[]}},"allow-primary-monitor":{"identifier":"allow-primary-monitor","description":"Enables the primary_monitor command without any pre-configured scope.","commands":{"allow":["primary_monitor"],"deny":[]}},"allow-request-user-attention":{"identifier":"allow-request-user-attention","description":"Enables the request_user_attention command without any pre-configured scope.","commands":{"allow":["request_user_attention"],"deny":[]}},"allow-scale-factor":{"identifier":"allow-scale-factor","description":"Enables the scale_factor command without any pre-configured scope.","commands":{"allow":["scale_factor"],"deny":[]}},"allow-set-always-on-bottom":{"identifier":"allow-set-always-on-bottom","description":"Enables the set_always_on_bottom command without any pre-configured scope.","commands":{"allow":["set_always_on_bottom"],"deny":[]}},"allow-set-always-on-top":{"identifier":"allow-set-always-on-top","description":"Enables the set_always_on_top command without any pre-configured scope.","commands":{"allow":["set_always_on_top"],"deny":[]}},"allow-set-background-color":{"identifier":"allow-set-background-color","description":"Enables the set_background_color command without any pre-configured scope.","commands":{"allow":["set_background_color"],"deny":[]}},"allow-set-badge-count":{"identifier":"allow-set-badge-count","description":"Enables the set_badge_count command without any pre-configured scope.","commands":{"allow":["set_badge_count"],"deny":[]}},"allow-set-badge-label":{"identifier":"allow-set-badge-label","description":"Enables the set_badge_label command without any pre-configured scope.","commands":{"allow":["set_badge_label"],"deny":[]}},"allow-set-closable":{"identifier":"allow-set-closable","description":"Enables the set_closable command without any pre-configured scope.","commands":{"allow":["set_closable"],"deny":[]}},"allow-set-content-protected":{"identifier":"allow-set-content-protected","description":"Enables the set_content_protected command without any pre-configured scope.","commands":{"allow":["set_content_protected"],"deny":[]}},"allow-set-cursor-grab":{"identifier":"allow-set-cursor-grab","description":"Enables the set_cursor_grab command without any pre-configured scope.","commands":{"allow":["set_cursor_grab"],"deny":[]}},"allow-set-cursor-icon":{"identifier":"allow-set-cursor-icon","description":"Enables the set_cursor_icon command without any pre-configured scope.","commands":{"allow":["set_cursor_icon"],"deny":[]}},"allow-set-cursor-position":{"identifier":"allow-set-cursor-position","description":"Enables the set_cursor_position command without any pre-configured scope.","commands":{"allow":["set_cursor_position"],"deny":[]}},"allow-set-cursor-visible":{"identifier":"allow-set-cursor-visible","description":"Enables the set_cursor_visible command without any pre-configured scope.","commands":{"allow":["set_cursor_visible"],"deny":[]}},"allow-set-decorations":{"identifier":"allow-set-decorations","description":"Enables the set_decorations command without any pre-configured scope.","commands":{"allow":["set_decorations"],"deny":[]}},"allow-set-effects":{"identifier":"allow-set-effects","description":"Enables the set_effects command without any pre-configured scope.","commands":{"allow":["set_effects"],"deny":[]}},"allow-set-enabled":{"identifier":"allow-set-enabled","description":"Enables the set_enabled command without any pre-configured scope.","commands":{"allow":["set_enabled"],"deny":[]}},"allow-set-focus":{"identifier":"allow-set-focus","description":"Enables the set_focus command without any pre-configured scope.","commands":{"allow":["set_focus"],"deny":[]}},"allow-set-fullscreen":{"identifier":"allow-set-fullscreen","description":"Enables the set_fullscreen command without any pre-configured scope.","commands":{"allow":["set_fullscreen"],"deny":[]}},"allow-set-icon":{"identifier":"allow-set-icon","description":"Enables the set_icon command without any pre-configured scope.","commands":{"allow":["set_icon"],"deny":[]}},"allow-set-ignore-cursor-events":{"identifier":"allow-set-ignore-cursor-events","description":"Enables the set_ignore_cursor_events command without any pre-configured scope.","commands":{"allow":["set_ignore_cursor_events"],"deny":[]}},"allow-set-max-size":{"identifier":"allow-set-max-size","description":"Enables the set_max_size command without any pre-configured scope.","commands":{"allow":["set_max_size"],"deny":[]}},"allow-set-maximizable":{"identifier":"allow-set-maximizable","description":"Enables the set_maximizable command without any pre-configured scope.","commands":{"allow":["set_maximizable"],"deny":[]}},"allow-set-min-size":{"identifier":"allow-set-min-size","description":"Enables the set_min_size command without any pre-configured scope.","commands":{"allow":["set_min_size"],"deny":[]}},"allow-set-minimizable":{"identifier":"allow-set-minimizable","description":"Enables the set_minimizable command without any pre-configured scope.","commands":{"allow":["set_minimizable"],"deny":[]}},"allow-set-overlay-icon":{"identifier":"allow-set-overlay-icon","description":"Enables the set_overlay_icon command without any pre-configured scope.","commands":{"allow":["set_overlay_icon"],"deny":[]}},"allow-set-position":{"identifier":"allow-set-position","description":"Enables the set_position command without any pre-configured scope.","commands":{"allow":["set_position"],"deny":[]}},"allow-set-progress-bar":{"identifier":"allow-set-progress-bar","description":"Enables the set_progress_bar command without any pre-configured scope.","commands":{"allow":["set_progress_bar"],"deny":[]}},"allow-set-resizable":{"identifier":"allow-set-resizable","description":"Enables the set_resizable command without any pre-configured scope.","commands":{"allow":["set_resizable"],"deny":[]}},"allow-set-shadow":{"identifier":"allow-set-shadow","description":"Enables the set_shadow command without any pre-configured scope.","commands":{"allow":["set_shadow"],"deny":[]}},"allow-set-size":{"identifier":"allow-set-size","description":"Enables the set_size command without any pre-configured scope.","commands":{"allow":["set_size"],"deny":[]}},"allow-set-size-constraints":{"identifier":"allow-set-size-constraints","description":"Enables the set_size_constraints command without any pre-configured scope.","commands":{"allow":["set_size_constraints"],"deny":[]}},"allow-set-skip-taskbar":{"identifier":"allow-set-skip-taskbar","description":"Enables the set_skip_taskbar command without any pre-configured scope.","commands":{"allow":["set_skip_taskbar"],"deny":[]}},"allow-set-theme":{"identifier":"allow-set-theme","description":"Enables the set_theme command without any pre-configured scope.","commands":{"allow":["set_theme"],"deny":[]}},"allow-set-title":{"identifier":"allow-set-title","description":"Enables the set_title command without any pre-configured scope.","commands":{"allow":["set_title"],"deny":[]}},"allow-set-title-bar-style":{"identifier":"allow-set-title-bar-style","description":"Enables the set_title_bar_style command without any pre-configured scope.","commands":{"allow":["set_title_bar_style"],"deny":[]}},"allow-set-visible-on-all-workspaces":{"identifier":"allow-set-visible-on-all-workspaces","description":"Enables the set_visible_on_all_workspaces command without any pre-configured scope.","commands":{"allow":["set_visible_on_all_workspaces"],"deny":[]}},"allow-show":{"identifier":"allow-show","description":"Enables the show command without any pre-configured scope.","commands":{"allow":["show"],"deny":[]}},"allow-start-dragging":{"identifier":"allow-start-dragging","description":"Enables the start_dragging command without any pre-configured scope.","commands":{"allow":["start_dragging"],"deny":[]}},"allow-start-resize-dragging":{"identifier":"allow-start-resize-dragging","description":"Enables the start_resize_dragging command without any pre-configured scope.","commands":{"allow":["start_resize_dragging"],"deny":[]}},"allow-theme":{"identifier":"allow-theme","description":"Enables the theme command without any pre-configured scope.","commands":{"allow":["theme"],"deny":[]}},"allow-title":{"identifier":"allow-title","description":"Enables the title command without any pre-configured scope.","commands":{"allow":["title"],"deny":[]}},"allow-toggle-maximize":{"identifier":"allow-toggle-maximize","description":"Enables the toggle_maximize command without any pre-configured scope.","commands":{"allow":["toggle_maximize"],"deny":[]}},"allow-unmaximize":{"identifier":"allow-unmaximize","description":"Enables the unmaximize command without any pre-configured scope.","commands":{"allow":["unmaximize"],"deny":[]}},"allow-unminimize":{"identifier":"allow-unminimize","description":"Enables the unminimize command without any pre-configured scope.","commands":{"allow":["unminimize"],"deny":[]}},"deny-available-monitors":{"identifier":"deny-available-monitors","description":"Denies the available_monitors command without any pre-configured scope.","commands":{"allow":[],"deny":["available_monitors"]}},"deny-center":{"identifier":"deny-center","description":"Denies the center command without any pre-configured scope.","commands":{"allow":[],"deny":["center"]}},"deny-close":{"identifier":"deny-close","description":"Denies the close command without any pre-configured scope.","commands":{"allow":[],"deny":["close"]}},"deny-create":{"identifier":"deny-create","description":"Denies the create command without any pre-configured scope.","commands":{"allow":[],"deny":["create"]}},"deny-current-monitor":{"identifier":"deny-current-monitor","description":"Denies the current_monitor command without any pre-configured scope.","commands":{"allow":[],"deny":["current_monitor"]}},"deny-cursor-position":{"identifier":"deny-cursor-position","description":"Denies the cursor_position command without any pre-configured scope.","commands":{"allow":[],"deny":["cursor_position"]}},"deny-destroy":{"identifier":"deny-destroy","description":"Denies the destroy command without any pre-configured scope.","commands":{"allow":[],"deny":["destroy"]}},"deny-get-all-windows":{"identifier":"deny-get-all-windows","description":"Denies the get_all_windows command without any pre-configured scope.","commands":{"allow":[],"deny":["get_all_windows"]}},"deny-hide":{"identifier":"deny-hide","description":"Denies the hide command without any pre-configured scope.","commands":{"allow":[],"deny":["hide"]}},"deny-inner-position":{"identifier":"deny-inner-position","description":"Denies the inner_position command without any pre-configured scope.","commands":{"allow":[],"deny":["inner_position"]}},"deny-inner-size":{"identifier":"deny-inner-size","description":"Denies the inner_size command without any pre-configured scope.","commands":{"allow":[],"deny":["inner_size"]}},"deny-internal-toggle-maximize":{"identifier":"deny-internal-toggle-maximize","description":"Denies the internal_toggle_maximize command without any pre-configured scope.","commands":{"allow":[],"deny":["internal_toggle_maximize"]}},"deny-is-always-on-top":{"identifier":"deny-is-always-on-top","description":"Denies the is_always_on_top command without any pre-configured scope.","commands":{"allow":[],"deny":["is_always_on_top"]}},"deny-is-closable":{"identifier":"deny-is-closable","description":"Denies the is_closable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_closable"]}},"deny-is-decorated":{"identifier":"deny-is-decorated","description":"Denies the is_decorated command without any pre-configured scope.","commands":{"allow":[],"deny":["is_decorated"]}},"deny-is-enabled":{"identifier":"deny-is-enabled","description":"Denies the is_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["is_enabled"]}},"deny-is-focused":{"identifier":"deny-is-focused","description":"Denies the is_focused command without any pre-configured scope.","commands":{"allow":[],"deny":["is_focused"]}},"deny-is-fullscreen":{"identifier":"deny-is-fullscreen","description":"Denies the is_fullscreen command without any pre-configured scope.","commands":{"allow":[],"deny":["is_fullscreen"]}},"deny-is-maximizable":{"identifier":"deny-is-maximizable","description":"Denies the is_maximizable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_maximizable"]}},"deny-is-maximized":{"identifier":"deny-is-maximized","description":"Denies the is_maximized command without any pre-configured scope.","commands":{"allow":[],"deny":["is_maximized"]}},"deny-is-minimizable":{"identifier":"deny-is-minimizable","description":"Denies the is_minimizable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_minimizable"]}},"deny-is-minimized":{"identifier":"deny-is-minimized","description":"Denies the is_minimized command without any pre-configured scope.","commands":{"allow":[],"deny":["is_minimized"]}},"deny-is-resizable":{"identifier":"deny-is-resizable","description":"Denies the is_resizable command without any pre-configured scope.","commands":{"allow":[],"deny":["is_resizable"]}},"deny-is-visible":{"identifier":"deny-is-visible","description":"Denies the is_visible command without any pre-configured scope.","commands":{"allow":[],"deny":["is_visible"]}},"deny-maximize":{"identifier":"deny-maximize","description":"Denies the maximize command without any pre-configured scope.","commands":{"allow":[],"deny":["maximize"]}},"deny-minimize":{"identifier":"deny-minimize","description":"Denies the minimize command without any pre-configured scope.","commands":{"allow":[],"deny":["minimize"]}},"deny-monitor-from-point":{"identifier":"deny-monitor-from-point","description":"Denies the monitor_from_point command without any pre-configured scope.","commands":{"allow":[],"deny":["monitor_from_point"]}},"deny-outer-position":{"identifier":"deny-outer-position","description":"Denies the outer_position command without any pre-configured scope.","commands":{"allow":[],"deny":["outer_position"]}},"deny-outer-size":{"identifier":"deny-outer-size","description":"Denies the outer_size command without any pre-configured scope.","commands":{"allow":[],"deny":["outer_size"]}},"deny-primary-monitor":{"identifier":"deny-primary-monitor","description":"Denies the primary_monitor command without any pre-configured scope.","commands":{"allow":[],"deny":["primary_monitor"]}},"deny-request-user-attention":{"identifier":"deny-request-user-attention","description":"Denies the request_user_attention command without any pre-configured scope.","commands":{"allow":[],"deny":["request_user_attention"]}},"deny-scale-factor":{"identifier":"deny-scale-factor","description":"Denies the scale_factor command without any pre-configured scope.","commands":{"allow":[],"deny":["scale_factor"]}},"deny-set-always-on-bottom":{"identifier":"deny-set-always-on-bottom","description":"Denies the set_always_on_bottom command without any pre-configured scope.","commands":{"allow":[],"deny":["set_always_on_bottom"]}},"deny-set-always-on-top":{"identifier":"deny-set-always-on-top","description":"Denies the set_always_on_top command without any pre-configured scope.","commands":{"allow":[],"deny":["set_always_on_top"]}},"deny-set-background-color":{"identifier":"deny-set-background-color","description":"Denies the set_background_color command without any pre-configured scope.","commands":{"allow":[],"deny":["set_background_color"]}},"deny-set-badge-count":{"identifier":"deny-set-badge-count","description":"Denies the set_badge_count command without any pre-configured scope.","commands":{"allow":[],"deny":["set_badge_count"]}},"deny-set-badge-label":{"identifier":"deny-set-badge-label","description":"Denies the set_badge_label command without any pre-configured scope.","commands":{"allow":[],"deny":["set_badge_label"]}},"deny-set-closable":{"identifier":"deny-set-closable","description":"Denies the set_closable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_closable"]}},"deny-set-content-protected":{"identifier":"deny-set-content-protected","description":"Denies the set_content_protected command without any pre-configured scope.","commands":{"allow":[],"deny":["set_content_protected"]}},"deny-set-cursor-grab":{"identifier":"deny-set-cursor-grab","description":"Denies the set_cursor_grab command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_grab"]}},"deny-set-cursor-icon":{"identifier":"deny-set-cursor-icon","description":"Denies the set_cursor_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_icon"]}},"deny-set-cursor-position":{"identifier":"deny-set-cursor-position","description":"Denies the set_cursor_position command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_position"]}},"deny-set-cursor-visible":{"identifier":"deny-set-cursor-visible","description":"Denies the set_cursor_visible command without any pre-configured scope.","commands":{"allow":[],"deny":["set_cursor_visible"]}},"deny-set-decorations":{"identifier":"deny-set-decorations","description":"Denies the set_decorations command without any pre-configured scope.","commands":{"allow":[],"deny":["set_decorations"]}},"deny-set-effects":{"identifier":"deny-set-effects","description":"Denies the set_effects command without any pre-configured scope.","commands":{"allow":[],"deny":["set_effects"]}},"deny-set-enabled":{"identifier":"deny-set-enabled","description":"Denies the set_enabled command without any pre-configured scope.","commands":{"allow":[],"deny":["set_enabled"]}},"deny-set-focus":{"identifier":"deny-set-focus","description":"Denies the set_focus command without any pre-configured scope.","commands":{"allow":[],"deny":["set_focus"]}},"deny-set-fullscreen":{"identifier":"deny-set-fullscreen","description":"Denies the set_fullscreen command without any pre-configured scope.","commands":{"allow":[],"deny":["set_fullscreen"]}},"deny-set-icon":{"identifier":"deny-set-icon","description":"Denies the set_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_icon"]}},"deny-set-ignore-cursor-events":{"identifier":"deny-set-ignore-cursor-events","description":"Denies the set_ignore_cursor_events command without any pre-configured scope.","commands":{"allow":[],"deny":["set_ignore_cursor_events"]}},"deny-set-max-size":{"identifier":"deny-set-max-size","description":"Denies the set_max_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_max_size"]}},"deny-set-maximizable":{"identifier":"deny-set-maximizable","description":"Denies the set_maximizable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_maximizable"]}},"deny-set-min-size":{"identifier":"deny-set-min-size","description":"Denies the set_min_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_min_size"]}},"deny-set-minimizable":{"identifier":"deny-set-minimizable","description":"Denies the set_minimizable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_minimizable"]}},"deny-set-overlay-icon":{"identifier":"deny-set-overlay-icon","description":"Denies the set_overlay_icon command without any pre-configured scope.","commands":{"allow":[],"deny":["set_overlay_icon"]}},"deny-set-position":{"identifier":"deny-set-position","description":"Denies the set_position command without any pre-configured scope.","commands":{"allow":[],"deny":["set_position"]}},"deny-set-progress-bar":{"identifier":"deny-set-progress-bar","description":"Denies the set_progress_bar command without any pre-configured scope.","commands":{"allow":[],"deny":["set_progress_bar"]}},"deny-set-resizable":{"identifier":"deny-set-resizable","description":"Denies the set_resizable command without any pre-configured scope.","commands":{"allow":[],"deny":["set_resizable"]}},"deny-set-shadow":{"identifier":"deny-set-shadow","description":"Denies the set_shadow command without any pre-configured scope.","commands":{"allow":[],"deny":["set_shadow"]}},"deny-set-size":{"identifier":"deny-set-size","description":"Denies the set_size command without any pre-configured scope.","commands":{"allow":[],"deny":["set_size"]}},"deny-set-size-constraints":{"identifier":"deny-set-size-constraints","description":"Denies the set_size_constraints command without any pre-configured scope.","commands":{"allow":[],"deny":["set_size_constraints"]}},"deny-set-skip-taskbar":{"identifier":"deny-set-skip-taskbar","description":"Denies the set_skip_taskbar command without any pre-configured scope.","commands":{"allow":[],"deny":["set_skip_taskbar"]}},"deny-set-theme":{"identifier":"deny-set-theme","description":"Denies the set_theme command without any pre-configured scope.","commands":{"allow":[],"deny":["set_theme"]}},"deny-set-title":{"identifier":"deny-set-title","description":"Denies the set_title command without any pre-configured scope.","commands":{"allow":[],"deny":["set_title"]}},"deny-set-title-bar-style":{"identifier":"deny-set-title-bar-style","description":"Denies the set_title_bar_style command without any pre-configured scope.","commands":{"allow":[],"deny":["set_title_bar_style"]}},"deny-set-visible-on-all-workspaces":{"identifier":"deny-set-visible-on-all-workspaces","description":"Denies the set_visible_on_all_workspaces command without any pre-configured scope.","commands":{"allow":[],"deny":["set_visible_on_all_workspaces"]}},"deny-show":{"identifier":"deny-show","description":"Denies the show command without any pre-configured scope.","commands":{"allow":[],"deny":["show"]}},"deny-start-dragging":{"identifier":"deny-start-dragging","description":"Denies the start_dragging command without any pre-configured scope.","commands":{"allow":[],"deny":["start_dragging"]}},"deny-start-resize-dragging":{"identifier":"deny-start-resize-dragging","description":"Denies the start_resize_dragging command without any pre-configured scope.","commands":{"allow":[],"deny":["start_resize_dragging"]}},"deny-theme":{"identifier":"deny-theme","description":"Denies the theme command without any pre-configured scope.","commands":{"allow":[],"deny":["theme"]}},"deny-title":{"identifier":"deny-title","description":"Denies the title command without any pre-configured scope.","commands":{"allow":[],"deny":["title"]}},"deny-toggle-maximize":{"identifier":"deny-toggle-maximize","description":"Denies the toggle_maximize command without any pre-configured scope.","commands":{"allow":[],"deny":["toggle_maximize"]}},"deny-unmaximize":{"identifier":"deny-unmaximize","description":"Denies the unmaximize command without any pre-configured scope.","commands":{"allow":[],"deny":["unmaximize"]}},"deny-unminimize":{"identifier":"deny-unminimize","description":"Denies the unminimize command without any pre-configured scope.","commands":{"allow":[],"deny":["unminimize"]}}},"permission_sets":{},"global_scope_schema":null},"opener":{"default_permission":{"identifier":"default","description":"This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer","permissions":["allow-open-url","allow-reveal-item-in-dir","allow-default-urls"]},"permissions":{"allow-default-urls":{"identifier":"allow-default-urls","description":"This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.","commands":{"allow":[],"deny":[]},"scope":{"allow":[{"url":"mailto:*"},{"url":"tel:*"},{"url":"http://*"},{"url":"https://*"}]}},"allow-open-path":{"identifier":"allow-open-path","description":"Enables the open_path command without any pre-configured scope.","commands":{"allow":["open_path"],"deny":[]}},"allow-open-url":{"identifier":"allow-open-url","description":"Enables the open_url command without any pre-configured scope.","commands":{"allow":["open_url"],"deny":[]}},"allow-reveal-item-in-dir":{"identifier":"allow-reveal-item-in-dir","description":"Enables the reveal_item_in_dir command without any pre-configured scope.","commands":{"allow":["reveal_item_in_dir"],"deny":[]}},"deny-open-path":{"identifier":"deny-open-path","description":"Denies the open_path command without any pre-configured scope.","commands":{"allow":[],"deny":["open_path"]}},"deny-open-url":{"identifier":"deny-open-url","description":"Denies the open_url command without any pre-configured scope.","commands":{"allow":[],"deny":["open_url"]}},"deny-reveal-item-in-dir":{"identifier":"deny-reveal-item-in-dir","description":"Denies the reveal_item_in_dir command without any pre-configured scope.","commands":{"allow":[],"deny":["reveal_item_in_dir"]}}},"permission_sets":{},"global_scope_schema":{"$schema":"http://json-schema.org/draft-07/schema#","anyOf":[{"properties":{"app":{"allOf":[{"$ref":"#/definitions/Application"}],"description":"An application to open this url with, for example: firefox."},"url":{"description":"A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"","type":"string"}},"required":["url"],"type":"object"},{"properties":{"app":{"allOf":[{"$ref":"#/definitions/Application"}],"description":"An application to open this path with, for example: xdg-open."},"path":{"description":"A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.","type":"string"}},"required":["path"],"type":"object"}],"definitions":{"Application":{"anyOf":[{"description":"Open in default application.","type":"null"},{"description":"If true, allow open with any application.","type":"boolean"},{"description":"Allow specific application to open with.","type":"string"}],"description":"Opener scope application."}},"description":"Opener scope entry.","title":"OpenerScopeEntry"}}}</content>
  </file>
  <file path="src-tauri\gen\schemas\capabilities.json" size="384" modified_time="2025-08-07T14:04:33.583800" mime_type="application/json" content_type="text">
    <content>{"default":{"identifier":"default","description":"Capability for the main window","local":true,"windows":["main"],"permissions":["core:default","opener:default","core:window:allow-minimize","core:window:allow-maximize","core:window:allow-unmaximize","core:window:allow-close","core:window:allow-set-always-on-top","core:window:allow-start-dragging","core:window:allow-is-maximized"]}}</content>
  </file>
  <file path="src-tauri\gen\schemas\desktop-schema.json" size="123731" modified_time="2025-08-07T14:04:33.580297" mime_type="application/json" content_type="text">
    <content>{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CapabilityFile",
  "description": "Capability formats accepted in a capability file.",
  "anyOf": [
    {
      "description": "A single capability.",
      "allOf": [
        {
          "$ref": "#/definitions/Capability"
        }
      ]
    },
    {
      "description": "A list of capabilities.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Capability"
      }
    },
    {
      "description": "A list of capabilities.",
      "type": "object",
      "required": [
        "capabilities"
      ],
      "properties": {
        "capabilities": {
          "description": "The list of capabilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    }
  ],
  "definitions": {
    "Capability": {
      "description": "A grouping and boundary mechanism developers can use to isolate access to the IPC layer.\n\nIt controls application windows' and webviews' fine grained access to the Tauri core, application, or plugin commands. If a webview or its window is not matching any capability then it has no access to the IPC layer at all.\n\nThis can be done to create groups of windows, based on their required system access, which can reduce impact of frontend vulnerabilities in less privileged windows. Windows can be added to a capability by exact name (e.g. `main-window`) or glob patterns like `*` or `admin-*`. A Window can have none, one, or multiple associated capabilities.\n\n## Example\n\n```json { \"identifier\": \"main-user-files-write\", \"description\": \"This capability allows the `main` window on macOS and Windows access to `filesystem` write related commands and `dialog` commands to enable programmatic access to files selected by the user.\", \"windows\": [ \"main\" ], \"permissions\": [ \"core:default\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] }, ], \"platforms\": [\"macOS\",\"windows\"] } ```",
      "type": "object",
      "required": [
        "identifier",
        "permissions"
      ],
      "properties": {
        "identifier": {
          "description": "Identifier of the capability.\n\n## Example\n\n`main-user-files-write`",
          "type": "string"
        },
        "description": {
          "description": "Description of what the capability is intended to allow on associated windows.\n\nIt should contain a description of what the grouped permissions should allow.\n\n## Example\n\nThis capability allows the `main` window access to `filesystem` write related commands and `dialog` commands to enable programmatic access to files selected by the user.",
          "default": "",
          "type": "string"
        },
        "remote": {
          "description": "Configure remote URLs that can use the capability permissions.\n\nThis setting is optional and defaults to not being set, as our default use case is that the content is served from our local application.\n\n:::caution Make sure you understand the security implications of providing remote sources with local system access. :::\n\n## Example\n\n```json { \"urls\": [\"https://*.mydomain.dev\"] } ```",
          "anyOf": [
            {
              "$ref": "#/definitions/CapabilityRemote"
            },
            {
              "type": "null"
            }
          ]
        },
        "local": {
          "description": "Whether this capability is enabled for local app URLs or not. Defaults to `true`.",
          "default": true,
          "type": "boolean"
        },
        "windows": {
          "description": "List of windows that are affected by this capability. Can be a glob pattern.\n\nIf a window label matches any of the patterns in this list, the capability will be enabled on all the webviews of that window, regardless of the value of [`Self::webviews`].\n\nOn multiwebview windows, prefer specifying [`Self::webviews`] and omitting [`Self::windows`] for a fine grained access control.\n\n## Example\n\n`[\"main\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "webviews": {
          "description": "List of webviews that are affected by this capability. Can be a glob pattern.\n\nThe capability will be enabled on all the webviews whose label matches any of the patterns in this list, regardless of whether the webview's window label matches a pattern in [`Self::windows`].\n\n## Example\n\n`[\"sub-webview-one\", \"sub-webview-two\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "description": "List of permissions attached to this capability.\n\nMust include the plugin name as prefix in the form of `${plugin-name}:${permission-name}`. For commands directly implemented in the application itself only `${permission-name}` is required.\n\n## Example\n\n```json [ \"core:default\", \"shell:allow-open\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] } ] ```",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionEntry"
          },
          "uniqueItems": true
        },
        "platforms": {
          "description": "Limit which target platforms this capability applies to.\n\nBy default all platforms are targeted.\n\n## Example\n\n`[\"macOS\",\"windows\"]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "CapabilityRemote": {
      "description": "Configuration for remote URLs that are associated with the capability.",
      "type": "object",
      "required": [
        "urls"
      ],
      "properties": {
        "urls": {
          "description": "Remote domains this capability refers to using the [URLPattern standard](https://urlpattern.spec.whatwg.org/).\n\n## Examples\n\n- \"https://*.mydomain.dev\": allows subdomains of mydomain.dev - \"https://mydomain.dev/api/*\": allows any subpath of mydomain.dev/api",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionEntry": {
      "description": "An entry for a permission value in a [`Capability`] can be either a raw permission [`Identifier`] or an object that references a permission and extends its scope.",
      "anyOf": [
        {
          "description": "Reference a permission or permission set by identifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Identifier"
            }
          ]
        },
        {
          "description": "Reference a permission or permission set by identifier and extends its scope.",
          "type": "object",
          "allOf": [
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
                        "type": "string",
                        "const": "opener:default",
                        "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
                      },
                      {
                        "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
                        "type": "string",
                        "const": "opener:allow-default-urls",
                        "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
                      },
                      {
                        "description": "Enables the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-path",
                        "markdownDescription": "Enables the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-url",
                        "markdownDescription": "Enables the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-reveal-item-in-dir",
                        "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-path",
                        "markdownDescription": "Denies the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-url",
                        "markdownDescription": "Denies the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-reveal-item-in-dir",
                        "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                },
                "allow": {
                  "description": "Data that defines what is allowed by the scope.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                },
                "deny": {
                  "description": "Data that defines what is denied by the scope. This should be prioritized by validation logic.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                }
              }
            }
          ],
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Identifier": {
      "description": "Permission identifier",
      "oneOf": [
        {
          "description": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`",
          "type": "string",
          "const": "core:default",
          "markdownDescription": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`"
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`\n- `allow-bundle-type`",
          "type": "string",
          "const": "core:app:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`\n- `allow-bundle-type`"
        },
        {
          "description": "Enables the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-hide",
          "markdownDescription": "Enables the app_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-show",
          "markdownDescription": "Enables the app_show command without any pre-configured scope."
        },
        {
          "description": "Enables the bundle_type command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-bundle-type",
          "markdownDescription": "Enables the bundle_type command without any pre-configured scope."
        },
        {
          "description": "Enables the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-default-window-icon",
          "markdownDescription": "Enables the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-fetch-data-store-identifiers",
          "markdownDescription": "Enables the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Enables the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-identifier",
          "markdownDescription": "Enables the identifier command without any pre-configured scope."
        },
        {
          "description": "Enables the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-name",
          "markdownDescription": "Enables the name command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-remove-data-store",
          "markdownDescription": "Enables the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Enables the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-app-theme",
          "markdownDescription": "Enables the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-dock-visibility",
          "markdownDescription": "Enables the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Enables the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-tauri-version",
          "markdownDescription": "Enables the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Enables the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-version",
          "markdownDescription": "Enables the version command without any pre-configured scope."
        },
        {
          "description": "Denies the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-hide",
          "markdownDescription": "Denies the app_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-show",
          "markdownDescription": "Denies the app_show command without any pre-configured scope."
        },
        {
          "description": "Denies the bundle_type command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-bundle-type",
          "markdownDescription": "Denies the bundle_type command without any pre-configured scope."
        },
        {
          "description": "Denies the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-default-window-icon",
          "markdownDescription": "Denies the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-fetch-data-store-identifiers",
          "markdownDescription": "Denies the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Denies the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-identifier",
          "markdownDescription": "Denies the identifier command without any pre-configured scope."
        },
        {
          "description": "Denies the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-name",
          "markdownDescription": "Denies the name command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-remove-data-store",
          "markdownDescription": "Denies the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Denies the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-app-theme",
          "markdownDescription": "Denies the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-dock-visibility",
          "markdownDescription": "Denies the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Denies the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-tauri-version",
          "markdownDescription": "Denies the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Denies the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-version",
          "markdownDescription": "Denies the version command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`",
          "type": "string",
          "const": "core:event:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`"
        },
        {
          "description": "Enables the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit",
          "markdownDescription": "Enables the emit command without any pre-configured scope."
        },
        {
          "description": "Enables the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit-to",
          "markdownDescription": "Enables the emit_to command without any pre-configured scope."
        },
        {
          "description": "Enables the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-listen",
          "markdownDescription": "Enables the listen command without any pre-configured scope."
        },
        {
          "description": "Enables the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-unlisten",
          "markdownDescription": "Enables the unlisten command without any pre-configured scope."
        },
        {
          "description": "Denies the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit",
          "markdownDescription": "Denies the emit command without any pre-configured scope."
        },
        {
          "description": "Denies the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit-to",
          "markdownDescription": "Denies the emit_to command without any pre-configured scope."
        },
        {
          "description": "Denies the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-listen",
          "markdownDescription": "Denies the listen command without any pre-configured scope."
        },
        {
          "description": "Denies the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-unlisten",
          "markdownDescription": "Denies the unlisten command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`",
          "type": "string",
          "const": "core:image:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`"
        },
        {
          "description": "Enables the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-bytes",
          "markdownDescription": "Enables the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Enables the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-path",
          "markdownDescription": "Enables the from_path command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-rgba",
          "markdownDescription": "Enables the rgba command without any pre-configured scope."
        },
        {
          "description": "Enables the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-size",
          "markdownDescription": "Enables the size command without any pre-configured scope."
        },
        {
          "description": "Denies the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-bytes",
          "markdownDescription": "Denies the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Denies the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-path",
          "markdownDescription": "Denies the from_path command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-rgba",
          "markdownDescription": "Denies the rgba command without any pre-configured scope."
        },
        {
          "description": "Denies the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-size",
          "markdownDescription": "Denies the size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`",
          "type": "string",
          "const": "core:menu:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`"
        },
        {
          "description": "Enables the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-append",
          "markdownDescription": "Enables the append command without any pre-configured scope."
        },
        {
          "description": "Enables the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-create-default",
          "markdownDescription": "Enables the create_default command without any pre-configured scope."
        },
        {
          "description": "Enables the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-get",
          "markdownDescription": "Enables the get command without any pre-configured scope."
        },
        {
          "description": "Enables the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-insert",
          "markdownDescription": "Enables the insert command without any pre-configured scope."
        },
        {
          "description": "Enables the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-checked",
          "markdownDescription": "Enables the is_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-items",
          "markdownDescription": "Enables the items command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-popup",
          "markdownDescription": "Enables the popup command without any pre-configured scope."
        },
        {
          "description": "Enables the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-prepend",
          "markdownDescription": "Enables the prepend command without any pre-configured scope."
        },
        {
          "description": "Enables the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove",
          "markdownDescription": "Enables the remove command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove-at",
          "markdownDescription": "Enables the remove_at command without any pre-configured scope."
        },
        {
          "description": "Enables the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-accelerator",
          "markdownDescription": "Enables the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-app-menu",
          "markdownDescription": "Enables the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-help-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-window-menu",
          "markdownDescription": "Enables the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-checked",
          "markdownDescription": "Enables the set_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-text",
          "markdownDescription": "Enables the set_text command without any pre-configured scope."
        },
        {
          "description": "Enables the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-text",
          "markdownDescription": "Enables the text command without any pre-configured scope."
        },
        {
          "description": "Denies the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-append",
          "markdownDescription": "Denies the append command without any pre-configured scope."
        },
        {
          "description": "Denies the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-create-default",
          "markdownDescription": "Denies the create_default command without any pre-configured scope."
        },
        {
          "description": "Denies the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-get",
          "markdownDescription": "Denies the get command without any pre-configured scope."
        },
        {
          "description": "Denies the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-insert",
          "markdownDescription": "Denies the insert command without any pre-configured scope."
        },
        {
          "description": "Denies the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-checked",
          "markdownDescription": "Denies the is_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-items",
          "markdownDescription": "Denies the items command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-popup",
          "markdownDescription": "Denies the popup command without any pre-configured scope."
        },
        {
          "description": "Denies the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-prepend",
          "markdownDescription": "Denies the prepend command without any pre-configured scope."
        },
        {
          "description": "Denies the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove",
          "markdownDescription": "Denies the remove command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove-at",
          "markdownDescription": "Denies the remove_at command without any pre-configured scope."
        },
        {
          "description": "Denies the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-accelerator",
          "markdownDescription": "Denies the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-app-menu",
          "markdownDescription": "Denies the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-help-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-window-menu",
          "markdownDescription": "Denies the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-checked",
          "markdownDescription": "Denies the set_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-text",
          "markdownDescription": "Denies the set_text command without any pre-configured scope."
        },
        {
          "description": "Denies the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-text",
          "markdownDescription": "Denies the text command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`",
          "type": "string",
          "const": "core:path:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`"
        },
        {
          "description": "Enables the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-basename",
          "markdownDescription": "Enables the basename command without any pre-configured scope."
        },
        {
          "description": "Enables the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-dirname",
          "markdownDescription": "Enables the dirname command without any pre-configured scope."
        },
        {
          "description": "Enables the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-extname",
          "markdownDescription": "Enables the extname command without any pre-configured scope."
        },
        {
          "description": "Enables the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-is-absolute",
          "markdownDescription": "Enables the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Enables the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-join",
          "markdownDescription": "Enables the join command without any pre-configured scope."
        },
        {
          "description": "Enables the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-normalize",
          "markdownDescription": "Enables the normalize command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve",
          "markdownDescription": "Enables the resolve command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve-directory",
          "markdownDescription": "Enables the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Denies the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-basename",
          "markdownDescription": "Denies the basename command without any pre-configured scope."
        },
        {
          "description": "Denies the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-dirname",
          "markdownDescription": "Denies the dirname command without any pre-configured scope."
        },
        {
          "description": "Denies the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-extname",
          "markdownDescription": "Denies the extname command without any pre-configured scope."
        },
        {
          "description": "Denies the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-is-absolute",
          "markdownDescription": "Denies the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Denies the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-join",
          "markdownDescription": "Denies the join command without any pre-configured scope."
        },
        {
          "description": "Denies the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-normalize",
          "markdownDescription": "Denies the normalize command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve",
          "markdownDescription": "Denies the resolve command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve-directory",
          "markdownDescription": "Denies the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`",
          "type": "string",
          "const": "core:resources:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`"
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`",
          "type": "string",
          "const": "core:tray:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`"
        },
        {
          "description": "Enables the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-get-by-id",
          "markdownDescription": "Enables the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-remove-by-id",
          "markdownDescription": "Enables the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon-as-template",
          "markdownDescription": "Enables the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Enables the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-menu",
          "markdownDescription": "Enables the set_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-show-menu-on-left-click",
          "markdownDescription": "Enables the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Enables the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-temp-dir-path",
          "markdownDescription": "Enables the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-tooltip",
          "markdownDescription": "Enables the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-visible",
          "markdownDescription": "Enables the set_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-get-by-id",
          "markdownDescription": "Denies the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-remove-by-id",
          "markdownDescription": "Denies the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon-as-template",
          "markdownDescription": "Denies the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Denies the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-menu",
          "markdownDescription": "Denies the set_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-show-menu-on-left-click",
          "markdownDescription": "Denies the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Denies the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-temp-dir-path",
          "markdownDescription": "Denies the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-tooltip",
          "markdownDescription": "Denies the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-visible",
          "markdownDescription": "Denies the set_visible command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`",
          "type": "string",
          "const": "core:webview:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`"
        },
        {
          "description": "Enables the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-clear-all-browsing-data",
          "markdownDescription": "Enables the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview",
          "markdownDescription": "Enables the create_webview command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview-window",
          "markdownDescription": "Enables the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-get-all-webviews",
          "markdownDescription": "Enables the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-internal-toggle-devtools",
          "markdownDescription": "Enables the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Enables the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-print",
          "markdownDescription": "Enables the print command without any pre-configured scope."
        },
        {
          "description": "Enables the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-reparent",
          "markdownDescription": "Enables the reparent command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_auto_resize command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-auto-resize",
          "markdownDescription": "Enables the set_webview_auto_resize command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-background-color",
          "markdownDescription": "Enables the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-focus",
          "markdownDescription": "Enables the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-position",
          "markdownDescription": "Enables the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-size",
          "markdownDescription": "Enables the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-zoom",
          "markdownDescription": "Enables the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-close",
          "markdownDescription": "Enables the webview_close command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-hide",
          "markdownDescription": "Enables the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-position",
          "markdownDescription": "Enables the webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-show",
          "markdownDescription": "Enables the webview_show command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-size",
          "markdownDescription": "Enables the webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-clear-all-browsing-data",
          "markdownDescription": "Denies the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview",
          "markdownDescription": "Denies the create_webview command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview-window",
          "markdownDescription": "Denies the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-get-all-webviews",
          "markdownDescription": "Denies the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-internal-toggle-devtools",
          "markdownDescription": "Denies the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Denies the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-print",
          "markdownDescription": "Denies the print command without any pre-configured scope."
        },
        {
          "description": "Denies the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-reparent",
          "markdownDescription": "Denies the reparent command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_auto_resize command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-auto-resize",
          "markdownDescription": "Denies the set_webview_auto_resize command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-background-color",
          "markdownDescription": "Denies the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-focus",
          "markdownDescription": "Denies the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-position",
          "markdownDescription": "Denies the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-size",
          "markdownDescription": "Denies the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-zoom",
          "markdownDescription": "Denies the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-close",
          "markdownDescription": "Denies the webview_close command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-hide",
          "markdownDescription": "Denies the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-position",
          "markdownDescription": "Denies the webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-show",
          "markdownDescription": "Denies the webview_show command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-size",
          "markdownDescription": "Denies the webview_size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`",
          "type": "string",
          "const": "core:window:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`"
        },
        {
          "description": "Enables the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-available-monitors",
          "markdownDescription": "Enables the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Enables the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-center",
          "markdownDescription": "Enables the center command without any pre-configured scope."
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Enables the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-create",
          "markdownDescription": "Enables the create command without any pre-configured scope."
        },
        {
          "description": "Enables the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-current-monitor",
          "markdownDescription": "Enables the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-cursor-position",
          "markdownDescription": "Enables the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-destroy",
          "markdownDescription": "Enables the destroy command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-get-all-windows",
          "markdownDescription": "Enables the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Enables the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-hide",
          "markdownDescription": "Enables the hide command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-position",
          "markdownDescription": "Enables the inner_position command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-size",
          "markdownDescription": "Enables the inner_size command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-internal-toggle-maximize",
          "markdownDescription": "Enables the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-always-on-top",
          "markdownDescription": "Enables the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-closable",
          "markdownDescription": "Enables the is_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-decorated",
          "markdownDescription": "Enables the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-focused",
          "markdownDescription": "Enables the is_focused command without any pre-configured scope."
        },
        {
          "description": "Enables the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-fullscreen",
          "markdownDescription": "Enables the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximizable",
          "markdownDescription": "Enables the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximized",
          "markdownDescription": "Enables the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimizable",
          "markdownDescription": "Enables the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimized",
          "markdownDescription": "Enables the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-resizable",
          "markdownDescription": "Enables the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-visible",
          "markdownDescription": "Enables the is_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-maximize",
          "markdownDescription": "Enables the maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-minimize",
          "markdownDescription": "Enables the minimize command without any pre-configured scope."
        },
        {
          "description": "Enables the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-monitor-from-point",
          "markdownDescription": "Enables the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-position",
          "markdownDescription": "Enables the outer_position command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-size",
          "markdownDescription": "Enables the outer_size command without any pre-configured scope."
        },
        {
          "description": "Enables the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-primary-monitor",
          "markdownDescription": "Enables the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-request-user-attention",
          "markdownDescription": "Enables the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Enables the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-scale-factor",
          "markdownDescription": "Enables the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-bottom",
          "markdownDescription": "Enables the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-top",
          "markdownDescription": "Enables the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-background-color",
          "markdownDescription": "Enables the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-count",
          "markdownDescription": "Enables the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-label",
          "markdownDescription": "Enables the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Enables the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-closable",
          "markdownDescription": "Enables the set_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-content-protected",
          "markdownDescription": "Enables the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-grab",
          "markdownDescription": "Enables the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-icon",
          "markdownDescription": "Enables the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-position",
          "markdownDescription": "Enables the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-visible",
          "markdownDescription": "Enables the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-decorations",
          "markdownDescription": "Enables the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Enables the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-effects",
          "markdownDescription": "Enables the set_effects command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-focus",
          "markdownDescription": "Enables the set_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-fullscreen",
          "markdownDescription": "Enables the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-ignore-cursor-events",
          "markdownDescription": "Enables the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Enables the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-max-size",
          "markdownDescription": "Enables the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-maximizable",
          "markdownDescription": "Enables the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-min-size",
          "markdownDescription": "Enables the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-minimizable",
          "markdownDescription": "Enables the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-overlay-icon",
          "markdownDescription": "Enables the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-position",
          "markdownDescription": "Enables the set_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-progress-bar",
          "markdownDescription": "Enables the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-resizable",
          "markdownDescription": "Enables the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-shadow",
          "markdownDescription": "Enables the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size",
          "markdownDescription": "Enables the set_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size-constraints",
          "markdownDescription": "Enables the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Enables the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-skip-taskbar",
          "markdownDescription": "Enables the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-theme",
          "markdownDescription": "Enables the set_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title-bar-style",
          "markdownDescription": "Enables the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-visible-on-all-workspaces",
          "markdownDescription": "Enables the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Enables the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-show",
          "markdownDescription": "Enables the show command without any pre-configured scope."
        },
        {
          "description": "Enables the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-dragging",
          "markdownDescription": "Enables the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-resize-dragging",
          "markdownDescription": "Enables the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-theme",
          "markdownDescription": "Enables the theme command without any pre-configured scope."
        },
        {
          "description": "Enables the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-title",
          "markdownDescription": "Enables the title command without any pre-configured scope."
        },
        {
          "description": "Enables the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-toggle-maximize",
          "markdownDescription": "Enables the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unmaximize",
          "markdownDescription": "Enables the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unminimize",
          "markdownDescription": "Enables the unminimize command without any pre-configured scope."
        },
        {
          "description": "Denies the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-available-monitors",
          "markdownDescription": "Denies the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Denies the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-center",
          "markdownDescription": "Denies the center command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Denies the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-create",
          "markdownDescription": "Denies the create command without any pre-configured scope."
        },
        {
          "description": "Denies the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-current-monitor",
          "markdownDescription": "Denies the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-cursor-position",
          "markdownDescription": "Denies the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-destroy",
          "markdownDescription": "Denies the destroy command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-get-all-windows",
          "markdownDescription": "Denies the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Denies the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-hide",
          "markdownDescription": "Denies the hide command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-position",
          "markdownDescription": "Denies the inner_position command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-size",
          "markdownDescription": "Denies the inner_size command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-internal-toggle-maximize",
          "markdownDescription": "Denies the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-always-on-top",
          "markdownDescription": "Denies the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-closable",
          "markdownDescription": "Denies the is_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-decorated",
          "markdownDescription": "Denies the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-focused",
          "markdownDescription": "Denies the is_focused command without any pre-configured scope."
        },
        {
          "description": "Denies the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-fullscreen",
          "markdownDescription": "Denies the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximizable",
          "markdownDescription": "Denies the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximized",
          "markdownDescription": "Denies the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimizable",
          "markdownDescription": "Denies the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimized",
          "markdownDescription": "Denies the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-resizable",
          "markdownDescription": "Denies the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-visible",
          "markdownDescription": "Denies the is_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-maximize",
          "markdownDescription": "Denies the maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-minimize",
          "markdownDescription": "Denies the minimize command without any pre-configured scope."
        },
        {
          "description": "Denies the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-monitor-from-point",
          "markdownDescription": "Denies the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-position",
          "markdownDescription": "Denies the outer_position command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-size",
          "markdownDescription": "Denies the outer_size command without any pre-configured scope."
        },
        {
          "description": "Denies the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-primary-monitor",
          "markdownDescription": "Denies the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-request-user-attention",
          "markdownDescription": "Denies the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Denies the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-scale-factor",
          "markdownDescription": "Denies the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-bottom",
          "markdownDescription": "Denies the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-top",
          "markdownDescription": "Denies the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-background-color",
          "markdownDescription": "Denies the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-count",
          "markdownDescription": "Denies the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-label",
          "markdownDescription": "Denies the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Denies the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-closable",
          "markdownDescription": "Denies the set_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-content-protected",
          "markdownDescription": "Denies the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-grab",
          "markdownDescription": "Denies the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-icon",
          "markdownDescription": "Denies the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-position",
          "markdownDescription": "Denies the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-visible",
          "markdownDescription": "Denies the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-decorations",
          "markdownDescription": "Denies the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Denies the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-effects",
          "markdownDescription": "Denies the set_effects command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-focus",
          "markdownDescription": "Denies the set_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-fullscreen",
          "markdownDescription": "Denies the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-ignore-cursor-events",
          "markdownDescription": "Denies the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Denies the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-max-size",
          "markdownDescription": "Denies the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-maximizable",
          "markdownDescription": "Denies the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-min-size",
          "markdownDescription": "Denies the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-minimizable",
          "markdownDescription": "Denies the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-overlay-icon",
          "markdownDescription": "Denies the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-position",
          "markdownDescription": "Denies the set_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-progress-bar",
          "markdownDescription": "Denies the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-resizable",
          "markdownDescription": "Denies the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-shadow",
          "markdownDescription": "Denies the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size",
          "markdownDescription": "Denies the set_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size-constraints",
          "markdownDescription": "Denies the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Denies the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-skip-taskbar",
          "markdownDescription": "Denies the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-theme",
          "markdownDescription": "Denies the set_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title-bar-style",
          "markdownDescription": "Denies the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-visible-on-all-workspaces",
          "markdownDescription": "Denies the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Denies the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-show",
          "markdownDescription": "Denies the show command without any pre-configured scope."
        },
        {
          "description": "Denies the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-dragging",
          "markdownDescription": "Denies the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-resize-dragging",
          "markdownDescription": "Denies the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-theme",
          "markdownDescription": "Denies the theme command without any pre-configured scope."
        },
        {
          "description": "Denies the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-title",
          "markdownDescription": "Denies the title command without any pre-configured scope."
        },
        {
          "description": "Denies the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-toggle-maximize",
          "markdownDescription": "Denies the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unmaximize",
          "markdownDescription": "Denies the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unminimize",
          "markdownDescription": "Denies the unminimize command without any pre-configured scope."
        },
        {
          "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
          "type": "string",
          "const": "opener:default",
          "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
        },
        {
          "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
          "type": "string",
          "const": "opener:allow-default-urls",
          "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
        },
        {
          "description": "Enables the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-path",
          "markdownDescription": "Enables the open_path command without any pre-configured scope."
        },
        {
          "description": "Enables the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-url",
          "markdownDescription": "Enables the open_url command without any pre-configured scope."
        },
        {
          "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-reveal-item-in-dir",
          "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
        },
        {
          "description": "Denies the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-path",
          "markdownDescription": "Denies the open_path command without any pre-configured scope."
        },
        {
          "description": "Denies the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-url",
          "markdownDescription": "Denies the open_url command without any pre-configured scope."
        },
        {
          "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-reveal-item-in-dir",
          "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
        }
      ]
    },
    "Value": {
      "description": "All supported ACL values.",
      "anyOf": [
        {
          "description": "Represents a null JSON value.",
          "type": "null"
        },
        {
          "description": "Represents a [`bool`].",
          "type": "boolean"
        },
        {
          "description": "Represents a valid ACL [`Number`].",
          "allOf": [
            {
              "$ref": "#/definitions/Number"
            }
          ]
        },
        {
          "description": "Represents a [`String`].",
          "type": "string"
        },
        {
          "description": "Represents a list of other [`Value`]s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          }
        },
        {
          "description": "Represents a map of [`String`] keys to [`Value`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Value"
          }
        }
      ]
    },
    "Number": {
      "description": "A valid ACL number.",
      "anyOf": [
        {
          "description": "Represents an [`i64`].",
          "type": "integer",
          "format": "int64"
        },
        {
          "description": "Represents a [`f64`].",
          "type": "number",
          "format": "double"
        }
      ]
    },
    "Target": {
      "description": "Platform target.",
      "oneOf": [
        {
          "description": "MacOS.",
          "type": "string",
          "enum": [
            "macOS"
          ]
        },
        {
          "description": "Windows.",
          "type": "string",
          "enum": [
            "windows"
          ]
        },
        {
          "description": "Linux.",
          "type": "string",
          "enum": [
            "linux"
          ]
        },
        {
          "description": "Android.",
          "type": "string",
          "enum": [
            "android"
          ]
        },
        {
          "description": "iOS.",
          "type": "string",
          "enum": [
            "iOS"
          ]
        }
      ]
    },
    "Application": {
      "description": "Opener scope application.",
      "anyOf": [
        {
          "description": "Open in default application.",
          "type": "null"
        },
        {
          "description": "If true, allow open with any application.",
          "type": "boolean"
        },
        {
          "description": "Allow specific application to open with.",
          "type": "string"
        }
      ]
    }
  }
}</content>
  </file>
  <file path="src-tauri\gen\schemas\windows-schema.json" size="123731" modified_time="2025-08-07T14:04:33.580297" mime_type="application/json" content_type="text">
    <content>{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "title": "CapabilityFile",
  "description": "Capability formats accepted in a capability file.",
  "anyOf": [
    {
      "description": "A single capability.",
      "allOf": [
        {
          "$ref": "#/definitions/Capability"
        }
      ]
    },
    {
      "description": "A list of capabilities.",
      "type": "array",
      "items": {
        "$ref": "#/definitions/Capability"
      }
    },
    {
      "description": "A list of capabilities.",
      "type": "object",
      "required": [
        "capabilities"
      ],
      "properties": {
        "capabilities": {
          "description": "The list of capabilities.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Capability"
          }
        }
      }
    }
  ],
  "definitions": {
    "Capability": {
      "description": "A grouping and boundary mechanism developers can use to isolate access to the IPC layer.\n\nIt controls application windows' and webviews' fine grained access to the Tauri core, application, or plugin commands. If a webview or its window is not matching any capability then it has no access to the IPC layer at all.\n\nThis can be done to create groups of windows, based on their required system access, which can reduce impact of frontend vulnerabilities in less privileged windows. Windows can be added to a capability by exact name (e.g. `main-window`) or glob patterns like `*` or `admin-*`. A Window can have none, one, or multiple associated capabilities.\n\n## Example\n\n```json { \"identifier\": \"main-user-files-write\", \"description\": \"This capability allows the `main` window on macOS and Windows access to `filesystem` write related commands and `dialog` commands to enable programmatic access to files selected by the user.\", \"windows\": [ \"main\" ], \"permissions\": [ \"core:default\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] }, ], \"platforms\": [\"macOS\",\"windows\"] } ```",
      "type": "object",
      "required": [
        "identifier",
        "permissions"
      ],
      "properties": {
        "identifier": {
          "description": "Identifier of the capability.\n\n## Example\n\n`main-user-files-write`",
          "type": "string"
        },
        "description": {
          "description": "Description of what the capability is intended to allow on associated windows.\n\nIt should contain a description of what the grouped permissions should allow.\n\n## Example\n\nThis capability allows the `main` window access to `filesystem` write related commands and `dialog` commands to enable programmatic access to files selected by the user.",
          "default": "",
          "type": "string"
        },
        "remote": {
          "description": "Configure remote URLs that can use the capability permissions.\n\nThis setting is optional and defaults to not being set, as our default use case is that the content is served from our local application.\n\n:::caution Make sure you understand the security implications of providing remote sources with local system access. :::\n\n## Example\n\n```json { \"urls\": [\"https://*.mydomain.dev\"] } ```",
          "anyOf": [
            {
              "$ref": "#/definitions/CapabilityRemote"
            },
            {
              "type": "null"
            }
          ]
        },
        "local": {
          "description": "Whether this capability is enabled for local app URLs or not. Defaults to `true`.",
          "default": true,
          "type": "boolean"
        },
        "windows": {
          "description": "List of windows that are affected by this capability. Can be a glob pattern.\n\nIf a window label matches any of the patterns in this list, the capability will be enabled on all the webviews of that window, regardless of the value of [`Self::webviews`].\n\nOn multiwebview windows, prefer specifying [`Self::webviews`] and omitting [`Self::windows`] for a fine grained access control.\n\n## Example\n\n`[\"main\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "webviews": {
          "description": "List of webviews that are affected by this capability. Can be a glob pattern.\n\nThe capability will be enabled on all the webviews whose label matches any of the patterns in this list, regardless of whether the webview's window label matches a pattern in [`Self::windows`].\n\n## Example\n\n`[\"sub-webview-one\", \"sub-webview-two\"]`",
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "permissions": {
          "description": "List of permissions attached to this capability.\n\nMust include the plugin name as prefix in the form of `${plugin-name}:${permission-name}`. For commands directly implemented in the application itself only `${permission-name}` is required.\n\n## Example\n\n```json [ \"core:default\", \"shell:allow-open\", \"dialog:open\", { \"identifier\": \"fs:allow-write-text-file\", \"allow\": [{ \"path\": \"$HOME/test.txt\" }] } ] ```",
          "type": "array",
          "items": {
            "$ref": "#/definitions/PermissionEntry"
          },
          "uniqueItems": true
        },
        "platforms": {
          "description": "Limit which target platforms this capability applies to.\n\nBy default all platforms are targeted.\n\n## Example\n\n`[\"macOS\",\"windows\"]`",
          "type": [
            "array",
            "null"
          ],
          "items": {
            "$ref": "#/definitions/Target"
          }
        }
      }
    },
    "CapabilityRemote": {
      "description": "Configuration for remote URLs that are associated with the capability.",
      "type": "object",
      "required": [
        "urls"
      ],
      "properties": {
        "urls": {
          "description": "Remote domains this capability refers to using the [URLPattern standard](https://urlpattern.spec.whatwg.org/).\n\n## Examples\n\n- \"https://*.mydomain.dev\": allows subdomains of mydomain.dev - \"https://mydomain.dev/api/*\": allows any subpath of mydomain.dev/api",
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "PermissionEntry": {
      "description": "An entry for a permission value in a [`Capability`] can be either a raw permission [`Identifier`] or an object that references a permission and extends its scope.",
      "anyOf": [
        {
          "description": "Reference a permission or permission set by identifier.",
          "allOf": [
            {
              "$ref": "#/definitions/Identifier"
            }
          ]
        },
        {
          "description": "Reference a permission or permission set by identifier and extends its scope.",
          "type": "object",
          "allOf": [
            {
              "if": {
                "properties": {
                  "identifier": {
                    "anyOf": [
                      {
                        "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
                        "type": "string",
                        "const": "opener:default",
                        "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
                      },
                      {
                        "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
                        "type": "string",
                        "const": "opener:allow-default-urls",
                        "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
                      },
                      {
                        "description": "Enables the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-path",
                        "markdownDescription": "Enables the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-open-url",
                        "markdownDescription": "Enables the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:allow-reveal-item-in-dir",
                        "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_path command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-path",
                        "markdownDescription": "Denies the open_path command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the open_url command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-open-url",
                        "markdownDescription": "Denies the open_url command without any pre-configured scope."
                      },
                      {
                        "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
                        "type": "string",
                        "const": "opener:deny-reveal-item-in-dir",
                        "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
                      }
                    ]
                  }
                }
              },
              "then": {
                "properties": {
                  "allow": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  },
                  "deny": {
                    "items": {
                      "title": "OpenerScopeEntry",
                      "description": "Opener scope entry.",
                      "anyOf": [
                        {
                          "type": "object",
                          "required": [
                            "url"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this url with, for example: firefox.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "url": {
                              "description": "A URL that can be opened by the webview when using the Opener APIs.\n\nWildcards can be used following the UNIX glob pattern.\n\nExamples:\n\n- \"https://*\" : allows all HTTPS origin\n\n- \"https://*.github.com/tauri-apps/tauri\": allows any subdomain of \"github.com\" with the \"tauri-apps/api\" path\n\n- \"https://myapi.service.com/users/*\": allows access to any URLs that begins with \"https://myapi.service.com/users/\"",
                              "type": "string"
                            }
                          }
                        },
                        {
                          "type": "object",
                          "required": [
                            "path"
                          ],
                          "properties": {
                            "app": {
                              "description": "An application to open this path with, for example: xdg-open.",
                              "allOf": [
                                {
                                  "$ref": "#/definitions/Application"
                                }
                              ]
                            },
                            "path": {
                              "description": "A path that can be opened by the webview when using the Opener APIs.\n\nThe pattern can start with a variable that resolves to a system base directory. The variables are: `$AUDIO`, `$CACHE`, `$CONFIG`, `$DATA`, `$LOCALDATA`, `$DESKTOP`, `$DOCUMENT`, `$DOWNLOAD`, `$EXE`, `$FONT`, `$HOME`, `$PICTURE`, `$PUBLIC`, `$RUNTIME`, `$TEMPLATE`, `$VIDEO`, `$RESOURCE`, `$APP`, `$LOG`, `$TEMP`, `$APPCONFIG`, `$APPDATA`, `$APPLOCALDATA`, `$APPCACHE`, `$APPLOG`.",
                              "type": "string"
                            }
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                }
              }
            },
            {
              "properties": {
                "identifier": {
                  "description": "Identifier of the permission or permission set.",
                  "allOf": [
                    {
                      "$ref": "#/definitions/Identifier"
                    }
                  ]
                },
                "allow": {
                  "description": "Data that defines what is allowed by the scope.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                },
                "deny": {
                  "description": "Data that defines what is denied by the scope. This should be prioritized by validation logic.",
                  "type": [
                    "array",
                    "null"
                  ],
                  "items": {
                    "$ref": "#/definitions/Value"
                  }
                }
              }
            }
          ],
          "required": [
            "identifier"
          ]
        }
      ]
    },
    "Identifier": {
      "description": "Permission identifier",
      "oneOf": [
        {
          "description": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`",
          "type": "string",
          "const": "core:default",
          "markdownDescription": "Default core plugins set.\n#### This default permission set includes:\n\n- `core:path:default`\n- `core:event:default`\n- `core:window:default`\n- `core:webview:default`\n- `core:app:default`\n- `core:image:default`\n- `core:resources:default`\n- `core:menu:default`\n- `core:tray:default`"
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`\n- `allow-bundle-type`",
          "type": "string",
          "const": "core:app:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-version`\n- `allow-name`\n- `allow-tauri-version`\n- `allow-identifier`\n- `allow-bundle-type`"
        },
        {
          "description": "Enables the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-hide",
          "markdownDescription": "Enables the app_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-app-show",
          "markdownDescription": "Enables the app_show command without any pre-configured scope."
        },
        {
          "description": "Enables the bundle_type command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-bundle-type",
          "markdownDescription": "Enables the bundle_type command without any pre-configured scope."
        },
        {
          "description": "Enables the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-default-window-icon",
          "markdownDescription": "Enables the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-fetch-data-store-identifiers",
          "markdownDescription": "Enables the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Enables the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-identifier",
          "markdownDescription": "Enables the identifier command without any pre-configured scope."
        },
        {
          "description": "Enables the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-name",
          "markdownDescription": "Enables the name command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-remove-data-store",
          "markdownDescription": "Enables the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Enables the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-app-theme",
          "markdownDescription": "Enables the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-set-dock-visibility",
          "markdownDescription": "Enables the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Enables the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-tauri-version",
          "markdownDescription": "Enables the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Enables the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:allow-version",
          "markdownDescription": "Enables the version command without any pre-configured scope."
        },
        {
          "description": "Denies the app_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-hide",
          "markdownDescription": "Denies the app_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the app_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-app-show",
          "markdownDescription": "Denies the app_show command without any pre-configured scope."
        },
        {
          "description": "Denies the bundle_type command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-bundle-type",
          "markdownDescription": "Denies the bundle_type command without any pre-configured scope."
        },
        {
          "description": "Denies the default_window_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-default-window-icon",
          "markdownDescription": "Denies the default_window_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the fetch_data_store_identifiers command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-fetch-data-store-identifiers",
          "markdownDescription": "Denies the fetch_data_store_identifiers command without any pre-configured scope."
        },
        {
          "description": "Denies the identifier command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-identifier",
          "markdownDescription": "Denies the identifier command without any pre-configured scope."
        },
        {
          "description": "Denies the name command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-name",
          "markdownDescription": "Denies the name command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_data_store command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-remove-data-store",
          "markdownDescription": "Denies the remove_data_store command without any pre-configured scope."
        },
        {
          "description": "Denies the set_app_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-app-theme",
          "markdownDescription": "Denies the set_app_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_dock_visibility command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-set-dock-visibility",
          "markdownDescription": "Denies the set_dock_visibility command without any pre-configured scope."
        },
        {
          "description": "Denies the tauri_version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-tauri-version",
          "markdownDescription": "Denies the tauri_version command without any pre-configured scope."
        },
        {
          "description": "Denies the version command without any pre-configured scope.",
          "type": "string",
          "const": "core:app:deny-version",
          "markdownDescription": "Denies the version command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`",
          "type": "string",
          "const": "core:event:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-listen`\n- `allow-unlisten`\n- `allow-emit`\n- `allow-emit-to`"
        },
        {
          "description": "Enables the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit",
          "markdownDescription": "Enables the emit command without any pre-configured scope."
        },
        {
          "description": "Enables the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-emit-to",
          "markdownDescription": "Enables the emit_to command without any pre-configured scope."
        },
        {
          "description": "Enables the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-listen",
          "markdownDescription": "Enables the listen command without any pre-configured scope."
        },
        {
          "description": "Enables the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:allow-unlisten",
          "markdownDescription": "Enables the unlisten command without any pre-configured scope."
        },
        {
          "description": "Denies the emit command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit",
          "markdownDescription": "Denies the emit command without any pre-configured scope."
        },
        {
          "description": "Denies the emit_to command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-emit-to",
          "markdownDescription": "Denies the emit_to command without any pre-configured scope."
        },
        {
          "description": "Denies the listen command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-listen",
          "markdownDescription": "Denies the listen command without any pre-configured scope."
        },
        {
          "description": "Denies the unlisten command without any pre-configured scope.",
          "type": "string",
          "const": "core:event:deny-unlisten",
          "markdownDescription": "Denies the unlisten command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`",
          "type": "string",
          "const": "core:image:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-from-bytes`\n- `allow-from-path`\n- `allow-rgba`\n- `allow-size`"
        },
        {
          "description": "Enables the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-bytes",
          "markdownDescription": "Enables the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Enables the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-from-path",
          "markdownDescription": "Enables the from_path command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-rgba",
          "markdownDescription": "Enables the rgba command without any pre-configured scope."
        },
        {
          "description": "Enables the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:allow-size",
          "markdownDescription": "Enables the size command without any pre-configured scope."
        },
        {
          "description": "Denies the from_bytes command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-bytes",
          "markdownDescription": "Denies the from_bytes command without any pre-configured scope."
        },
        {
          "description": "Denies the from_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-from-path",
          "markdownDescription": "Denies the from_path command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the rgba command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-rgba",
          "markdownDescription": "Denies the rgba command without any pre-configured scope."
        },
        {
          "description": "Denies the size command without any pre-configured scope.",
          "type": "string",
          "const": "core:image:deny-size",
          "markdownDescription": "Denies the size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`",
          "type": "string",
          "const": "core:menu:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-append`\n- `allow-prepend`\n- `allow-insert`\n- `allow-remove`\n- `allow-remove-at`\n- `allow-items`\n- `allow-get`\n- `allow-popup`\n- `allow-create-default`\n- `allow-set-as-app-menu`\n- `allow-set-as-window-menu`\n- `allow-text`\n- `allow-set-text`\n- `allow-is-enabled`\n- `allow-set-enabled`\n- `allow-set-accelerator`\n- `allow-set-as-windows-menu-for-nsapp`\n- `allow-set-as-help-menu-for-nsapp`\n- `allow-is-checked`\n- `allow-set-checked`\n- `allow-set-icon`"
        },
        {
          "description": "Enables the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-append",
          "markdownDescription": "Enables the append command without any pre-configured scope."
        },
        {
          "description": "Enables the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-create-default",
          "markdownDescription": "Enables the create_default command without any pre-configured scope."
        },
        {
          "description": "Enables the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-get",
          "markdownDescription": "Enables the get command without any pre-configured scope."
        },
        {
          "description": "Enables the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-insert",
          "markdownDescription": "Enables the insert command without any pre-configured scope."
        },
        {
          "description": "Enables the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-checked",
          "markdownDescription": "Enables the is_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-items",
          "markdownDescription": "Enables the items command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-popup",
          "markdownDescription": "Enables the popup command without any pre-configured scope."
        },
        {
          "description": "Enables the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-prepend",
          "markdownDescription": "Enables the prepend command without any pre-configured scope."
        },
        {
          "description": "Enables the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove",
          "markdownDescription": "Enables the remove command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-remove-at",
          "markdownDescription": "Enables the remove_at command without any pre-configured scope."
        },
        {
          "description": "Enables the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-accelerator",
          "markdownDescription": "Enables the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-app-menu",
          "markdownDescription": "Enables the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-help-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-window-menu",
          "markdownDescription": "Enables the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Enables the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Enables the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-checked",
          "markdownDescription": "Enables the set_checked command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-set-text",
          "markdownDescription": "Enables the set_text command without any pre-configured scope."
        },
        {
          "description": "Enables the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:allow-text",
          "markdownDescription": "Enables the text command without any pre-configured scope."
        },
        {
          "description": "Denies the append command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-append",
          "markdownDescription": "Denies the append command without any pre-configured scope."
        },
        {
          "description": "Denies the create_default command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-create-default",
          "markdownDescription": "Denies the create_default command without any pre-configured scope."
        },
        {
          "description": "Denies the get command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-get",
          "markdownDescription": "Denies the get command without any pre-configured scope."
        },
        {
          "description": "Denies the insert command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-insert",
          "markdownDescription": "Denies the insert command without any pre-configured scope."
        },
        {
          "description": "Denies the is_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-checked",
          "markdownDescription": "Denies the is_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the items command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-items",
          "markdownDescription": "Denies the items command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the popup command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-popup",
          "markdownDescription": "Denies the popup command without any pre-configured scope."
        },
        {
          "description": "Denies the prepend command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-prepend",
          "markdownDescription": "Denies the prepend command without any pre-configured scope."
        },
        {
          "description": "Denies the remove command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove",
          "markdownDescription": "Denies the remove command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_at command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-remove-at",
          "markdownDescription": "Denies the remove_at command without any pre-configured scope."
        },
        {
          "description": "Denies the set_accelerator command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-accelerator",
          "markdownDescription": "Denies the set_accelerator command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_app_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-app-menu",
          "markdownDescription": "Denies the set_as_app_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-help-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_help_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_window_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-window-menu",
          "markdownDescription": "Denies the set_as_window_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-as-windows-menu-for-nsapp",
          "markdownDescription": "Denies the set_as_windows_menu_for_nsapp command without any pre-configured scope."
        },
        {
          "description": "Denies the set_checked command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-checked",
          "markdownDescription": "Denies the set_checked command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-set-text",
          "markdownDescription": "Denies the set_text command without any pre-configured scope."
        },
        {
          "description": "Denies the text command without any pre-configured scope.",
          "type": "string",
          "const": "core:menu:deny-text",
          "markdownDescription": "Denies the text command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`",
          "type": "string",
          "const": "core:path:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-resolve-directory`\n- `allow-resolve`\n- `allow-normalize`\n- `allow-join`\n- `allow-dirname`\n- `allow-extname`\n- `allow-basename`\n- `allow-is-absolute`"
        },
        {
          "description": "Enables the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-basename",
          "markdownDescription": "Enables the basename command without any pre-configured scope."
        },
        {
          "description": "Enables the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-dirname",
          "markdownDescription": "Enables the dirname command without any pre-configured scope."
        },
        {
          "description": "Enables the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-extname",
          "markdownDescription": "Enables the extname command without any pre-configured scope."
        },
        {
          "description": "Enables the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-is-absolute",
          "markdownDescription": "Enables the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Enables the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-join",
          "markdownDescription": "Enables the join command without any pre-configured scope."
        },
        {
          "description": "Enables the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-normalize",
          "markdownDescription": "Enables the normalize command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve",
          "markdownDescription": "Enables the resolve command without any pre-configured scope."
        },
        {
          "description": "Enables the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:allow-resolve-directory",
          "markdownDescription": "Enables the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Denies the basename command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-basename",
          "markdownDescription": "Denies the basename command without any pre-configured scope."
        },
        {
          "description": "Denies the dirname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-dirname",
          "markdownDescription": "Denies the dirname command without any pre-configured scope."
        },
        {
          "description": "Denies the extname command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-extname",
          "markdownDescription": "Denies the extname command without any pre-configured scope."
        },
        {
          "description": "Denies the is_absolute command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-is-absolute",
          "markdownDescription": "Denies the is_absolute command without any pre-configured scope."
        },
        {
          "description": "Denies the join command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-join",
          "markdownDescription": "Denies the join command without any pre-configured scope."
        },
        {
          "description": "Denies the normalize command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-normalize",
          "markdownDescription": "Denies the normalize command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve",
          "markdownDescription": "Denies the resolve command without any pre-configured scope."
        },
        {
          "description": "Denies the resolve_directory command without any pre-configured scope.",
          "type": "string",
          "const": "core:path:deny-resolve-directory",
          "markdownDescription": "Denies the resolve_directory command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`",
          "type": "string",
          "const": "core:resources:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-close`"
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:resources:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`",
          "type": "string",
          "const": "core:tray:default",
          "markdownDescription": "Default permissions for the plugin, which enables all commands.\n#### This default permission set includes:\n\n- `allow-new`\n- `allow-get-by-id`\n- `allow-remove-by-id`\n- `allow-set-icon`\n- `allow-set-menu`\n- `allow-set-tooltip`\n- `allow-set-title`\n- `allow-set-visible`\n- `allow-set-temp-dir-path`\n- `allow-set-icon-as-template`\n- `allow-set-show-menu-on-left-click`"
        },
        {
          "description": "Enables the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-get-by-id",
          "markdownDescription": "Enables the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-new",
          "markdownDescription": "Enables the new command without any pre-configured scope."
        },
        {
          "description": "Enables the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-remove-by-id",
          "markdownDescription": "Enables the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-icon-as-template",
          "markdownDescription": "Enables the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Enables the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-menu",
          "markdownDescription": "Enables the set_menu command without any pre-configured scope."
        },
        {
          "description": "Enables the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-show-menu-on-left-click",
          "markdownDescription": "Enables the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Enables the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-temp-dir-path",
          "markdownDescription": "Enables the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-tooltip",
          "markdownDescription": "Enables the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:allow-set-visible",
          "markdownDescription": "Enables the set_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the get_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-get-by-id",
          "markdownDescription": "Denies the get_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the new command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-new",
          "markdownDescription": "Denies the new command without any pre-configured scope."
        },
        {
          "description": "Denies the remove_by_id command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-remove-by-id",
          "markdownDescription": "Denies the remove_by_id command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon_as_template command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-icon-as-template",
          "markdownDescription": "Denies the set_icon_as_template command without any pre-configured scope."
        },
        {
          "description": "Denies the set_menu command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-menu",
          "markdownDescription": "Denies the set_menu command without any pre-configured scope."
        },
        {
          "description": "Denies the set_show_menu_on_left_click command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-show-menu-on-left-click",
          "markdownDescription": "Denies the set_show_menu_on_left_click command without any pre-configured scope."
        },
        {
          "description": "Denies the set_temp_dir_path command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-temp-dir-path",
          "markdownDescription": "Denies the set_temp_dir_path command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_tooltip command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-tooltip",
          "markdownDescription": "Denies the set_tooltip command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:tray:deny-set-visible",
          "markdownDescription": "Denies the set_visible command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`",
          "type": "string",
          "const": "core:webview:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-webviews`\n- `allow-webview-position`\n- `allow-webview-size`\n- `allow-internal-toggle-devtools`"
        },
        {
          "description": "Enables the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-clear-all-browsing-data",
          "markdownDescription": "Enables the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview",
          "markdownDescription": "Enables the create_webview command without any pre-configured scope."
        },
        {
          "description": "Enables the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-create-webview-window",
          "markdownDescription": "Enables the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-get-all-webviews",
          "markdownDescription": "Enables the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-internal-toggle-devtools",
          "markdownDescription": "Enables the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Enables the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-print",
          "markdownDescription": "Enables the print command without any pre-configured scope."
        },
        {
          "description": "Enables the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-reparent",
          "markdownDescription": "Enables the reparent command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_auto_resize command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-auto-resize",
          "markdownDescription": "Enables the set_webview_auto_resize command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-background-color",
          "markdownDescription": "Enables the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-focus",
          "markdownDescription": "Enables the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-position",
          "markdownDescription": "Enables the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-size",
          "markdownDescription": "Enables the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-set-webview-zoom",
          "markdownDescription": "Enables the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-close",
          "markdownDescription": "Enables the webview_close command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-hide",
          "markdownDescription": "Enables the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-position",
          "markdownDescription": "Enables the webview_position command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-show",
          "markdownDescription": "Enables the webview_show command without any pre-configured scope."
        },
        {
          "description": "Enables the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:allow-webview-size",
          "markdownDescription": "Enables the webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the clear_all_browsing_data command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-clear-all-browsing-data",
          "markdownDescription": "Denies the clear_all_browsing_data command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview",
          "markdownDescription": "Denies the create_webview command without any pre-configured scope."
        },
        {
          "description": "Denies the create_webview_window command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-create-webview-window",
          "markdownDescription": "Denies the create_webview_window command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_webviews command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-get-all-webviews",
          "markdownDescription": "Denies the get_all_webviews command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_devtools command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-internal-toggle-devtools",
          "markdownDescription": "Denies the internal_toggle_devtools command without any pre-configured scope."
        },
        {
          "description": "Denies the print command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-print",
          "markdownDescription": "Denies the print command without any pre-configured scope."
        },
        {
          "description": "Denies the reparent command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-reparent",
          "markdownDescription": "Denies the reparent command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_auto_resize command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-auto-resize",
          "markdownDescription": "Denies the set_webview_auto_resize command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-background-color",
          "markdownDescription": "Denies the set_webview_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-focus",
          "markdownDescription": "Denies the set_webview_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-position",
          "markdownDescription": "Denies the set_webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-size",
          "markdownDescription": "Denies the set_webview_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_webview_zoom command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-set-webview-zoom",
          "markdownDescription": "Denies the set_webview_zoom command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_close command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-close",
          "markdownDescription": "Denies the webview_close command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-hide",
          "markdownDescription": "Denies the webview_hide command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-position",
          "markdownDescription": "Denies the webview_position command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_show command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-show",
          "markdownDescription": "Denies the webview_show command without any pre-configured scope."
        },
        {
          "description": "Denies the webview_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:webview:deny-webview-size",
          "markdownDescription": "Denies the webview_size command without any pre-configured scope."
        },
        {
          "description": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`",
          "type": "string",
          "const": "core:window:default",
          "markdownDescription": "Default permissions for the plugin.\n#### This default permission set includes:\n\n- `allow-get-all-windows`\n- `allow-scale-factor`\n- `allow-inner-position`\n- `allow-outer-position`\n- `allow-inner-size`\n- `allow-outer-size`\n- `allow-is-fullscreen`\n- `allow-is-minimized`\n- `allow-is-maximized`\n- `allow-is-focused`\n- `allow-is-decorated`\n- `allow-is-resizable`\n- `allow-is-maximizable`\n- `allow-is-minimizable`\n- `allow-is-closable`\n- `allow-is-visible`\n- `allow-is-enabled`\n- `allow-title`\n- `allow-current-monitor`\n- `allow-primary-monitor`\n- `allow-monitor-from-point`\n- `allow-available-monitors`\n- `allow-cursor-position`\n- `allow-theme`\n- `allow-is-always-on-top`\n- `allow-internal-toggle-maximize`"
        },
        {
          "description": "Enables the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-available-monitors",
          "markdownDescription": "Enables the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Enables the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-center",
          "markdownDescription": "Enables the center command without any pre-configured scope."
        },
        {
          "description": "Enables the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-close",
          "markdownDescription": "Enables the close command without any pre-configured scope."
        },
        {
          "description": "Enables the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-create",
          "markdownDescription": "Enables the create command without any pre-configured scope."
        },
        {
          "description": "Enables the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-current-monitor",
          "markdownDescription": "Enables the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-cursor-position",
          "markdownDescription": "Enables the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-destroy",
          "markdownDescription": "Enables the destroy command without any pre-configured scope."
        },
        {
          "description": "Enables the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-get-all-windows",
          "markdownDescription": "Enables the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Enables the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-hide",
          "markdownDescription": "Enables the hide command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-position",
          "markdownDescription": "Enables the inner_position command without any pre-configured scope."
        },
        {
          "description": "Enables the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-inner-size",
          "markdownDescription": "Enables the inner_size command without any pre-configured scope."
        },
        {
          "description": "Enables the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-internal-toggle-maximize",
          "markdownDescription": "Enables the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-always-on-top",
          "markdownDescription": "Enables the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-closable",
          "markdownDescription": "Enables the is_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-decorated",
          "markdownDescription": "Enables the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Enables the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-enabled",
          "markdownDescription": "Enables the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-focused",
          "markdownDescription": "Enables the is_focused command without any pre-configured scope."
        },
        {
          "description": "Enables the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-fullscreen",
          "markdownDescription": "Enables the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximizable",
          "markdownDescription": "Enables the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-maximized",
          "markdownDescription": "Enables the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimizable",
          "markdownDescription": "Enables the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-minimized",
          "markdownDescription": "Enables the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Enables the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-resizable",
          "markdownDescription": "Enables the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-is-visible",
          "markdownDescription": "Enables the is_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-maximize",
          "markdownDescription": "Enables the maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-minimize",
          "markdownDescription": "Enables the minimize command without any pre-configured scope."
        },
        {
          "description": "Enables the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-monitor-from-point",
          "markdownDescription": "Enables the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-position",
          "markdownDescription": "Enables the outer_position command without any pre-configured scope."
        },
        {
          "description": "Enables the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-outer-size",
          "markdownDescription": "Enables the outer_size command without any pre-configured scope."
        },
        {
          "description": "Enables the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-primary-monitor",
          "markdownDescription": "Enables the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Enables the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-request-user-attention",
          "markdownDescription": "Enables the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Enables the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-scale-factor",
          "markdownDescription": "Enables the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-bottom",
          "markdownDescription": "Enables the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Enables the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-always-on-top",
          "markdownDescription": "Enables the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Enables the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-background-color",
          "markdownDescription": "Enables the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-count",
          "markdownDescription": "Enables the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Enables the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-badge-label",
          "markdownDescription": "Enables the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Enables the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-closable",
          "markdownDescription": "Enables the set_closable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-content-protected",
          "markdownDescription": "Enables the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-grab",
          "markdownDescription": "Enables the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-icon",
          "markdownDescription": "Enables the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-position",
          "markdownDescription": "Enables the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-cursor-visible",
          "markdownDescription": "Enables the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Enables the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-decorations",
          "markdownDescription": "Enables the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Enables the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-effects",
          "markdownDescription": "Enables the set_effects command without any pre-configured scope."
        },
        {
          "description": "Enables the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-enabled",
          "markdownDescription": "Enables the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Enables the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-focus",
          "markdownDescription": "Enables the set_focus command without any pre-configured scope."
        },
        {
          "description": "Enables the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-fullscreen",
          "markdownDescription": "Enables the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Enables the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-icon",
          "markdownDescription": "Enables the set_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-ignore-cursor-events",
          "markdownDescription": "Enables the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Enables the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-max-size",
          "markdownDescription": "Enables the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-maximizable",
          "markdownDescription": "Enables the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-min-size",
          "markdownDescription": "Enables the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-minimizable",
          "markdownDescription": "Enables the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-overlay-icon",
          "markdownDescription": "Enables the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Enables the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-position",
          "markdownDescription": "Enables the set_position command without any pre-configured scope."
        },
        {
          "description": "Enables the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-progress-bar",
          "markdownDescription": "Enables the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-resizable",
          "markdownDescription": "Enables the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Enables the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-shadow",
          "markdownDescription": "Enables the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size",
          "markdownDescription": "Enables the set_size command without any pre-configured scope."
        },
        {
          "description": "Enables the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-size-constraints",
          "markdownDescription": "Enables the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Enables the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-skip-taskbar",
          "markdownDescription": "Enables the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Enables the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-theme",
          "markdownDescription": "Enables the set_theme command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title",
          "markdownDescription": "Enables the set_title command without any pre-configured scope."
        },
        {
          "description": "Enables the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-title-bar-style",
          "markdownDescription": "Enables the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Enables the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-set-visible-on-all-workspaces",
          "markdownDescription": "Enables the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Enables the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-show",
          "markdownDescription": "Enables the show command without any pre-configured scope."
        },
        {
          "description": "Enables the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-dragging",
          "markdownDescription": "Enables the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-start-resize-dragging",
          "markdownDescription": "Enables the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Enables the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-theme",
          "markdownDescription": "Enables the theme command without any pre-configured scope."
        },
        {
          "description": "Enables the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-title",
          "markdownDescription": "Enables the title command without any pre-configured scope."
        },
        {
          "description": "Enables the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-toggle-maximize",
          "markdownDescription": "Enables the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unmaximize",
          "markdownDescription": "Enables the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Enables the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:allow-unminimize",
          "markdownDescription": "Enables the unminimize command without any pre-configured scope."
        },
        {
          "description": "Denies the available_monitors command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-available-monitors",
          "markdownDescription": "Denies the available_monitors command without any pre-configured scope."
        },
        {
          "description": "Denies the center command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-center",
          "markdownDescription": "Denies the center command without any pre-configured scope."
        },
        {
          "description": "Denies the close command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-close",
          "markdownDescription": "Denies the close command without any pre-configured scope."
        },
        {
          "description": "Denies the create command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-create",
          "markdownDescription": "Denies the create command without any pre-configured scope."
        },
        {
          "description": "Denies the current_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-current-monitor",
          "markdownDescription": "Denies the current_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-cursor-position",
          "markdownDescription": "Denies the cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the destroy command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-destroy",
          "markdownDescription": "Denies the destroy command without any pre-configured scope."
        },
        {
          "description": "Denies the get_all_windows command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-get-all-windows",
          "markdownDescription": "Denies the get_all_windows command without any pre-configured scope."
        },
        {
          "description": "Denies the hide command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-hide",
          "markdownDescription": "Denies the hide command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-position",
          "markdownDescription": "Denies the inner_position command without any pre-configured scope."
        },
        {
          "description": "Denies the inner_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-inner-size",
          "markdownDescription": "Denies the inner_size command without any pre-configured scope."
        },
        {
          "description": "Denies the internal_toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-internal-toggle-maximize",
          "markdownDescription": "Denies the internal_toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the is_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-always-on-top",
          "markdownDescription": "Denies the is_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the is_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-closable",
          "markdownDescription": "Denies the is_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_decorated command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-decorated",
          "markdownDescription": "Denies the is_decorated command without any pre-configured scope."
        },
        {
          "description": "Denies the is_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-enabled",
          "markdownDescription": "Denies the is_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the is_focused command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-focused",
          "markdownDescription": "Denies the is_focused command without any pre-configured scope."
        },
        {
          "description": "Denies the is_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-fullscreen",
          "markdownDescription": "Denies the is_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximizable",
          "markdownDescription": "Denies the is_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_maximized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-maximized",
          "markdownDescription": "Denies the is_maximized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimizable",
          "markdownDescription": "Denies the is_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_minimized command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-minimized",
          "markdownDescription": "Denies the is_minimized command without any pre-configured scope."
        },
        {
          "description": "Denies the is_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-resizable",
          "markdownDescription": "Denies the is_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the is_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-is-visible",
          "markdownDescription": "Denies the is_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-maximize",
          "markdownDescription": "Denies the maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the minimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-minimize",
          "markdownDescription": "Denies the minimize command without any pre-configured scope."
        },
        {
          "description": "Denies the monitor_from_point command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-monitor-from-point",
          "markdownDescription": "Denies the monitor_from_point command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-position",
          "markdownDescription": "Denies the outer_position command without any pre-configured scope."
        },
        {
          "description": "Denies the outer_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-outer-size",
          "markdownDescription": "Denies the outer_size command without any pre-configured scope."
        },
        {
          "description": "Denies the primary_monitor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-primary-monitor",
          "markdownDescription": "Denies the primary_monitor command without any pre-configured scope."
        },
        {
          "description": "Denies the request_user_attention command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-request-user-attention",
          "markdownDescription": "Denies the request_user_attention command without any pre-configured scope."
        },
        {
          "description": "Denies the scale_factor command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-scale-factor",
          "markdownDescription": "Denies the scale_factor command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_bottom command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-bottom",
          "markdownDescription": "Denies the set_always_on_bottom command without any pre-configured scope."
        },
        {
          "description": "Denies the set_always_on_top command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-always-on-top",
          "markdownDescription": "Denies the set_always_on_top command without any pre-configured scope."
        },
        {
          "description": "Denies the set_background_color command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-background-color",
          "markdownDescription": "Denies the set_background_color command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_count command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-count",
          "markdownDescription": "Denies the set_badge_count command without any pre-configured scope."
        },
        {
          "description": "Denies the set_badge_label command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-badge-label",
          "markdownDescription": "Denies the set_badge_label command without any pre-configured scope."
        },
        {
          "description": "Denies the set_closable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-closable",
          "markdownDescription": "Denies the set_closable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_content_protected command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-content-protected",
          "markdownDescription": "Denies the set_content_protected command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_grab command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-grab",
          "markdownDescription": "Denies the set_cursor_grab command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-icon",
          "markdownDescription": "Denies the set_cursor_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-position",
          "markdownDescription": "Denies the set_cursor_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_cursor_visible command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-cursor-visible",
          "markdownDescription": "Denies the set_cursor_visible command without any pre-configured scope."
        },
        {
          "description": "Denies the set_decorations command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-decorations",
          "markdownDescription": "Denies the set_decorations command without any pre-configured scope."
        },
        {
          "description": "Denies the set_effects command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-effects",
          "markdownDescription": "Denies the set_effects command without any pre-configured scope."
        },
        {
          "description": "Denies the set_enabled command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-enabled",
          "markdownDescription": "Denies the set_enabled command without any pre-configured scope."
        },
        {
          "description": "Denies the set_focus command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-focus",
          "markdownDescription": "Denies the set_focus command without any pre-configured scope."
        },
        {
          "description": "Denies the set_fullscreen command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-fullscreen",
          "markdownDescription": "Denies the set_fullscreen command without any pre-configured scope."
        },
        {
          "description": "Denies the set_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-icon",
          "markdownDescription": "Denies the set_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_ignore_cursor_events command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-ignore-cursor-events",
          "markdownDescription": "Denies the set_ignore_cursor_events command without any pre-configured scope."
        },
        {
          "description": "Denies the set_max_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-max-size",
          "markdownDescription": "Denies the set_max_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_maximizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-maximizable",
          "markdownDescription": "Denies the set_maximizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_min_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-min-size",
          "markdownDescription": "Denies the set_min_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_minimizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-minimizable",
          "markdownDescription": "Denies the set_minimizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_overlay_icon command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-overlay-icon",
          "markdownDescription": "Denies the set_overlay_icon command without any pre-configured scope."
        },
        {
          "description": "Denies the set_position command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-position",
          "markdownDescription": "Denies the set_position command without any pre-configured scope."
        },
        {
          "description": "Denies the set_progress_bar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-progress-bar",
          "markdownDescription": "Denies the set_progress_bar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_resizable command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-resizable",
          "markdownDescription": "Denies the set_resizable command without any pre-configured scope."
        },
        {
          "description": "Denies the set_shadow command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-shadow",
          "markdownDescription": "Denies the set_shadow command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size",
          "markdownDescription": "Denies the set_size command without any pre-configured scope."
        },
        {
          "description": "Denies the set_size_constraints command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-size-constraints",
          "markdownDescription": "Denies the set_size_constraints command without any pre-configured scope."
        },
        {
          "description": "Denies the set_skip_taskbar command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-skip-taskbar",
          "markdownDescription": "Denies the set_skip_taskbar command without any pre-configured scope."
        },
        {
          "description": "Denies the set_theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-theme",
          "markdownDescription": "Denies the set_theme command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title",
          "markdownDescription": "Denies the set_title command without any pre-configured scope."
        },
        {
          "description": "Denies the set_title_bar_style command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-title-bar-style",
          "markdownDescription": "Denies the set_title_bar_style command without any pre-configured scope."
        },
        {
          "description": "Denies the set_visible_on_all_workspaces command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-set-visible-on-all-workspaces",
          "markdownDescription": "Denies the set_visible_on_all_workspaces command without any pre-configured scope."
        },
        {
          "description": "Denies the show command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-show",
          "markdownDescription": "Denies the show command without any pre-configured scope."
        },
        {
          "description": "Denies the start_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-dragging",
          "markdownDescription": "Denies the start_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the start_resize_dragging command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-start-resize-dragging",
          "markdownDescription": "Denies the start_resize_dragging command without any pre-configured scope."
        },
        {
          "description": "Denies the theme command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-theme",
          "markdownDescription": "Denies the theme command without any pre-configured scope."
        },
        {
          "description": "Denies the title command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-title",
          "markdownDescription": "Denies the title command without any pre-configured scope."
        },
        {
          "description": "Denies the toggle_maximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-toggle-maximize",
          "markdownDescription": "Denies the toggle_maximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unmaximize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unmaximize",
          "markdownDescription": "Denies the unmaximize command without any pre-configured scope."
        },
        {
          "description": "Denies the unminimize command without any pre-configured scope.",
          "type": "string",
          "const": "core:window:deny-unminimize",
          "markdownDescription": "Denies the unminimize command without any pre-configured scope."
        },
        {
          "description": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`",
          "type": "string",
          "const": "opener:default",
          "markdownDescription": "This permission set allows opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application\nas well as reveal file in directories using default file explorer\n#### This default permission set includes:\n\n- `allow-open-url`\n- `allow-reveal-item-in-dir`\n- `allow-default-urls`"
        },
        {
          "description": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application.",
          "type": "string",
          "const": "opener:allow-default-urls",
          "markdownDescription": "This enables opening `mailto:`, `tel:`, `https://` and `http://` urls using their default application."
        },
        {
          "description": "Enables the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-path",
          "markdownDescription": "Enables the open_path command without any pre-configured scope."
        },
        {
          "description": "Enables the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-open-url",
          "markdownDescription": "Enables the open_url command without any pre-configured scope."
        },
        {
          "description": "Enables the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:allow-reveal-item-in-dir",
          "markdownDescription": "Enables the reveal_item_in_dir command without any pre-configured scope."
        },
        {
          "description": "Denies the open_path command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-path",
          "markdownDescription": "Denies the open_path command without any pre-configured scope."
        },
        {
          "description": "Denies the open_url command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-open-url",
          "markdownDescription": "Denies the open_url command without any pre-configured scope."
        },
        {
          "description": "Denies the reveal_item_in_dir command without any pre-configured scope.",
          "type": "string",
          "const": "opener:deny-reveal-item-in-dir",
          "markdownDescription": "Denies the reveal_item_in_dir command without any pre-configured scope."
        }
      ]
    },
    "Value": {
      "description": "All supported ACL values.",
      "anyOf": [
        {
          "description": "Represents a null JSON value.",
          "type": "null"
        },
        {
          "description": "Represents a [`bool`].",
          "type": "boolean"
        },
        {
          "description": "Represents a valid ACL [`Number`].",
          "allOf": [
            {
              "$ref": "#/definitions/Number"
            }
          ]
        },
        {
          "description": "Represents a [`String`].",
          "type": "string"
        },
        {
          "description": "Represents a list of other [`Value`]s.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/Value"
          }
        },
        {
          "description": "Represents a map of [`String`] keys to [`Value`]s.",
          "type": "object",
          "additionalProperties": {
            "$ref": "#/definitions/Value"
          }
        }
      ]
    },
    "Number": {
      "description": "A valid ACL number.",
      "anyOf": [
        {
          "description": "Represents an [`i64`].",
          "type": "integer",
          "format": "int64"
        },
        {
          "description": "Represents a [`f64`].",
          "type": "number",
          "format": "double"
        }
      ]
    },
    "Target": {
      "description": "Platform target.",
      "oneOf": [
        {
          "description": "MacOS.",
          "type": "string",
          "enum": [
            "macOS"
          ]
        },
        {
          "description": "Windows.",
          "type": "string",
          "enum": [
            "windows"
          ]
        },
        {
          "description": "Linux.",
          "type": "string",
          "enum": [
            "linux"
          ]
        },
        {
          "description": "Android.",
          "type": "string",
          "enum": [
            "android"
          ]
        },
        {
          "description": "iOS.",
          "type": "string",
          "enum": [
            "iOS"
          ]
        }
      ]
    },
    "Application": {
      "description": "Opener scope application.",
      "anyOf": [
        {
          "description": "Open in default application.",
          "type": "null"
        },
        {
          "description": "If true, allow open with any application.",
          "type": "boolean"
        },
        {
          "description": "Allow specific application to open with.",
          "type": "string"
        }
      ]
    }
  }
}</content>
  </file>
  <file path="src-tauri\icons\128x128.png" size="3512" modified_time="2025-08-07T13:39:00.748351" mime_type="image/png" content_type="binary">
    <content>iVBORw0KGgoAAAANSUhEUgAAAIAAAACACAYAAADDPmHLAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAA1NSURBVHgB7Z3hchTHEcd79g5DUqRKfgKfbERIVarQ8cFAqEKrJ0A8QY4nQDyBpCeweAIfT4D8BDpRRcBf0PEpCRLR+glySeEEodvtdM/ukRNIYmenZ3f2tL8qG2GvdKfr//T09HTPADQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NMw4ChoAtxc79EcIAXwDKqCvcY7+PnfCoyP6yCLAJIIEXtPfh2p5OIIacy4FQAYnYwchKFwChEU42dh5iUCpAYliQKLYIUFEUCPOjQDI6Itk9BX66iHYGfxsFJAYsK+Whk+gBsy8APRob6k1GukhlEvqGeJkw2evMLMCqNDwn6NU31chzJwAdEDXUj96YfjjUOCIj0kEm+ARMyUA3LmxSv9eA5dzvD0shGVfvMFMCMDjUX8GakMtvVqHiqm9ANLoXj2lLztQN9LY4FGVuYRaCwCf3ejRkutHqDeVTgkB1BSa79dnwPhMhzzYdpaNLJ1aegBt/DTYc/DDMQIelek/03SAg0ul0j/lqcQT1E4AWaT/A0iBONDZO520wdd55mMddwClkBUs0feFIBd/lC6CWgmAPviVLOCzhYyMm9BWfXVn9xewBJ8t3qN9gB6JYQXsGWYiKCUwrI0A9BxJcyXYjbbU8Ak8dvEB6/eoYI2E0AMbaHWg7r56ACVQHwHsdA/Ayvja8BtljCwRsSb4qIysYS0EYBn00aYM9NTd3R0oGdxZpPes1qEYIxJB13U84P0yMF0eFTQ+4pb+ECswPkNbwhs8n8PnK4o8zOnspmP8zwOkrrQAuKnC4f2qK3bo9QeFRUCpbRoAq+AQrwVAv3wPCs2juE6j7xF4gnbjRUUQqDX6HJxtbnkrgCyQKuD6aeSz6/UMCxHMkZUegiP89QBB0APz0T/0aeR/SiaC+2CMWnXlBTyeAvDPZo/jsNiHWy4kAn6fpiJ15gW8XAbquT84IwJO07dD0FkzXZ4d1a08G591tw3rF3hZOC/9e7bBRwL1qdpHekkXwBbEuvS61rX4mhgf0O+5C/k3ltgLsFd8DIJ45wGy4O8g/QuN9IASKTk3aeqGcaKINq0op7EMgvgnAP2hEI7y9T6hA7tU7PkDvAS/lvxcmtawijFPF+MqrXTEpgE/Y4CKyZZcaa8gj84EeMs40lk9acjT0eus534+DRzFBFBrD9B5cdCBS6NR1O2KuMQczSQRfWRPIEn6kps0hiuCkVra/RqEqJUAOrsHc+3340UaMfcU4gqimtu/vSDyYdCO42bWN5gHndDRa3qR116k11X5t37b0JEoZGFqURR65cVeeOXnvR/a7+MDkiyPllUE1dGlXALgTrdvYHyGVyq7ZDizZNVpJPCT0fNjDEEIrwWgDf9yb3tidFB4LFpWQMtES9JaAyhoSLWZ1QdakU0nJtOY9WtO8FIAxwwPZ8yN8Qerff7UeFbVxbxnL1OgauLNUK4q2SsBXKOgLpfhM/bu/NFuDpYwXrpnH4ItaTl6PpSaPQ9w5S97q2OIOTUa5vsOtDK+zjhK9RK2lI0XSUn3NPIi5gEqzwPoyP5wzKXeIQ+n/CjbpV8IUqDInGzy+8zGFLDw/GDxwqHJqD+GnQDSJI8Uc/i8a/vzKhFAZR6AAz2E+Gl2IpcxaOsBEDpNIrwiD/Dti/2eDvQUiinZGAW2U8hMULoA2PiB8qKrNwJBpDJzZVOqANjtSxmfkkAdsME0+3YWaJ+QArP6xwiEKE0AvMYns1k3diIgd/qsjy++s6r/09k3oVQy/Zw+2GISlJrkDL5AKUEgGz9W8XbRgI9JDR+sv725IHcAY4wblNMPwY5I5FBITu7kXwWLxS+leAAy/hrauGyFm/HFX7tvb16RMz5kXTsKtsAG8wrfk0GDKUDJTQHOPcDCizc9Mn4PCsCjXgWqt//9VXe9fWlxJidyOmAMrpOI7AQEk/5Hg2SS1NQFjj2AnvdVUDRNOuBRv//9gtPGTl1fl2DX0BOMstIsqQ6k0ORhiEFsxeHUAxR1/RTh9/duXS3lgAT9emmR5f2sH4EF2zn1YY74ER6Itm231D2T+V+qEIVxlgvjNC+2xruG31a68U8Cn3WXyNCLH3P8adKIm1B+kq5UPlYGn+sbcKDCoVhpuDMPQMY332pVONy7Wa3x9dtIzxMo60yBFaOnJZacUzgRACd8wHBe44AvTmLve/vE+bwL6mwSWWG6CQL5oCRDYoyXo9t/iOAckR55Z7T6GEofGSMugDTjZxjVUmbv3Bk/PfrGsOMX81cO50RcABz5mzzPrn//5oJ3Bzo4pxWcvdo4iUQ+LnExBYQmD3N6F84ZermJhskxvofIwYlhostAHfylBZ254NH/9tbVeThHFD5DMD0bIAJhZD1AAPeMnj9no7+w8R2NfkZ6GRjmfVCPfsmdvQzuF7ygknsJ4MfculLIFz3u7N9eGEBFZK3gxS62QHAWI4kJgKt74XBsUh07AEGy6YcCq3HIWdVjc1v2H757ua9rCaR3Fb9EZnwe+QWqh/WGUwSOEJsCWh/i0OR52uXrgxBk/PU8zSRcRaTInXLzSSddrjonc/ucEi9SOh65PvJOTAD04V7P/TDCSGqXLzO+aeIpbKl4u7O767QoVV9pkxq/A0VQ0APHCMYAvKeec0srPeHLGl1rUCDrmL4F7LQPL3N9onj6Wbt8fYsZmuX5j/+UdXV36Hw/Qm4VgAblXgqtBWBZazBhJdu3EIENr7uNeXcPwcL4+sDLUpJjch4AyQOofB4AIbAWQAxHoT4jwJbUgwzAgjTIC1bT1K51r0NU5oGXch7AoMlDL8ssQaVkDmegeGD+1T/s2rr0fr7IjaWl3xkkIgC9BDRAHR3+CyzIXi8EIYKjJAQ7JIpERtmxMxGUiIgALr1/bySA8W9++0+w4MJRwaj6FKybTOwFMMpGvlipV15qe3GkV9j1GUbZ1TClG5+ppQBa8Xu/GjuLH9kyrPomcREB/M2wmKP93/9YHe2mXw+VmAgQrfMSBQTAt5hVf418JecDJK2LHHXbfehpLiEEAWIcmxzPchIdg2d5vn8g0VAigWQqOMr7bGAfdIntkNGuZN+mHM3sJg896ud9MT4jJgBal+d2yZS+7YAl2dbuACyJMbYV0pc3edILLkK+zsa3E9DlPACq/C5d6HQuFbcfWcUCEsWoASyd+v8mhg+Hy1XdXfglBFcBBgKgjSOJnbi9O/NDBUmx7lyFmyLFqOqz9nLuG1zX5/p7bPgJYkEgYvLapMKw9eF3XD5mXZixd/tqf+H5wRBaR0/z7g1QvLK6d/Oq9ZHrev5nbzZ1Bb3vBv8UsaLQ7Lw/kwzfYP/WgliPG7/+hcOE9gfi1ROFgDQyA+yPk/ixZA8Ci6DON5vIVgXzMa95l2ZkkPGld/NSZ/1Ps/D8zWLylfqmlSR6mklUEI0vvHvt4rXqjmwegN1g3gBPwVz7w2XujBHf9967czW9Us4zuAwtuj0fgUeIpoLbydhsTk9g1XVZlg9MTj9vBfESeIaoALKU8CD3N/zfC8wcHJMsvHz7cPr08zg58i5AlE8Fm0wDTOoFHs/C/DzpSUBIVuAwLU+fYJtxdIW4AMZftR+338eruSuE2As4Ks50CRu7DeOOUsF1bkIJICGDjzunFcVJlsFL4uSIGL7fR1/xYkISP9r/07VN8BwuRtX3GhiUwPncA+mkHoCCQfMki2qt8fINPObjgZemh1x73APpRAAcDPJhTybfw1NB0gqeltWxU4RxMH5qeupZ2gNZbiuaCc4qglq8y2a4UcO1ebpjx0MRLLx40y90M4jnHdDOjoljKBbgWzjXwRBK5UYxtpZ9SJocv9LGDI78396q/tSzs3BaE8grApNCkQkTT1B1TMBzfvvDOH96expKdQvUGjjHqQCi7vwIURUaASwCbKld3fxZAd/9/PcVHe0XvBBKKazFwVdOp4AJlA3jJWHhO/rKnBL0Mk/F9F6LN3bWwfVPKEUAzJWX+09tPlSGhNAnIWy4EEJ2MTUJVT20uctIH3hZozMPSxNAul9/tCvS0AmwhSp58vbm762LK3V3MJ9tlKie9SVWvMUN426dzjwsTQDMtRd/pURKa1tIBKCXmQoHqNRWME5eZ9vAZ6Lz9dxZHKjrIkafQsXYzfMefKJUATDiIvgU7hdI8w+jyd2C+mgYDioxmHN1VR2JsOdzwuc0ShcA41wEZUJun7zJah2Nz1QiAGYmREDGVwku183tT1NZcyjvFxxdvNA13jPwBI72OeCrs/GZyjzANEVTxpWhcHP81a8bs1DE4oUAmFpMCXq+Tx5ILD99wRsBTGBvoBB73glhhkb9NN4JgMm8wRqJoAfVM6D1/aO6z/Wn4aUAJkyEQF+GpXoEdvUKt7iOz/W9hVXjtQCmSU8F1UfDheCOgYJg6+jiv5+cly6i2ghgAjeStMaXl4IYVzC9cLlwzQDXKiQQDAJQw/Nk9GlqJ4BPYUG0jy5fDzDpkDEp3aso7ctn9kynfBWlhSlpo5KRwlaUtBL6pzU8uPHtL9DQ0NDQ0NDQ0NDQ0NDQ0NDQ0NDQ0NAw2/wPPykMarYWtB4AAAAASUVORK5CYII=</content>
  </file>
  <file path="src-tauri\icons\128x128@2x.png" size="7012" modified_time="2025-08-07T13:39:00.748851" mime_type="image/png" content_type="binary">
    <content>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</content>
  </file>
  <file path="src-tauri\icons\32x32.png" size="974" modified_time="2025-08-07T13:39:00.748851" mime_type="image/png" content_type="binary">
    <content>iVBORw0KGgoAAAANSUhEUgAAACAAAAAgCAYAAABzenr0AAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAANjSURBVHgB7VZBbtpQEJ0xUdVFq5AbGAXSdBXIoklUKZATND1ByAnqngBzAsgJQk6Q9ASYLkKyCXTVqhDhniBEyiKtwNP5tgH728YGlu2TwPb3/Hnvz5+Zb4B/HQgrgpr5NF8mPxOPusNF5i8lwCZVFI3vTvhRlV6bgGjA2KqyGDPO18IC6OtuGYhq4Kw4zn0Vi3f6XAtYhLy1q/N/xT9IJv8briCVV5/3M2AdD+8+w6oCOOxlUPDcQ2zws46HnZZkxyKgwsRlD01kJBIJsJ0q2ITpfpOOxW41Zo7Gc2rTAYuOOCcM2U6BJEgpIuxpXnWDXZfjyAWYrM629ZkPrITaQQKICMzLaLcUQS5Bp1pwAJOEtWhDtkkUAUG+eds/3rzpnwfIRWIq+CB+XCE1aR6Tiai5SEFRnh8rINvulXI3/QESXSKQ6iNv5ku+qiDSqJU/8Tmw4NvsfaBnzBfA5DpvUpNcYgI0JRM1ZJo8Znru04kFZK97ml1OMxjK2DqTzK4CExG6EsOO52mYSMB2eyAayowcqd7fzx313m/5nNt7bNFHDn3XaUik4WH3i1+QMmtMiF0I6A0B7/k5h70s7vnauN/fOoUl4PaPgfs4xGJnQ7YJREDtDNITcmYfjmkcW/ORcPqHq4auwkzWAgPPo/wkLoR0Ze6/Nb3vRW6gQp8IYchCq/d7b0Idc3nWmbTsPpq8mGoiARyTIhu7QJ9z0QvESUhCIYn9w0u109kwC4Vpctmlabdg8hxK3LojGtncMkTFn7XcB3Zkm9Sf1x/8A3byesk1bt0XEIG5AohQ9Qmw6Jdsg2gfx2HgDxMoMfkZzEFAgJcEwfKd7b2DrQYPOgcMJyjf6/13uZakuusQdzLyUR2GQBmKKlj7PXqYkIxePmW8e+zYdOyOJo/7fHAy9w9yBsQgEAGzkBFODVcei3lVCdoUhmHkufbPcvamd7n2PB7YyZwA4TngLxkte/1DgxiIc4PQ/mI6JrSGI2t0AQkQ+T2Qve1VWIg+04SNMaWq5kHGlIhL7plRmtry59j9XnY1Aa6IGjP7V4+i7zunIpdlnoWpkke9v5dL3D1jv4jkSESCE5YU6zSqMy4tQGC7/V0dY8oOc2DFImERjNGLp7OoqlhZgBeiBJHW18U94ePjMqT/4cVfZNp1ptgvGtYAAAAASUVORK5CYII=</content>
  </file>
  <file path="src-tauri\icons\icon.icns" size="98451" modified_time="2025-08-07T13:39:00.753350" mime_type="application/octet-stream" content_type="binary">
    <content></content>
  </file>
  <file path="src-tauri\icons\icon.ico" size="86642" modified_time="2025-08-07T13:39:00.753851" mime_type="image/x-icon" content_type="binary">
    <content></content>
  </file>
  <file path="src-tauri\icons\icon.png" size="14183" modified_time="2025-08-07T13:39:00.754350" mime_type="image/png" content_type="binary">
    <content></content>
  </file>
  <file path="src-tauri\icons\Square107x107Logo.png" size="2863" modified_time="2025-08-07T13:39:00.749351" mime_type="image/png" content_type="binary">
    <content>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</content>
  </file>
  <file path="src-tauri\icons\Square142x142Logo.png" size="3858" modified_time="2025-08-07T13:39:00.749851" mime_type="image/png" content_type="binary">
    <content>iVBORw0KGgoAAAANSUhEUgAAAI4AAACOCAYAAADn/TAIAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAA6nSURBVHgB7Z1/chTHFcdfz64ESUhZPoFHQSJOVarQ8keAcpW1OgHiBCwnQJyA5QSWToA4AeIEWrnKQfiP7PqvJEhEwwlYEuwSaGY67/XMghBCUve8npke9acKY8yuvNJ+973X71cDeDwej8fj8Xg8Ho/H4/F4PB6Px+PxeDzVIMBzKnJzYQZ/C/NfMxDAN+ovRBBmD0ij/KFjSOGV+h1gJJZGY2goXjjHgEIJURy3UBgLIGUXMsGYMMaf8Ai/xgAFtYVCGkBD8MLJQbF0oRXcwjd5GcyFchokpAH+PzZQSE9dtkjnWjjKBQXBCv7bHbAnli8jxDok6RoKaASOcS6Fc0gw94BilqohK5RIEtAGOMK5Ek7tBHOUTED3XbBA50Y4cusaCeYB1FEwR8lc2EMUUAQ1pfHCUSeklngEErrgFhG++r5YHD2GGtJo4ThlZb5EZn3u1+0E1ljhoGhW81imCUSQyqU6ua7GCScLgMUm/usCNAvMSsvbdUkiBtAgsoyvGELzREOoD4TcWrgDNaAxwslFQ5YmhEYj1tEN96FiGuGqrItGygj/OVB1p6yQ+QtMi9efPOa9/BpPb1/hYxfU65Bo9YTogjVkr8oTl/PCyWMack8hcEKFSQEb0BYb4rvhKzBAvbYWLKLQllFEVAPjPd1lMU8l2Wb3hfNjZ5MxR4NHXrmKb/SajeMvCqmHIqf0QAg8UMDcqeK05bRwMl+v8jRFsSqYozALKMrFU2qex1nh5D/8R1AUckkS7lbxqcUTEopH9KEo6FLF98PbUCJOCocpGB7nKf01qBC2wD5VxdFVKAk3hfPjNaw9yR6YU7tMLFqfH/DtWAFzSo13nMvjKBdVTDSjqgLKk0DLd58sIJgzo4q5JeFeAjALKk0Z5Zamli2bKJ6H5HLAFDxdqhbYEnBKOHnGNAQzai2aCSpOKSKeoByr44xwVBCZ9QabELkgmglZkGvstsIy6lnuWJwg6IGZtRm7JJoJym1R5trs2X2wjEOuSsvajDGApnmmdRTN3boFwmcmkXdBdQJqE9qOdZw4jp+a7KMiZPbpHGFtaWBaW6ojSgBZnkcPAQNMCi6BJdwQznH1qEkRMoXHTR61JfD7f4Lf/zLokqUdrExMtKHmqKB4IhpyP5lY1poulk9I8JQVqBYNveo6jTEDWBFO/WMc+uYz69IV3VGHgsZzJRpQp6xIFWH1n9kDS9TeVZHFcTa4ZSTvO3qt/cTsRDkAZmpvceosGhJ1/sv6+I2ysjTpqUsAV8ECfluFBh9GiIVcPKZ5DE92YgBJ+tjWJILRCcvS6aoxwgmHezNT+wfLMhBXaYXI7s35ATChPXOezYBbyR/Jrc5r0AuSx2Jx+DUw47RwSCzt/RgtACziH7uT/x7LeDa6+ZcIGMj7ZZ6A/sjNOE8+svYEy8HCI7RsPZ3n2DiWOzkeM/dspzu3vbPZfhe/RtFQtbz78W/liFk0psN9FMw+Ya8bSdgCXSzEOU4JZ/7Zi9789u4eioXezO6xDzIJIL9EK2DoCxarWYGWjQHowz6g6IRwJoKRQjySIMOTHislBqgMMDSMTWBtsMrjJr08luSfN6u1cOZ/2lsgl3QWwUwIknc8dapiDWOfwt1gpWtVhQiBmdoKB+OYvmzFNGjX1Xneznd/LRwE5m9yCJxk6X8eUqmbOWfPM9WuVvXts70wFjGZ9i5oglYpAg4CdUpjRk1ymnf2ffKltFstQmCmVhaHTksxJNpWZoIAEQEHQtjYdsGZYa68Vlcb4cz9fWdFnZaEtJ6+PwN2XsO0+Ao4SOENVEwthEPxDL6SH8DjDJULR4kmS+LVh5QpVjrKe8ljKQLgsVyFXkKF8IuGyc0JK81PEWMfUeXuvDLh1NLSTKDFSdxQMxrb19I+JUXATCXCufz838vMohngd9LdvXGlAwyotgjO0gURiHXgIhChzsPzjWKslJ7HUXmaNMEKrwQGSDD93b/N6xf+TiORa3mfb3Gk3BCLI77XKA0q9cyUbnESkRQ+clOiT4r09u6N+SUrogFldTaYrM4YXzBP4g8mE62aMY5w3FWpMsIZa04nsJFc+LXz8vqfWftcjiWRtKwogiLwDwTqJye53S6UKBwqWBaNawTIFbQyt6NOp5TMqToFpZLaLiPQZ6w2g3Ivd6TL2HRJgH1AsTyL00qegCkSxuSadm5cKX17FlkLsTic1VoCoK5SlB0r62Szqx51GNsYyitFOFROMHZRKBqBn/pSXNMJ5LtrMgHRYODnjNWsejb/ZWXbl1HV/vjXWhjrpyo6RWFAfA+FAyaQaHa+u2Llm9clF8PD/BfInzrZbcCYES5lSLAV3EEhaD3FfOPFyVgXTgxxDwzL+hTT1EU0x1HmcoNsFNqgIzEFK6dOq66KrI0QwqxZW0C/ipimtmT9z7pEtpYOWBVOAgddk9iG8jS71+cfgkdhbG1AWosL7QbHwuhTgumTxNpeFycxszbkpqxZbGvCufx8d9noJIUuimsuqgkYT1tgSsDm3L014QRSvznbu6hPyQcCzayNgHWwiBXh0GguiqAHuoigD56PtAR1RYagT2T7Lisrwmm9T7qgCVmbl9fnrH6zLqF2Opusb8ue3QfLWMnjkJsySPcNoARCTBG0IQ4xsTg++P1UFHVma7fdq+B1SlEZN+fZSgB2QRM8SVmLbWjsRhVYpcBCa6xaEmRLQPtdDJe3dyP84yCRrYfRzdkIKkb+eI2C4QLFYPvWhmBfc5IP1O1pPQnkiKt77zBKMDQ9cfbGp9X4wtuHZVXfj1L44jaslWGd7C6UAHuMcxAk2v0iqN51YObDnJZet9xK690fh+TOoGRQNKtQ7LY/ahgr7UTKLhysL2nvYpGBYE2LK9EYzmnh6w9bItkMh8NSJgnUDsGtzjDf9lXkK/XL3Jdo4VSlPz7L2f5JrrLocB+Jp/3uknn/0BlBK7OS32BcbOSYXFTJN/3xC0dq9xMPgBHV08xDV8VIFqC+GrQyGAdKEnhRyxaV6aIm8J+q1MlF6zDOFoiqMocs3NP8kazVdQAMZAso4Y66f5zzuuuKrojktzi6EwyMU5MmZY5TYLE6+XLrPVrrxigaqPJmHFbhUKkBNJFcq0noaxlnWr+MEPrB/mdfI+sOZA625Qp7I7wGrMK5uL+v/8ORksVVKdFaWJGSQlAscP0IY26o+muvK9/IJQKeH+jUAYQss6FHEMAWMzFZHdkro6RwGrW/duistJL9cSwa8+0cB93lsCy+ZxwlLkDl+3GkFCEwsH/xopUyAWMMFoI5kZrT+n5YC9EQrMKx9eadBVXllsLCcH1a7ZRFdq9op2636LAKx6RFgTGGoPP4OjBzIJOnUBDDzepjdXLComUdL3azUauKdB7P5aoUKRR+k48wYOp/DnUenFuZ2apPTifBLhwp9NyFgJTruAv5VUMD4CKAPnBw1ks4Pl4hWUsrcxh+iyN1K91igbMS3ZbxXZZYR8hVtuKrOCUX9FEwS3UKgE/CRnVcO5hs719iszr/QtciAyjWzCTkKJ7+la9wePyGibG6oNUxwUxgF04qpP48NfMK/JfX5zbQZd42tDwDFM0SVxdgHhiH+R/H2RJJ2ctjmPuuCWYCe+uourWOLiDTQE043LgyC8x8++yfYSJaD+RZrlGmdSpCss+ro3AW8qr4BiTyl6Zcfc0uHGJ++8UevlmhznPwjVvivEfzMPM/vViAFtyTdEfD4VZSqbKxIwHBxsGF/z6uqtfYRazk6CV9uiSsaD0pkNQSMQAL5KtSPsQ9s//4zzdSvHnjhWKOnZKDST4lFb2y+nz3rv3pVZ1FU0WzvC5WhBNfbI+0A1MBM+33lwo2bLsLxYbz2y/v0RWSrSCxcF8WL1ZiHGLu+c4P2u4KY4744tvZ8+RC8tmvW2RxJ/1E8YW3X9f9Z2CvD4HcldAUDlmdd5eoz5dtoXQdydtRu3iKuyPpqE6NRHmfNp4w11344FizOARanaHB+nirJ6yyUemJ/XhBiOCqhLSLLrx7Yqci3UlhaVs8J1aFQz4bf1iroAn1wCQX/tdx1WXlA4G3qPKvk5awlc+ygdVGroMLwWOT7G0+EFfPK4lO4cO8Oroi7VyWQ/uBrApH9ecEUtvi5KyoO60cIt+yanQ5vWv7gay3jsbT7TXjarWAB5ef75qtuy2ZfBH4pvEGece2kVkXDlkdAanxKUlIuV538RQXjRy5to2slGb1nZtX1qFAOYHEU1e3VVg0SJwmt8ExSptyEEm7WG4G3VbdxEOBcAzJsNAdXI6u57V6HD/K3PYOJQQLrSBRR3XZWqp67drl7d1VUXCnjUvH76OUKhwCxUNrSLpQBKmmItcwSdiHkjFYD/dFYhnPuroMvHTh5M1Vm9o5jmNQw3Jo6ssILPNY5oHR/uZjUDfjOHzJSenCIeiaRRkUv9R1wkRAyXTrKff62Q8bS4taycPga3V9g3wlwiHmn73oScNk2RfBfJGki71E8jSZnh6YiujTIqQIgZcNulcUHKcy4RBYBH2A5qIPtsD8iJTBKAAxSkX8SqTBWC3GDqaUoKbSg5m0LcMgFTMyEFdV3JJtFLPTUJZNTyw1oW2kUuEQ1sVTFxokGqLybRXK14vGC2fQJNEQlVucCbT4UaTwyJqbqAqaCL1+pXGNabURDsF5VK8Drh+5T6JyV3UYGt9tyWQJf+Dr4DCUEaZOviZfRlsri3MYOq5T/sQ564OuiebOm95wX1vhEFojvBVDVkYEoudCvzAHtRbOhPmfXyzIVF0z2IW6QXWzAFbP212iTghnwtzPO4uQqqN7F6omF0w8/XbtPI4SOyWcCR9cmBTLNIsF5TKQLVhN2m+3zvPsuZPCOUxW8wpuqeVF9kQ0wK89SKZa6zR3Dh73hXMYcmVYj1rAQJWG3kLDYUC1+oRKBAHI0fvp3576rRaf0yjhHIW2X0z99odQTomvApmGKQTh0ccEkEb0u4zFL/Hv2q+9RfF4PB6Px+PxeDwej8fj8Xg8Ho/H4/F46s3/AWuysQegAZKYAAAAAElFTkSuQmCC</content>
  </file>
  <file path="src-tauri\icons\Square150x150Logo.png" size="3966" modified_time="2025-08-07T13:39:00.749851" mime_type="image/png" content_type="binary">
    <content>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</content>
  </file>
  <file path="src-tauri\icons\Square284x284Logo.png" size="7737" modified_time="2025-08-07T13:39:00.750351" mime_type="image/png" content_type="binary">
    <content></content>
  </file>
  <file path="src-tauri\icons\Square30x30Logo.png" size="903" modified_time="2025-08-07T13:39:00.750850" mime_type="image/png" content_type="binary">
    <content>iVBORw0KGgoAAAANSUhEUgAAAB4AAAAeCAYAAAA7MK6iAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAAMcSURBVHgB7VZLctpAEO1GXriyiY4gl8HlrAzeGFeqbHwDcoLgE8Q+AeIE2CcwnMDkBGAvgpNN5FUqAcqTG2iRrCKp06PvICQkh+ySVyVgZnr69euZbgHwrwHhD0Hjus5fdX6McErgmTUpu//ZxExYBw37QD6pnlq2AXEErtfjIAT8LWK6O7zgz34JUxs8kuRXsCkxk5r82U0maMK7R/yIYCwzgB1IUg9MfplHXoqY09uBCt6EQ5tnTDy1rjNt7+ocHJoK+VnW2VegDCrYXXKUQyrBaz22OY8nNGWvagcFYLVtDu+AL80ETz7fQUnQfeOW09+Og02pLn3G1ems5Wz/sESjYStB1WNFrn+eQllrcabG4eiKM3Gp+itMdW36rVN7mD9xiGN1nh0bvmOpSj78O6ztQFGgMAiSlAtXhphJB4R4Q0AGb7ZVtQArdWyw+oOUi8g+Xe+wBTnYfZhfMeHbaExIoxynCVz6nppZIYyQqVimF4He+YRAAl1qLJp756pNkEoy+acIgqBO6oyNmBjBSnNkK8ZKV1IGItyzxetXItNMlg5AL9OHxj6IQkOYFBJLtf6ZBhtM0cwmXQdfLVEnHAo8sd4XErPa00it4zlDdan6YXbB9dwlBBuJhvPjmplB2lK6HITHsYKVM47UyrMVx4na/ekTlw/0AUlHaYPQlbW9tPf+8CasXSOckfU7LEWcBwccIz3Hyl8uT8TphaymsZ4Y0S8TJFwqBWd7y2KlIvELtkvOYzyMmgeRxS3yzTrSbOLIOYKuplI0dmyNbziTD3hxhNx/1aMI97SwZTW4rEZQgJVe7ZOF7ZEAB4tm9RxKIgxUPhO+eBN4DrHv4GE2Dh3wOWJncVQdrnOy+/FrG6lyGwRLgpvNDhQg+3JR0hS4bAasxMxzIEsMPS0pH6zk2qrIfS2yav5/Bf0kFhSINCDwHise6jyWJcU1H2Qm9GbOj2o92IQ4Jid+33LtrrOTN5yDMmfNvWsoicI/AvvTL4aLWpcI2/KmpwnlW4v7eW/lhm9KrKL6aXbKTUPXPE8nBx9/vfgpUu/o/8jFb5JzZWZWfiSYAAAAAElFTkSuQmCC</content>
  </file>
  <file path="src-tauri\icons\Square310x310Logo.png" size="8591" modified_time="2025-08-07T13:39:00.750850" mime_type="image/png" content_type="binary">
    <content></content>
  </file>
  <file path="src-tauri\icons\Square44x44Logo.png" size="1299" modified_time="2025-08-07T13:39:00.751351" mime_type="image/png" content_type="binary">
    <content>iVBORw0KGgoAAAANSUhEUgAAACwAAAAsCAYAAAAehFoBAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAAXNSR0IArs4c6QAAAARnQU1BAACxjwv8YQUAAASoSURBVHgB7VhdktpGEO6RWFcqlVS4QaCybCVVeYA82LvlKgMnCHsCyAnAJ0B7gl2fYNkTxD4BkIfsOg9GeYyFg3KC4ConZbySOt0DeKWRRiCB87TfAz9DT89Hq+frngG4xz0iEPAJgcNqkd6Kq69z0bTnsCP2SlgSNKANQrQAoQp3ZNew6Tcb/OCKyI8gB/ZGGMc/WPTahThJHVyyt0TdvoIM2JkwRbUEhviZPlYhD4S4EE9ePd3aHHbAiuyQPpaSDdAFGUlJLClF1rAhwOY2OV6AnEgh69KvFxDAlUqA5lQpRF0i31HmVMGUT6kJG5A7wjiuzeJkJdGzTZHSplGAT2nuRdrcXIRpwQ4teKmM8gY6gwygPz2gt3ZoaE6ka0Ta1c0xIA8M0f+4AKJNS/eykpUIsAecv3dgWeymTckcYYpui2a1ifQF+Pj7rsWA/DVWe2ENjnJZ5/f/qHQtSQJgpCOBv9SGVGgaoZGOTp9zpURpMitWbt50D2+c4Tcv/2glkuBCYoi/Za7zBjPERKpEojE+V0a0mp6Z8OGvTq/w3p8hBLybG4Z368bWZxUA7CvDa2WII4AXUQcaXYcMOsxRLSw8XrDBHte4/TxOWPYTGjccZUoNWxlXU0Vb3rci/O31rOQv/CEmVDS3Vsu26UzxFeyAjYQ5skuyWIr8gBQVA5JFPoCxJtlc8WQyTloGtsTGHDYXvqWSFYAD77N35emjSqL2LltHtJRhlqtTSEZ0kwmwNXbpEeZU8MDrKs4s59HRxiLBhYTy9WqVz/Ok3uIjTPFjaFswtIRTdbhyM72k6HZCQ6PpcWVjg5IFq75iFhlcFg43yV6bEhxdhSx46P0E+0a0yrEmD9J6CW1K+HDbCD8AIj9wT75zk2x5Yx4sgjaKoMgbbnpSGcEWoOJCmza2mVPTTZ/DwqhDJLHE8yQzrnTivX+JAovSnP7j4bVzRqQt0BHlkm1SBURUqiR1fCnRZWhTQlUGw1/8legAzXNgsmEI6BPpRqLfZcme0QJqSbe36fi0hIVC2Hn8fWznMqmYPt95rqtDoZIdP03rJU9xuwOEWdj5nkE2PsvznLuNeUpKCDf8vfzqz69VG+dh2aYn4SbN9wIvqT0shT7PZRvZsE+z9NT6CCvVxrgNGol2/sGpSpq+9zSKUqKIjijnW1JrM95JLH1rULl+3UERObdpi0ZpMima3hd1MwiKHx78+yJzQ5QBWsKynaS+N6IACM1tNTbdr8fH/T49X2v6sDLOMn9DaX5NpTl0hyDQ9h7808wTQW78wcQ2oLxQYdl03xwflSEjUlXCRD+qi7SYufjyHDKC5I+0F87XZCWEYUEObDyEHr50+hQOKzqLIh0cnLonZTdtLj9+bk/F8pIwjNxN1FanZj5sAoRPtUtQugwMP3jmPD6KKEqJGqcCeB1y31WrIKeCj35T15fshbDcKB+84erONw4UdPoIXOkQoUh/pJRotiNZ6T+LMaUH5SH0IB9G3J7uQpaR+SKF9ZklSRfFGOjsJwRazvHRM9gDct/8HP7m1EWAXFyqsVThA6oQIzRx4BfejfdZSPZ2VbXuNVC8ffspK9097qHgP6hUHfJmPjEyAAAAAElFTkSuQmCC</content>
  </file>
  <file path="src-tauri\icons\Square71x71Logo.png" size="2011" modified_time="2025-08-07T13:39:00.751851" mime_type="image/png" content_type="binary">
    <content>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</content>
  </file>
  <file path="src-tauri\icons\Square89x89Logo.png" size="2468" modified_time="2025-08-07T13:39:00.751851" mime_type="image/png" content_type="binary">
    <content>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</content>
  </file>
  <file path="src-tauri\icons\StoreLogo.png" size="1523" modified_time="2025-08-07T13:39:00.752351" mime_type="image/png" content_type="binary">
    <content>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</content>
  </file>
  <file path="src-tauri\src\lib.rs" size="504" modified_time="2025-08-11T10:23:12.319932" mime_type="application/octet-stream" content_type="text">
    <content>// Learn more about Tauri commands at https://tauri.app/develop/calling-rust/
#[tauri::command]
fn greet(name: &amp;str) -&gt; String {
    format!("Hello, {}! You've been greeted from Rust!", name)
}

#[cfg_attr(mobile, tauri::mobile_entry_point)]
pub fn run() {
    tauri::Builder::default()
        .plugin(tauri_plugin_opener::init())
        .invoke_handler(tauri::generate_handler![greet])
        .run(tauri::generate_context!())
        .expect("error while running tauri application");
}
</content>
  </file>
  <file path="src-tauri\src\main.rs" size="188" modified_time="2025-08-07T13:39:00.755351" mime_type="application/octet-stream" content_type="text">
    <content>// Prevents additional console window on Windows in release, DO NOT REMOVE!!
#![cfg_attr(not(debug_assertions), windows_subsystem = "windows")]

fn main() {
    synapse_lib::run()
}
</content>
  </file>
</code_package>
